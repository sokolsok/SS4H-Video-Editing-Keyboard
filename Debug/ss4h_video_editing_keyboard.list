
ss4h_video_editing_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800aa0c  0800aa0c  0001aa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa7c  0800aa7c  000203e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa7c  0800aa7c  0001aa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa84  0800aa84  000203e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa84  0800aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e0  20000000  0800aa8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f4  200003e0  0800ae6c  000203e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dd4  0800ae6c  00020dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001961a  00000000  00000000  00020409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da0  00000000  00000000  00039a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0003d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000652a  00000000  00000000  0003ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1d7  00000000  00000000  00046492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008600c  00000000  00000000  00061669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005440  00000000  00000000  000e76c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200003e0 	.word	0x200003e0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a9f4 	.word	0x0800a9f4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200003e4 	.word	0x200003e4
 8000178:	0800a9f4 	.word	0x0800a9f4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b71      	ldr	r3, [pc, #452]	; (8000660 <MX_GPIO_Init+0x1dc>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a70      	ldr	r2, [pc, #448]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b6e      	ldr	r3, [pc, #440]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004b2:	4b6b      	ldr	r3, [pc, #428]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a6a      	ldr	r2, [pc, #424]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b68      	ldr	r3, [pc, #416]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b65      	ldr	r3, [pc, #404]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a64      	ldr	r2, [pc, #400]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b62      	ldr	r3, [pc, #392]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b5f      	ldr	r3, [pc, #380]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a5e      	ldr	r2, [pc, #376]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b5c      	ldr	r3, [pc, #368]	; (8000660 <MX_GPIO_Init+0x1dc>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDS_B_GPIO_Port, LEDS_B_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000500:	4858      	ldr	r0, [pc, #352]	; (8000664 <MX_GPIO_Init+0x1e0>)
 8000502:	f002 fa28 	bl	8002956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDS_A_GPIO_Port, LEDS_A_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050c:	4855      	ldr	r0, [pc, #340]	; (8000664 <MX_GPIO_Init+0x1e0>)
 800050e:	f002 fa22 	bl	8002956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2160      	movs	r1, #96	; 0x60
 8000516:	4854      	ldr	r0, [pc, #336]	; (8000668 <MX_GPIO_Init+0x1e4>)
 8000518:	f002 fa1d 	bl	8002956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|COL4_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000522:	4851      	ldr	r0, [pc, #324]	; (8000668 <MX_GPIO_Init+0x1e4>)
 8000524:	f002 fa17 	bl	8002956 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL6_Pin|COL2_Pin|COL3_Pin|COL1_Pin
 8000528:	2200      	movs	r2, #0
 800052a:	f24f 0104 	movw	r1, #61444	; 0xf004
 800052e:	484f      	ldr	r0, [pc, #316]	; (800066c <MX_GPIO_Init+0x1e8>)
 8000530:	f002 fa11 	bl	8002956 <HAL_GPIO_WritePin>
                          |COL5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LEDS_B_Pin|LEDS_A_Pin;
 8000534:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000542:	2302      	movs	r3, #2
 8000544:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	4845      	ldr	r0, [pc, #276]	; (8000664 <MX_GPIO_Init+0x1e0>)
 800054e:	f002 f86b 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin;
 8000552:	230f      	movs	r3, #15
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000556:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	4840      	ldr	r0, [pc, #256]	; (8000668 <MX_GPIO_Init+0x1e4>)
 8000568:	f002 f85e 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 800056c:	23e0      	movs	r3, #224	; 0xe0
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	2302      	movs	r3, #2
 800057a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	4839      	ldr	r0, [pc, #228]	; (8000668 <MX_GPIO_Init+0x1e4>)
 8000584:	f002 f850 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = COL6_Pin|COL2_Pin|COL3_Pin|COL1_Pin
 8000588:	f24f 0304 	movw	r3, #61444	; 0xf004
 800058c:	617b      	str	r3, [r7, #20]
                          |COL5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4832      	ldr	r0, [pc, #200]	; (800066c <MX_GPIO_Init+0x1e8>)
 80005a2:	f002 f841 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COL4_Pin;
 80005a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2300      	movs	r3, #0
 80005b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	482a      	ldr	r0, [pc, #168]	; (8000668 <MX_GPIO_Init+0x1e4>)
 80005c0:	f002 f832 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_PUSH_Pin;
 80005c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_PUSH_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4823      	ldr	r0, [pc, #140]	; (8000668 <MX_GPIO_Init+0x1e4>)
 80005da:	f002 f825 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW6_Pin;
 80005de:	2330      	movs	r3, #48	; 0x30
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	481e      	ldr	r0, [pc, #120]	; (800066c <MX_GPIO_Init+0x1e8>)
 80005f4:	f002 f818 	bl	8002628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	2006      	movs	r0, #6
 80005fe:	f001 ff5e 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000602:	2006      	movs	r0, #6
 8000604:	f001 ff77 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	2007      	movs	r0, #7
 800060e:	f001 ff56 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000612:	2007      	movs	r0, #7
 8000614:	f001 ff6f 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	2008      	movs	r0, #8
 800061e:	f001 ff4e 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000622:	2008      	movs	r0, #8
 8000624:	f001 ff67 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2009      	movs	r0, #9
 800062e:	f001 ff46 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000632:	2009      	movs	r0, #9
 8000634:	f001 ff5f 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	200a      	movs	r0, #10
 800063e:	f001 ff3e 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000642:	200a      	movs	r0, #10
 8000644:	f001 ff57 	bl	80024f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2017      	movs	r0, #23
 800064e:	f001 ff36 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000652:	2017      	movs	r0, #23
 8000654:	f001 ff4f 	bl	80024f6 <HAL_NVIC_EnableIRQ>

}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40020800 	.word	0x40020800
 8000668:	40020000 	.word	0x40020000
 800066c:	40020400 	.word	0x40020400

08000670 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <MX_I2C1_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_I2C1_Init+0x50>)
 800067c:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x58>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_I2C1_Init+0x50>)
 800068e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_I2C1_Init+0x50>)
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_I2C1_Init+0x50>)
 80006ae:	f002 f983 	bl	80029b8 <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f001 fa50 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200003fc 	.word	0x200003fc
 80006c4:	40005400 	.word	0x40005400
 80006c8:	000186a0 	.word	0x000186a0

080006cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C2_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C2_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C2_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C2_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C2_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C2_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C2_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C2_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C2_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C2_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C2_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C2_Init+0x50>)
 800070a:	f002 f955 	bl	80029b8 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000714:	f001 fa22 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000450 	.word	0x20000450
 8000720:	40005800 	.word	0x40005800
 8000724:	00061a80 	.word	0x00061a80

08000728 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <HAL_I2C_MspInit+0xdc>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d129      	bne.n	800079e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a2e      	ldr	r2, [pc, #184]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ENC_SCL_Pin|ENC_SDA_Pin;
 8000762:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	2312      	movs	r3, #18
 800076a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000774:	2304      	movs	r3, #4
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4823      	ldr	r0, [pc, #140]	; (800080c <HAL_I2C_MspInit+0xe4>)
 8000780:	f001 ff52 	bl	8002628 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 8000786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000788:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 800078a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800078e:	6253      	str	r3, [r2, #36]	; 0x24
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 8000792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800079c:	e02d      	b.n	80007fa <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <HAL_I2C_MspInit+0xe8>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d128      	bne.n	80007fa <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	4a16      	ldr	r2, [pc, #88]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	61d3      	str	r3, [r2, #28]
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80007c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c6:	2312      	movs	r3, #18
 80007c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007d2:	2304      	movs	r3, #4
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <HAL_I2C_MspInit+0xe4>)
 80007de:	f001 ff23 	bl	8002628 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 80007e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ec:	6253      	str	r3, [r2, #36]	; 0x24
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_I2C_MspInit+0xe0>)
 80007f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
}
 80007fa:	bf00      	nop
 80007fc:	3730      	adds	r7, #48	; 0x30
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40005400 	.word	0x40005400
 8000808:	40023800 	.word	0x40023800
 800080c:	40020400 	.word	0x40020400
 8000810:	40005800 	.word	0x40005800

08000814 <HAL_GPIO_EXTI_Callback>:
		{MOD_SHIFT_L, 0, KEY_C},							//45 - Curve + Deselect All
};

/* GPIO EXTI Callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_WritePin(TEST_POINT_GPIO_Port, TEST_POINT_Pin, GPIO_PIN_SET);

	/* set debouncing time to defined value */
	__HAL_TIM_SET_PRESCALER(&htim7, (100-(100-DEBOUNCING_TIME))-1);
 800081e:	4b49      	ldr	r3, [pc, #292]	; (8000944 <HAL_GPIO_EXTI_Callback+0x130>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2213      	movs	r2, #19
 8000824:	629a      	str	r2, [r3, #40]	; 0x28

	switch(GPIO_Pin)
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	3b01      	subs	r3, #1
 800082a:	2b1f      	cmp	r3, #31
 800082c:	f200 8086 	bhi.w	800093c <HAL_GPIO_EXTI_Callback+0x128>
 8000830:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <HAL_GPIO_EXTI_Callback+0x24>)
 8000832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000836:	bf00      	nop
 8000838:	080008fb 	.word	0x080008fb
 800083c:	080008e5 	.word	0x080008e5
 8000840:	0800093d 	.word	0x0800093d
 8000844:	080008cf 	.word	0x080008cf
 8000848:	0800093d 	.word	0x0800093d
 800084c:	0800093d 	.word	0x0800093d
 8000850:	0800093d 	.word	0x0800093d
 8000854:	080008b9 	.word	0x080008b9
 8000858:	0800093d 	.word	0x0800093d
 800085c:	0800093d 	.word	0x0800093d
 8000860:	0800093d 	.word	0x0800093d
 8000864:	0800093d 	.word	0x0800093d
 8000868:	0800093d 	.word	0x0800093d
 800086c:	0800093d 	.word	0x0800093d
 8000870:	0800093d 	.word	0x0800093d
 8000874:	08000911 	.word	0x08000911
 8000878:	0800093d 	.word	0x0800093d
 800087c:	0800093d 	.word	0x0800093d
 8000880:	0800093d 	.word	0x0800093d
 8000884:	0800093d 	.word	0x0800093d
 8000888:	0800093d 	.word	0x0800093d
 800088c:	0800093d 	.word	0x0800093d
 8000890:	0800093d 	.word	0x0800093d
 8000894:	0800093d 	.word	0x0800093d
 8000898:	0800093d 	.word	0x0800093d
 800089c:	0800093d 	.word	0x0800093d
 80008a0:	0800093d 	.word	0x0800093d
 80008a4:	0800093d 	.word	0x0800093d
 80008a8:	0800093d 	.word	0x0800093d
 80008ac:	0800093d 	.word	0x0800093d
 80008b0:	0800093d 	.word	0x0800093d
 80008b4:	08000927 	.word	0x08000927
	{
		case ROW1_Pin:
			if(Status.Rows.ROW1 == IDLE)
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <HAL_GPIO_EXTI_Callback+0xb2>
				Status.Rows.ROW1 = DEBOUNCED;
 80008c0:	4b21      	ldr	r3, [pc, #132]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim7);
 80008c6:	481f      	ldr	r0, [pc, #124]	; (8000944 <HAL_GPIO_EXTI_Callback+0x130>)
 80008c8:	f004 fbc4 	bl	8005054 <HAL_TIM_Base_Start_IT>
			break;
 80008cc:	e036      	b.n	800093c <HAL_GPIO_EXTI_Callback+0x128>
		case ROW2_Pin:
			if(Status.Rows.ROW2 == IDLE)
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 80008d0:	785b      	ldrb	r3, [r3, #1]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <HAL_GPIO_EXTI_Callback+0xc8>
				Status.Rows.ROW2 = DEBOUNCED;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 80008d8:	2201      	movs	r2, #1
 80008da:	705a      	strb	r2, [r3, #1]

			HAL_TIM_Base_Start_IT(&htim7);
 80008dc:	4819      	ldr	r0, [pc, #100]	; (8000944 <HAL_GPIO_EXTI_Callback+0x130>)
 80008de:	f004 fbb9 	bl	8005054 <HAL_TIM_Base_Start_IT>
			break;
 80008e2:	e02b      	b.n	800093c <HAL_GPIO_EXTI_Callback+0x128>
		case ROW3_Pin:
			if(Status.Rows.ROW3 == IDLE)
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 80008e6:	789b      	ldrb	r3, [r3, #2]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <HAL_GPIO_EXTI_Callback+0xde>
				Status.Rows.ROW3 = DEBOUNCED;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	709a      	strb	r2, [r3, #2]

			HAL_TIM_Base_Start_IT(&htim7);
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <HAL_GPIO_EXTI_Callback+0x130>)
 80008f4:	f004 fbae 	bl	8005054 <HAL_TIM_Base_Start_IT>
			break;
 80008f8:	e020      	b.n	800093c <HAL_GPIO_EXTI_Callback+0x128>
		case ROW4_Pin:
			if(Status.Rows.ROW4 == IDLE)
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 80008fc:	78db      	ldrb	r3, [r3, #3]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d102      	bne.n	8000908 <HAL_GPIO_EXTI_Callback+0xf4>
				Status.Rows.ROW4 = DEBOUNCED;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 8000904:	2201      	movs	r2, #1
 8000906:	70da      	strb	r2, [r3, #3]

			HAL_TIM_Base_Start_IT(&htim7);
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <HAL_GPIO_EXTI_Callback+0x130>)
 800090a:	f004 fba3 	bl	8005054 <HAL_TIM_Base_Start_IT>
			break;
 800090e:	e015      	b.n	800093c <HAL_GPIO_EXTI_Callback+0x128>
		case ROW5_Pin:
			if(Status.Rows.ROW5 == IDLE)
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <HAL_GPIO_EXTI_Callback+0x10a>
				Status.Rows.ROW5 = DEBOUNCED;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 800091a:	2201      	movs	r2, #1
 800091c:	711a      	strb	r2, [r3, #4]

			HAL_TIM_Base_Start_IT(&htim7);
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_GPIO_EXTI_Callback+0x130>)
 8000920:	f004 fb98 	bl	8005054 <HAL_TIM_Base_Start_IT>
			break;
 8000924:	e00a      	b.n	800093c <HAL_GPIO_EXTI_Callback+0x128>
		case ROW6_Pin:
			if(Status.Rows.ROW6 == IDLE)
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 8000928:	795b      	ldrb	r3, [r3, #5]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d102      	bne.n	8000934 <HAL_GPIO_EXTI_Callback+0x120>
				Status.Rows.ROW6 = DEBOUNCED;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_GPIO_EXTI_Callback+0x134>)
 8000930:	2201      	movs	r2, #1
 8000932:	715a      	strb	r2, [r3, #5]

			HAL_TIM_Base_Start_IT(&htim7);
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <HAL_GPIO_EXTI_Callback+0x130>)
 8000936:	f004 fb8d 	bl	8005054 <HAL_TIM_Base_Start_IT>
			break;
 800093a:	bf00      	nop
	}
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000056c 	.word	0x2000056c
 8000948:	200004a8 	.word	0x200004a8

0800094c <HAL_TIM_PeriodElapsedCallback>:

/* DEBOUNCING */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if(htim == &htim7)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a49      	ldr	r2, [pc, #292]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000958:	4293      	cmp	r3, r2
 800095a:	f040 808b 	bne.w	8000a74 <HAL_TIM_PeriodElapsedCallback+0x128>
	{
		HAL_TIM_Base_Stop_IT(&htim7);
 800095e:	4847      	ldr	r0, [pc, #284]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000960:	f004 fbca 	bl	80050f8 <HAL_TIM_Base_Stop_IT>

		if(Status.Rows.ROW1 == DEBOUNCED)
 8000964:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d111      	bne.n	8000990 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin) == GPIO_PIN_RESET)
 800096c:	2108      	movs	r1, #8
 800096e:	4845      	ldr	r0, [pc, #276]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000970:	f001 ffda 	bl	8002928 <HAL_GPIO_ReadPin>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d106      	bne.n	8000988 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				Status.Rows.ROW1 = PRESSED;
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800097c:	2202      	movs	r2, #2
 800097e:	701a      	strb	r2, [r3, #0]
				Status.Scan_Rows = 1;
 8000980:	4b3f      	ldr	r3, [pc, #252]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000982:	2201      	movs	r2, #1
 8000984:	719a      	strb	r2, [r3, #6]
 8000986:	e070      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
			}
			else
				Status.Rows.ROW1 = IDLE;
 8000988:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	e06c      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
		}
		else if(Status.Rows.ROW2 == DEBOUNCED)
 8000990:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000992:	785b      	ldrb	r3, [r3, #1]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d111      	bne.n	80009bc <HAL_TIM_PeriodElapsedCallback+0x70>
		{
			if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin) == GPIO_PIN_RESET)
 8000998:	2104      	movs	r1, #4
 800099a:	483a      	ldr	r0, [pc, #232]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800099c:	f001 ffc4 	bl	8002928 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d106      	bne.n	80009b4 <HAL_TIM_PeriodElapsedCallback+0x68>
			{
				Status.Rows.ROW2 = PRESSED;
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	705a      	strb	r2, [r3, #1]
				Status.Scan_Rows = 2;
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	719a      	strb	r2, [r3, #6]
 80009b2:	e05a      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
			}
			else
				Status.Rows.ROW2 = IDLE;
 80009b4:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	705a      	strb	r2, [r3, #1]
 80009ba:	e056      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
		}
		else if(Status.Rows.ROW3 == DEBOUNCED)
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d111      	bne.n	80009e8 <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin) == GPIO_PIN_RESET)
 80009c4:	2102      	movs	r1, #2
 80009c6:	482f      	ldr	r0, [pc, #188]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80009c8:	f001 ffae 	bl	8002928 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d106      	bne.n	80009e0 <HAL_TIM_PeriodElapsedCallback+0x94>
			{
				Status.Rows.ROW3 = PRESSED;
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009d4:	2202      	movs	r2, #2
 80009d6:	709a      	strb	r2, [r3, #2]
				Status.Scan_Rows = 3;
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009da:	2203      	movs	r2, #3
 80009dc:	719a      	strb	r2, [r3, #6]
 80009de:	e044      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
			}
			else
				Status.Rows.ROW3 = IDLE;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	709a      	strb	r2, [r3, #2]
 80009e6:	e040      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
		}
		else if(Status.Rows.ROW4 == DEBOUNCED)
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009ea:	78db      	ldrb	r3, [r3, #3]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d111      	bne.n	8000a14 <HAL_TIM_PeriodElapsedCallback+0xc8>
		{
			if(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin) == GPIO_PIN_RESET)
 80009f0:	2101      	movs	r1, #1
 80009f2:	4824      	ldr	r0, [pc, #144]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80009f4:	f001 ff98 	bl	8002928 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d106      	bne.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0xc0>
			{
				Status.Rows.ROW4 = PRESSED;
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	70da      	strb	r2, [r3, #3]
				Status.Scan_Rows = 4;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	719a      	strb	r2, [r3, #6]
 8000a0a:	e02e      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
			}
			else
				Status.Rows.ROW4 = IDLE;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	70da      	strb	r2, [r3, #3]
 8000a12:	e02a      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
		}
		else if(Status.Rows.ROW5 == DEBOUNCED)
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d111      	bne.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0xf4>
		{
			if(HAL_GPIO_ReadPin(ROW5_GPIO_Port, ROW5_Pin) == GPIO_PIN_RESET)
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	481a      	ldr	r0, [pc, #104]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000a20:	f001 ff82 	bl	8002928 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d106      	bne.n	8000a38 <HAL_TIM_PeriodElapsedCallback+0xec>
			{
				Status.Rows.ROW5 = PRESSED;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	711a      	strb	r2, [r3, #4]
				Status.Scan_Rows = 5;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a32:	2205      	movs	r2, #5
 8000a34:	719a      	strb	r2, [r3, #6]
 8000a36:	e018      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
			}
			else
				Status.Rows.ROW5 = IDLE;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	711a      	strb	r2, [r3, #4]
 8000a3e:	e014      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
		}
		else if(Status.Rows.ROW6 == DEBOUNCED)
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a42:	795b      	ldrb	r3, [r3, #5]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d110      	bne.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
		{
			if(HAL_GPIO_ReadPin(ROW6_GPIO_Port, ROW6_Pin) == GPIO_PIN_RESET)
 8000a48:	2120      	movs	r1, #32
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000a4c:	f001 ff6c 	bl	8002928 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d106      	bne.n	8000a64 <HAL_TIM_PeriodElapsedCallback+0x118>
			{
				Status.Rows.ROW6 = PRESSED;
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	715a      	strb	r2, [r3, #5]
				Status.Scan_Rows = 6;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a5e:	2206      	movs	r2, #6
 8000a60:	719a      	strb	r2, [r3, #6]
 8000a62:	e002      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x11e>
			}
			else
				Status.Rows.ROW6 = IDLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	715a      	strb	r2, [r3, #5]
		}

		Scan_Routine(Status.Scan_Rows);
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a6c:	799b      	ldrb	r3, [r3, #6]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f92a 	bl	8000cc8 <Scan_Routine>
	}
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000056c 	.word	0x2000056c
 8000a80:	200004a8 	.word	0x200004a8
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400

08000a8c <Set_Col_LOW>:

void Set_Col_LOW(uint8_t col)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
	switch(col)
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	f200 810d 	bhi.w	8000cb8 <Set_Col_LOW+0x22c>
 8000a9e:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <Set_Col_LOW+0x18>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000ac1 	.word	0x08000ac1
 8000aa8:	08000b09 	.word	0x08000b09
 8000aac:	08000b51 	.word	0x08000b51
 8000ab0:	08000b99 	.word	0x08000b99
 8000ab4:	08000be1 	.word	0x08000be1
 8000ab8:	08000c29 	.word	0x08000c29
 8000abc:	08000c71 	.word	0x08000c71
	{
		case 0:
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac6:	487e      	ldr	r0, [pc, #504]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000ac8:	f001 ff45 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad2:	487b      	ldr	r0, [pc, #492]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000ad4:	f001 ff3f 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ade:	4878      	ldr	r0, [pc, #480]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000ae0:	f001 ff39 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aea:	4876      	ldr	r0, [pc, #472]	; (8000cc4 <Set_Col_LOW+0x238>)
 8000aec:	f001 ff33 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL5_GPIO_Port, COL5_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af6:	4872      	ldr	r0, [pc, #456]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000af8:	f001 ff2d 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL6_GPIO_Port, COL6_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2104      	movs	r1, #4
 8000b00:	486f      	ldr	r0, [pc, #444]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b02:	f001 ff28 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8000b06:	e0d7      	b.n	8000cb8 <Set_Col_LOW+0x22c>
		case 1:
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0e:	486c      	ldr	r0, [pc, #432]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b10:	f001 ff21 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	4869      	ldr	r0, [pc, #420]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b1c:	f001 ff1b 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b26:	4866      	ldr	r0, [pc, #408]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b28:	f001 ff15 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	4864      	ldr	r0, [pc, #400]	; (8000cc4 <Set_Col_LOW+0x238>)
 8000b34:	f001 ff0f 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL5_GPIO_Port, COL5_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3e:	4860      	ldr	r0, [pc, #384]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b40:	f001 ff09 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL6_GPIO_Port, COL6_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2104      	movs	r1, #4
 8000b48:	485d      	ldr	r0, [pc, #372]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b4a:	f001 ff04 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8000b4e:	e0b3      	b.n	8000cb8 <Set_Col_LOW+0x22c>
		case 2:
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b56:	485a      	ldr	r0, [pc, #360]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b58:	f001 fefd 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b62:	4857      	ldr	r0, [pc, #348]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b64:	f001 fef7 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6e:	4854      	ldr	r0, [pc, #336]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b70:	f001 fef1 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	4852      	ldr	r0, [pc, #328]	; (8000cc4 <Set_Col_LOW+0x238>)
 8000b7c:	f001 feeb 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL5_GPIO_Port, COL5_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b86:	484e      	ldr	r0, [pc, #312]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b88:	f001 fee5 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL6_GPIO_Port, COL6_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2104      	movs	r1, #4
 8000b90:	484b      	ldr	r0, [pc, #300]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000b92:	f001 fee0 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8000b96:	e08f      	b.n	8000cb8 <Set_Col_LOW+0x22c>
		case 3:
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9e:	4848      	ldr	r0, [pc, #288]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000ba0:	f001 fed9 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000baa:	4845      	ldr	r0, [pc, #276]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000bac:	f001 fed3 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	4842      	ldr	r0, [pc, #264]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000bb8:	f001 fecd 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc2:	4840      	ldr	r0, [pc, #256]	; (8000cc4 <Set_Col_LOW+0x238>)
 8000bc4:	f001 fec7 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL5_GPIO_Port, COL5_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bce:	483c      	ldr	r0, [pc, #240]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000bd0:	f001 fec1 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL6_GPIO_Port, COL6_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4839      	ldr	r0, [pc, #228]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000bda:	f001 febc 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8000bde:	e06b      	b.n	8000cb8 <Set_Col_LOW+0x22c>
		case 4:
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be6:	4836      	ldr	r0, [pc, #216]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000be8:	f001 feb5 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf2:	4833      	ldr	r0, [pc, #204]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000bf4:	f001 feaf 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfe:	4830      	ldr	r0, [pc, #192]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c00:	f001 fea9 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0a:	482e      	ldr	r0, [pc, #184]	; (8000cc4 <Set_Col_LOW+0x238>)
 8000c0c:	f001 fea3 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL5_GPIO_Port, COL5_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	482a      	ldr	r0, [pc, #168]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c18:	f001 fe9d 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL6_GPIO_Port, COL6_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2104      	movs	r1, #4
 8000c20:	4827      	ldr	r0, [pc, #156]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c22:	f001 fe98 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8000c26:	e047      	b.n	8000cb8 <Set_Col_LOW+0x22c>
		case 5:
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2e:	4824      	ldr	r0, [pc, #144]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c30:	f001 fe91 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3a:	4821      	ldr	r0, [pc, #132]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c3c:	f001 fe8b 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c48:	f001 fe85 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c52:	481c      	ldr	r0, [pc, #112]	; (8000cc4 <Set_Col_LOW+0x238>)
 8000c54:	f001 fe7f 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL5_GPIO_Port, COL5_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c60:	f001 fe79 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL6_GPIO_Port, COL6_Pin, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2104      	movs	r1, #4
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c6a:	f001 fe74 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8000c6e:	e023      	b.n	8000cb8 <Set_Col_LOW+0x22c>
		case 6:
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c76:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c78:	f001 fe6d 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c82:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c84:	f001 fe67 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000c90:	f001 fe61 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <Set_Col_LOW+0x238>)
 8000c9c:	f001 fe5b 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL5_GPIO_Port, COL5_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000ca8:	f001 fe55 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL6_GPIO_Port, COL6_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2104      	movs	r1, #4
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <Set_Col_LOW+0x234>)
 8000cb2:	f001 fe50 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8000cb6:	bf00      	nop
	}
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40020400 	.word	0x40020400
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <Scan_Routine>:

	return 2; //Wrong input
}

uint8_t Scan_Routine(uint8_t no)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	switch(no)
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	f200 8104 	bhi.w	8000ee4 <Scan_Routine+0x21c>
 8000cdc:	a201      	add	r2, pc, #4	; (adr r2, 8000ce4 <Scan_Routine+0x1c>)
 8000cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce2:	bf00      	nop
 8000ce4:	08000cfd 	.word	0x08000cfd
 8000ce8:	08000d4b 	.word	0x08000d4b
 8000cec:	08000d9d 	.word	0x08000d9d
 8000cf0:	08000def 	.word	0x08000def
 8000cf4:	08000e41 	.word	0x08000e41
 8000cf8:	08000e93 	.word	0x08000e93
	{
		case 1:
			for(i = 1; i <= 6; i++)
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	e013      	b.n	8000d2a <Scan_Routine+0x62>
			{
				Set_Col_LOW(i);
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fec1 	bl	8000a8c <Set_Col_LOW>

				if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin) == GPIO_PIN_RESET)
 8000d0a:	2108      	movs	r1, #8
 8000d0c:	4878      	ldr	r0, [pc, #480]	; (8000ef0 <Scan_Routine+0x228>)
 8000d0e:	f001 fe0b 	bl	8002928 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d105      	bne.n	8000d24 <Scan_Routine+0x5c>
				{
					return Status.Pressed_Key = i;
 8000d18:	4a76      	ldr	r2, [pc, #472]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	71d3      	strb	r3, [r2, #7]
 8000d1e:	4b75      	ldr	r3, [pc, #468]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d20:	79db      	ldrb	r3, [r3, #7]
 8000d22:	e0e0      	b.n	8000ee6 <Scan_Routine+0x21e>
			for(i = 1; i <= 6; i++)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	3301      	adds	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d9e8      	bls.n	8000d02 <Scan_Routine+0x3a>

				}
			}

			Set_Col_LOW(0);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff feab 	bl	8000a8c <Set_Col_LOW>

			Status.Pressed_Key = 0;
 8000d36:	4b6f      	ldr	r3, [pc, #444]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	71da      	strb	r2, [r3, #7]
			Status.Rows.ROW1 = IDLE;
 8000d3c:	4b6d      	ldr	r3, [pc, #436]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
			Status.Scan_Rows = RESET;
 8000d42:	4b6c      	ldr	r3, [pc, #432]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	719a      	strb	r2, [r3, #6]
		break;
 8000d48:	e0cc      	b.n	8000ee4 <Scan_Routine+0x21c>
		case 2:
			for(i = 1; i <= 6; i++)
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e015      	b.n	8000d7c <Scan_Routine+0xb4>
			{
				Set_Col_LOW(i);
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fe9a 	bl	8000a8c <Set_Col_LOW>

				if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin) == GPIO_PIN_RESET)
 8000d58:	2104      	movs	r1, #4
 8000d5a:	4865      	ldr	r0, [pc, #404]	; (8000ef0 <Scan_Routine+0x228>)
 8000d5c:	f001 fde4 	bl	8002928 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d107      	bne.n	8000d76 <Scan_Routine+0xae>
				{
					return Status.Pressed_Key = i+6;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	3306      	adds	r3, #6
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b61      	ldr	r3, [pc, #388]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d6e:	71da      	strb	r2, [r3, #7]
 8000d70:	4b60      	ldr	r3, [pc, #384]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d72:	79db      	ldrb	r3, [r3, #7]
 8000d74:	e0b7      	b.n	8000ee6 <Scan_Routine+0x21e>
			for(i = 1; i <= 6; i++)
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d9e6      	bls.n	8000d50 <Scan_Routine+0x88>
				}
			}

			Set_Col_LOW(0);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff fe82 	bl	8000a8c <Set_Col_LOW>

			Status.Pressed_Key = 0;
 8000d88:	4b5a      	ldr	r3, [pc, #360]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	71da      	strb	r2, [r3, #7]
			Status.Rows.ROW2 = IDLE;
 8000d8e:	4b59      	ldr	r3, [pc, #356]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	705a      	strb	r2, [r3, #1]
			Status.Scan_Rows = RESET;
 8000d94:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <Scan_Routine+0x22c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	719a      	strb	r2, [r3, #6]
		break;
 8000d9a:	e0a3      	b.n	8000ee4 <Scan_Routine+0x21c>
		case 3:
			for(i = 1; i <= 6; i++)
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e015      	b.n	8000dce <Scan_Routine+0x106>
			{
				Set_Col_LOW(i);
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fe71 	bl	8000a8c <Set_Col_LOW>

				if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin) == GPIO_PIN_RESET)
 8000daa:	2102      	movs	r1, #2
 8000dac:	4850      	ldr	r0, [pc, #320]	; (8000ef0 <Scan_Routine+0x228>)
 8000dae:	f001 fdbb 	bl	8002928 <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d107      	bne.n	8000dc8 <Scan_Routine+0x100>
				{
					return Status.Pressed_Key = i+12;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	330c      	adds	r3, #12
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b4d      	ldr	r3, [pc, #308]	; (8000ef4 <Scan_Routine+0x22c>)
 8000dc0:	71da      	strb	r2, [r3, #7]
 8000dc2:	4b4c      	ldr	r3, [pc, #304]	; (8000ef4 <Scan_Routine+0x22c>)
 8000dc4:	79db      	ldrb	r3, [r3, #7]
 8000dc6:	e08e      	b.n	8000ee6 <Scan_Routine+0x21e>
			for(i = 1; i <= 6; i++)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b06      	cmp	r3, #6
 8000dd2:	d9e6      	bls.n	8000da2 <Scan_Routine+0xda>
				}
			}

			Set_Col_LOW(0);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fe59 	bl	8000a8c <Set_Col_LOW>

			Status.Pressed_Key = 0;
 8000dda:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <Scan_Routine+0x22c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	71da      	strb	r2, [r3, #7]
			Status.Rows.ROW3 = IDLE;
 8000de0:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <Scan_Routine+0x22c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	709a      	strb	r2, [r3, #2]
			Status.Scan_Rows = RESET;
 8000de6:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <Scan_Routine+0x22c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	719a      	strb	r2, [r3, #6]
		break;
 8000dec:	e07a      	b.n	8000ee4 <Scan_Routine+0x21c>
		case 4:
			for(i = 1; i <= 6; i++)
 8000dee:	2301      	movs	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e015      	b.n	8000e20 <Scan_Routine+0x158>
			{
				Set_Col_LOW(i);
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fe48 	bl	8000a8c <Set_Col_LOW>

				if(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin) == GPIO_PIN_RESET)
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	483c      	ldr	r0, [pc, #240]	; (8000ef0 <Scan_Routine+0x228>)
 8000e00:	f001 fd92 	bl	8002928 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d107      	bne.n	8000e1a <Scan_Routine+0x152>
				{
					return Status.Pressed_Key = i+18;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	3312      	adds	r3, #18
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e12:	71da      	strb	r2, [r3, #7]
 8000e14:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e16:	79db      	ldrb	r3, [r3, #7]
 8000e18:	e065      	b.n	8000ee6 <Scan_Routine+0x21e>
			for(i = 1; i <= 6; i++)
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d9e6      	bls.n	8000df4 <Scan_Routine+0x12c>
				}
			}

			Set_Col_LOW(0);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fe30 	bl	8000a8c <Set_Col_LOW>

			Status.Pressed_Key = 0;
 8000e2c:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	71da      	strb	r2, [r3, #7]
			Status.Rows.ROW4 = IDLE;
 8000e32:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	70da      	strb	r2, [r3, #3]
			Status.Scan_Rows = RESET;
 8000e38:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	719a      	strb	r2, [r3, #6]
		break;
 8000e3e:	e051      	b.n	8000ee4 <Scan_Routine+0x21c>
		case 5:
			for(i = 1; i <= 6; i++)
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e015      	b.n	8000e72 <Scan_Routine+0x1aa>
			{
				Set_Col_LOW(i);
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fe1f 	bl	8000a8c <Set_Col_LOW>

				if(HAL_GPIO_ReadPin(ROW5_GPIO_Port, ROW5_Pin) == GPIO_PIN_RESET)
 8000e4e:	2110      	movs	r1, #16
 8000e50:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <Scan_Routine+0x230>)
 8000e52:	f001 fd69 	bl	8002928 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d107      	bne.n	8000e6c <Scan_Routine+0x1a4>
				{
					return Status.Pressed_Key = i+24;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	3318      	adds	r3, #24
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e64:	71da      	strb	r2, [r3, #7]
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e68:	79db      	ldrb	r3, [r3, #7]
 8000e6a:	e03c      	b.n	8000ee6 <Scan_Routine+0x21e>
			for(i = 1; i <= 6; i++)
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d9e6      	bls.n	8000e46 <Scan_Routine+0x17e>
				}
			}

			Set_Col_LOW(0);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff fe07 	bl	8000a8c <Set_Col_LOW>

			Status.Pressed_Key = 0;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	71da      	strb	r2, [r3, #7]
			Status.Rows.ROW5 = IDLE;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	711a      	strb	r2, [r3, #4]
			Status.Scan_Rows = RESET;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <Scan_Routine+0x22c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	719a      	strb	r2, [r3, #6]
		break;
 8000e90:	e028      	b.n	8000ee4 <Scan_Routine+0x21c>
		case 6:
			for(i = 1; i <= 6; i++)
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
 8000e96:	e015      	b.n	8000ec4 <Scan_Routine+0x1fc>
			{
				Set_Col_LOW(i);
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fdf6 	bl	8000a8c <Set_Col_LOW>

				if(HAL_GPIO_ReadPin(ROW6_GPIO_Port, ROW6_Pin) == GPIO_PIN_RESET)
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	4815      	ldr	r0, [pc, #84]	; (8000ef8 <Scan_Routine+0x230>)
 8000ea4:	f001 fd40 	bl	8002928 <HAL_GPIO_ReadPin>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d107      	bne.n	8000ebe <Scan_Routine+0x1f6>
				{
					return Status.Pressed_Key = i+30;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	331e      	adds	r3, #30
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <Scan_Routine+0x22c>)
 8000eb6:	71da      	strb	r2, [r3, #7]
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <Scan_Routine+0x22c>)
 8000eba:	79db      	ldrb	r3, [r3, #7]
 8000ebc:	e013      	b.n	8000ee6 <Scan_Routine+0x21e>
			for(i = 1; i <= 6; i++)
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d9e6      	bls.n	8000e98 <Scan_Routine+0x1d0>
				}
			}

			Set_Col_LOW(0);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fdde 	bl	8000a8c <Set_Col_LOW>

			Status.Pressed_Key = 0;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <Scan_Routine+0x22c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	71da      	strb	r2, [r3, #7]
			Status.Rows.ROW6 = IDLE;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <Scan_Routine+0x22c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	715a      	strb	r2, [r3, #5]
			Status.Scan_Rows = RESET;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <Scan_Routine+0x22c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	719a      	strb	r2, [r3, #6]
		break;
 8000ee2:	bf00      	nop
	}

	return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	200004a8 	.word	0x200004a8
 8000ef8:	40020400 	.word	0x40020400

08000efc <HID_Buf_Routine>:

void HID_Buf_Routine(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	if(Status.Pressed_Key != 0)
 8000f00:	4b8f      	ldr	r3, [pc, #572]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f02:	79db      	ldrb	r3, [r3, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 8116 	beq.w	8001136 <HID_Buf_Routine+0x23a>
	{
		Status.Shuttle_mode = SHTL_STOP;
 8000f0a:	4b8d      	ldr	r3, [pc, #564]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	769a      	strb	r2, [r3, #26]

		if(Status.Pressed_Key == 28)
 8000f10:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f12:	79db      	ldrb	r3, [r3, #7]
 8000f14:	2b1c      	cmp	r3, #28
 8000f16:	d103      	bne.n	8000f20 <HID_Buf_Routine+0x24>
		  Status.Knob_Mode = SHTL;
 8000f18:	4b89      	ldr	r3, [pc, #548]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	741a      	strb	r2, [r3, #16]
			HID_Status.buff[0] = KeyMacro[Status.Pressed_Key];

			HID_Status.buff_ready = SET;
		}
	}
}
 8000f1e:	e10a      	b.n	8001136 <HID_Buf_Routine+0x23a>
		else if(Status.Pressed_Key == 29)
 8000f20:	4b87      	ldr	r3, [pc, #540]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f22:	79db      	ldrb	r3, [r3, #7]
 8000f24:	2b1d      	cmp	r3, #29
 8000f26:	d103      	bne.n	8000f30 <HID_Buf_Routine+0x34>
		  Status.Knob_Mode = JOG;
 8000f28:	4b85      	ldr	r3, [pc, #532]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	741a      	strb	r2, [r3, #16]
}
 8000f2e:	e102      	b.n	8001136 <HID_Buf_Routine+0x23a>
		else if(Status.Pressed_Key == 25)
 8000f30:	4b83      	ldr	r3, [pc, #524]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f32:	79db      	ldrb	r3, [r3, #7]
 8000f34:	2b19      	cmp	r3, #25
 8000f36:	d103      	bne.n	8000f40 <HID_Buf_Routine+0x44>
		  Status.Knob_Mode = SCRL;
 8000f38:	4b81      	ldr	r3, [pc, #516]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	741a      	strb	r2, [r3, #16]
}
 8000f3e:	e0fa      	b.n	8001136 <HID_Buf_Routine+0x23a>
		else if(Status.Pressed_Key == 1) // ESC
 8000f40:	4b7f      	ldr	r3, [pc, #508]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f42:	79db      	ldrb	r3, [r3, #7]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d121      	bne.n	8000f8c <HID_Buf_Routine+0x90>
			Status.Edit_mode = NONE_MODE;
 8000f48:	4b7d      	ldr	r3, [pc, #500]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	725a      	strb	r2, [r3, #9]
			HID_Status.buff[0] = KeyMacro[38]; //ESC
 8000f4e:	4a7d      	ldr	r2, [pc, #500]	; (8001144 <HID_Buf_Routine+0x248>)
 8000f50:	4b7d      	ldr	r3, [pc, #500]	; (8001148 <HID_Buf_Routine+0x24c>)
 8000f52:	3201      	adds	r2, #1
 8000f54:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8000f58:	cb03      	ldmia	r3!, {r0, r1}
 8000f5a:	6010      	str	r0, [r2, #0]
 8000f5c:	6051      	str	r1, [r2, #4]
			HID_Status.buff[1] = KeyMacro[35]; //Deselect All
 8000f5e:	4a79      	ldr	r2, [pc, #484]	; (8001144 <HID_Buf_Routine+0x248>)
 8000f60:	4b79      	ldr	r3, [pc, #484]	; (8001148 <HID_Buf_Routine+0x24c>)
 8000f62:	3209      	adds	r2, #9
 8000f64:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000f68:	cb03      	ldmia	r3!, {r0, r1}
 8000f6a:	6010      	str	r0, [r2, #0]
 8000f6c:	6051      	str	r1, [r2, #4]
			HID_Status.buff[2] = KeyMacro[39]; //Selection mode
 8000f6e:	4a75      	ldr	r2, [pc, #468]	; (8001144 <HID_Buf_Routine+0x248>)
 8000f70:	4b75      	ldr	r3, [pc, #468]	; (8001148 <HID_Buf_Routine+0x24c>)
 8000f72:	3211      	adds	r2, #17
 8000f74:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000f78:	cb03      	ldmia	r3!, {r0, r1}
 8000f7a:	6010      	str	r0, [r2, #0]
 8000f7c:	6051      	str	r1, [r2, #4]
			Status.NumOfKeys = 3;
 8000f7e:	4b70      	ldr	r3, [pc, #448]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f80:	2203      	movs	r2, #3
 8000f82:	721a      	strb	r2, [r3, #8]
			HID_Status.buff_ready = SET;
 8000f84:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <HID_Buf_Routine+0x248>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	e0d4      	b.n	8001136 <HID_Buf_Routine+0x23a>
		else if(Status.Pressed_Key == 4) // Smart Insert
 8000f8c:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <HID_Buf_Routine+0x244>)
 8000f8e:	79db      	ldrb	r3, [r3, #7]
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d11e      	bne.n	8000fd2 <HID_Buf_Routine+0xd6>
			HID_Status.buff[0] = KeyMacro[33];
 8000f94:	4a6b      	ldr	r2, [pc, #428]	; (8001144 <HID_Buf_Routine+0x248>)
 8000f96:	4b6c      	ldr	r3, [pc, #432]	; (8001148 <HID_Buf_Routine+0x24c>)
 8000f98:	3201      	adds	r2, #1
 8000f9a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000f9e:	cb03      	ldmia	r3!, {r0, r1}
 8000fa0:	6010      	str	r0, [r2, #0]
 8000fa2:	6051      	str	r1, [r2, #4]
			HID_Status.buff[1] = KeyMacro[34];
 8000fa4:	4a67      	ldr	r2, [pc, #412]	; (8001144 <HID_Buf_Routine+0x248>)
 8000fa6:	4b68      	ldr	r3, [pc, #416]	; (8001148 <HID_Buf_Routine+0x24c>)
 8000fa8:	3209      	adds	r2, #9
 8000faa:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000fae:	cb03      	ldmia	r3!, {r0, r1}
 8000fb0:	6010      	str	r0, [r2, #0]
 8000fb2:	6051      	str	r1, [r2, #4]
			HID_Status.buff[2] = KeyMacro[35];
 8000fb4:	4a63      	ldr	r2, [pc, #396]	; (8001144 <HID_Buf_Routine+0x248>)
 8000fb6:	4b64      	ldr	r3, [pc, #400]	; (8001148 <HID_Buf_Routine+0x24c>)
 8000fb8:	3211      	adds	r2, #17
 8000fba:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000fbe:	cb03      	ldmia	r3!, {r0, r1}
 8000fc0:	6010      	str	r0, [r2, #0]
 8000fc2:	6051      	str	r1, [r2, #4]
			Status.NumOfKeys = 3;
 8000fc4:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <HID_Buf_Routine+0x244>)
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	721a      	strb	r2, [r3, #8]
			HID_Status.buff_ready = SET;
 8000fca:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <HID_Buf_Routine+0x248>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	e0b1      	b.n	8001136 <HID_Buf_Routine+0x23a>
		else if(Status.Pressed_Key == 11) // Standard Transition
 8000fd2:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <HID_Buf_Routine+0x244>)
 8000fd4:	79db      	ldrb	r3, [r3, #7]
 8000fd6:	2b0b      	cmp	r3, #11
 8000fd8:	d11e      	bne.n	8001018 <HID_Buf_Routine+0x11c>
			HID_Status.buff[0] = KeyMacro[36];
 8000fda:	4a5a      	ldr	r2, [pc, #360]	; (8001144 <HID_Buf_Routine+0x248>)
 8000fdc:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <HID_Buf_Routine+0x24c>)
 8000fde:	3201      	adds	r2, #1
 8000fe0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000fe4:	cb03      	ldmia	r3!, {r0, r1}
 8000fe6:	6010      	str	r0, [r2, #0]
 8000fe8:	6051      	str	r1, [r2, #4]
			HID_Status.buff[1] = KeyMacro[37];
 8000fea:	4a56      	ldr	r2, [pc, #344]	; (8001144 <HID_Buf_Routine+0x248>)
 8000fec:	4b56      	ldr	r3, [pc, #344]	; (8001148 <HID_Buf_Routine+0x24c>)
 8000fee:	3209      	adds	r2, #9
 8000ff0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ff4:	cb03      	ldmia	r3!, {r0, r1}
 8000ff6:	6010      	str	r0, [r2, #0]
 8000ff8:	6051      	str	r1, [r2, #4]
			HID_Status.buff[2] = KeyMacro[35];
 8000ffa:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HID_Buf_Routine+0x248>)
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <HID_Buf_Routine+0x24c>)
 8000ffe:	3211      	adds	r2, #17
 8001000:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001004:	cb03      	ldmia	r3!, {r0, r1}
 8001006:	6010      	str	r0, [r2, #0]
 8001008:	6051      	str	r1, [r2, #4]
			Status.NumOfKeys = 3;
 800100a:	4b4d      	ldr	r3, [pc, #308]	; (8001140 <HID_Buf_Routine+0x244>)
 800100c:	2203      	movs	r2, #3
 800100e:	721a      	strb	r2, [r3, #8]
			HID_Status.buff_ready = SET;
 8001010:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <HID_Buf_Routine+0x248>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
}
 8001016:	e08e      	b.n	8001136 <HID_Buf_Routine+0x23a>
		else if(Status.Pressed_Key == 18) // Enable/Disable clip
 8001018:	4b49      	ldr	r3, [pc, #292]	; (8001140 <HID_Buf_Routine+0x244>)
 800101a:	79db      	ldrb	r3, [r3, #7]
 800101c:	2b12      	cmp	r3, #18
 800101e:	d11e      	bne.n	800105e <HID_Buf_Routine+0x162>
			HID_Status.buff[0] = KeyMacro[40];
 8001020:	4a48      	ldr	r2, [pc, #288]	; (8001144 <HID_Buf_Routine+0x248>)
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <HID_Buf_Routine+0x24c>)
 8001024:	3201      	adds	r2, #1
 8001026:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800102a:	cb03      	ldmia	r3!, {r0, r1}
 800102c:	6010      	str	r0, [r2, #0]
 800102e:	6051      	str	r1, [r2, #4]
			HID_Status.buff[1] = KeyMacro[41];
 8001030:	4a44      	ldr	r2, [pc, #272]	; (8001144 <HID_Buf_Routine+0x248>)
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <HID_Buf_Routine+0x24c>)
 8001034:	3209      	adds	r2, #9
 8001036:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800103a:	cb03      	ldmia	r3!, {r0, r1}
 800103c:	6010      	str	r0, [r2, #0]
 800103e:	6051      	str	r1, [r2, #4]
			HID_Status.buff[2] = KeyMacro[35];
 8001040:	4a40      	ldr	r2, [pc, #256]	; (8001144 <HID_Buf_Routine+0x248>)
 8001042:	4b41      	ldr	r3, [pc, #260]	; (8001148 <HID_Buf_Routine+0x24c>)
 8001044:	3211      	adds	r2, #17
 8001046:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800104a:	cb03      	ldmia	r3!, {r0, r1}
 800104c:	6010      	str	r0, [r2, #0]
 800104e:	6051      	str	r1, [r2, #4]
			Status.NumOfKeys = 3;
 8001050:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <HID_Buf_Routine+0x244>)
 8001052:	2203      	movs	r2, #3
 8001054:	721a      	strb	r2, [r3, #8]
			HID_Status.buff_ready = SET;
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <HID_Buf_Routine+0x248>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
}
 800105c:	e06b      	b.n	8001136 <HID_Buf_Routine+0x23a>
		else if(Status.Pressed_Key == 22) // Change speed
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <HID_Buf_Routine+0x244>)
 8001060:	79db      	ldrb	r3, [r3, #7]
 8001062:	2b16      	cmp	r3, #22
 8001064:	d11e      	bne.n	80010a4 <HID_Buf_Routine+0x1a8>
			HID_Status.buff[0] = KeyMacro[42];
 8001066:	4a37      	ldr	r2, [pc, #220]	; (8001144 <HID_Buf_Routine+0x248>)
 8001068:	4b37      	ldr	r3, [pc, #220]	; (8001148 <HID_Buf_Routine+0x24c>)
 800106a:	3201      	adds	r2, #1
 800106c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001070:	cb03      	ldmia	r3!, {r0, r1}
 8001072:	6010      	str	r0, [r2, #0]
 8001074:	6051      	str	r1, [r2, #4]
			HID_Status.buff[1] = KeyMacro[43];
 8001076:	4a33      	ldr	r2, [pc, #204]	; (8001144 <HID_Buf_Routine+0x248>)
 8001078:	4b33      	ldr	r3, [pc, #204]	; (8001148 <HID_Buf_Routine+0x24c>)
 800107a:	3209      	adds	r2, #9
 800107c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001080:	cb03      	ldmia	r3!, {r0, r1}
 8001082:	6010      	str	r0, [r2, #0]
 8001084:	6051      	str	r1, [r2, #4]
			HID_Status.buff[2] = KeyMacro[35];
 8001086:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <HID_Buf_Routine+0x248>)
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HID_Buf_Routine+0x24c>)
 800108a:	3211      	adds	r2, #17
 800108c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001090:	cb03      	ldmia	r3!, {r0, r1}
 8001092:	6010      	str	r0, [r2, #0]
 8001094:	6051      	str	r1, [r2, #4]
			Status.NumOfKeys = 3;
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <HID_Buf_Routine+0x244>)
 8001098:	2203      	movs	r2, #3
 800109a:	721a      	strb	r2, [r3, #8]
			HID_Status.buff_ready = SET;
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <HID_Buf_Routine+0x248>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
}
 80010a2:	e048      	b.n	8001136 <HID_Buf_Routine+0x23a>
		else if(Status.Pressed_Key == 23) // Show curve
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <HID_Buf_Routine+0x244>)
 80010a6:	79db      	ldrb	r3, [r3, #7]
 80010a8:	2b17      	cmp	r3, #23
 80010aa:	d11e      	bne.n	80010ea <HID_Buf_Routine+0x1ee>
			HID_Status.buff[0] = KeyMacro[44];
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <HID_Buf_Routine+0x248>)
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HID_Buf_Routine+0x24c>)
 80010b0:	3201      	adds	r2, #1
 80010b2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80010b6:	cb03      	ldmia	r3!, {r0, r1}
 80010b8:	6010      	str	r0, [r2, #0]
 80010ba:	6051      	str	r1, [r2, #4]
			HID_Status.buff[1] = KeyMacro[45];
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <HID_Buf_Routine+0x248>)
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HID_Buf_Routine+0x24c>)
 80010c0:	3209      	adds	r2, #9
 80010c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010c6:	cb03      	ldmia	r3!, {r0, r1}
 80010c8:	6010      	str	r0, [r2, #0]
 80010ca:	6051      	str	r1, [r2, #4]
			HID_Status.buff[2] = KeyMacro[35];
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <HID_Buf_Routine+0x248>)
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HID_Buf_Routine+0x24c>)
 80010d0:	3211      	adds	r2, #17
 80010d2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80010d6:	cb03      	ldmia	r3!, {r0, r1}
 80010d8:	6010      	str	r0, [r2, #0]
 80010da:	6051      	str	r1, [r2, #4]
			Status.NumOfKeys = 3;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HID_Buf_Routine+0x244>)
 80010de:	2203      	movs	r2, #3
 80010e0:	721a      	strb	r2, [r3, #8]
			HID_Status.buff_ready = SET;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HID_Buf_Routine+0x248>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	e025      	b.n	8001136 <HID_Buf_Routine+0x23a>
		else if((Status.Pressed_Key == 19) || (Status.Pressed_Key == 20) ||
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HID_Buf_Routine+0x244>)
 80010ec:	79db      	ldrb	r3, [r3, #7]
 80010ee:	2b13      	cmp	r3, #19
 80010f0:	d021      	beq.n	8001136 <HID_Buf_Routine+0x23a>
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HID_Buf_Routine+0x244>)
 80010f4:	79db      	ldrb	r3, [r3, #7]
 80010f6:	2b14      	cmp	r3, #20
 80010f8:	d01d      	beq.n	8001136 <HID_Buf_Routine+0x23a>
				(Status.Pressed_Key == 24) || (Status.Pressed_Key == 32) ||
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HID_Buf_Routine+0x244>)
 80010fc:	79db      	ldrb	r3, [r3, #7]
		else if((Status.Pressed_Key == 19) || (Status.Pressed_Key == 20) ||
 80010fe:	2b18      	cmp	r3, #24
 8001100:	d019      	beq.n	8001136 <HID_Buf_Routine+0x23a>
				(Status.Pressed_Key == 24) || (Status.Pressed_Key == 32) ||
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HID_Buf_Routine+0x244>)
 8001104:	79db      	ldrb	r3, [r3, #7]
 8001106:	2b20      	cmp	r3, #32
 8001108:	d015      	beq.n	8001136 <HID_Buf_Routine+0x23a>
				(Status.Pressed_Key == 12) || (Status.Pressed_Key == 13)) // If long press key is pressed
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HID_Buf_Routine+0x244>)
 800110c:	79db      	ldrb	r3, [r3, #7]
				(Status.Pressed_Key == 24) || (Status.Pressed_Key == 32) ||
 800110e:	2b0c      	cmp	r3, #12
 8001110:	d011      	beq.n	8001136 <HID_Buf_Routine+0x23a>
				(Status.Pressed_Key == 12) || (Status.Pressed_Key == 13)) // If long press key is pressed
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HID_Buf_Routine+0x244>)
 8001114:	79db      	ldrb	r3, [r3, #7]
 8001116:	2b0d      	cmp	r3, #13
 8001118:	d00d      	beq.n	8001136 <HID_Buf_Routine+0x23a>
			HID_Status.buff[0] = KeyMacro[Status.Pressed_Key];
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HID_Buf_Routine+0x244>)
 800111c:	79db      	ldrb	r3, [r3, #7]
 800111e:	4618      	mov	r0, r3
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HID_Buf_Routine+0x248>)
 8001122:	4909      	ldr	r1, [pc, #36]	; (8001148 <HID_Buf_Routine+0x24c>)
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	00c3      	lsls	r3, r0, #3
 8001128:	440b      	add	r3, r1
 800112a:	cb03      	ldmia	r3!, {r0, r1}
 800112c:	6010      	str	r0, [r2, #0]
 800112e:	6051      	str	r1, [r2, #4]
			HID_Status.buff_ready = SET;
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HID_Buf_Routine+0x248>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200004a8 	.word	0x200004a8
 8001144:	200004d0 	.word	0x200004d0
 8001148:	20000000 	.word	0x20000000

0800114c <LEDS_Toggle>:
};

void Shuttle_mode_Routine(void);

void LEDS_Toggle(uint8_t state)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	static uint8_t knob_flag;

	if(state)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d023      	beq.n	80011a4 <LEDS_Toggle+0x58>
	{
		if(knob_flag == 0)
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <LEDS_Toggle+0x78>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10f      	bne.n	8001184 <LEDS_Toggle+0x38>
		{
			  HAL_GPIO_WritePin(LEDS_A_GPIO_Port, LEDS_A_Pin, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116a:	4817      	ldr	r0, [pc, #92]	; (80011c8 <LEDS_Toggle+0x7c>)
 800116c:	f001 fbf3 	bl	8002956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LEDS_B_GPIO_Port, LEDS_B_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <LEDS_Toggle+0x7c>)
 8001178:	f001 fbed 	bl	8002956 <HAL_GPIO_WritePin>

			  knob_flag = 1;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <LEDS_Toggle+0x78>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
	else
	{
		  HAL_GPIO_WritePin(LEDS_A_GPIO_Port, LEDS_A_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(LEDS_B_GPIO_Port, LEDS_B_Pin, GPIO_PIN_SET);
	}
}
 8001182:	e01b      	b.n	80011bc <LEDS_Toggle+0x70>
			  HAL_GPIO_WritePin(LEDS_A_GPIO_Port, LEDS_A_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <LEDS_Toggle+0x7c>)
 800118c:	f001 fbe3 	bl	8002956 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LEDS_B_GPIO_Port, LEDS_B_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <LEDS_Toggle+0x7c>)
 8001198:	f001 fbdd 	bl	8002956 <HAL_GPIO_WritePin>
			  knob_flag = 0;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <LEDS_Toggle+0x78>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	e00b      	b.n	80011bc <LEDS_Toggle+0x70>
		  HAL_GPIO_WritePin(LEDS_A_GPIO_Port, LEDS_A_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <LEDS_Toggle+0x7c>)
 80011ac:	f001 fbd3 	bl	8002956 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LEDS_B_GPIO_Port, LEDS_B_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <LEDS_Toggle+0x7c>)
 80011b8:	f001 fbcd 	bl	8002956 <HAL_GPIO_WritePin>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200004a4 	.word	0x200004a4
 80011c8:	40020800 	.word	0x40020800

080011cc <KnobRoutine>:

void KnobRoutine(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	static uint8_t KnobLED_counter;

	Status.KnobCounetr = htim2.Instance->CNT;
 80011d0:	4b8b      	ldr	r3, [pc, #556]	; (8001400 <KnobRoutine+0x234>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	4b8a      	ldr	r3, [pc, #552]	; (8001404 <KnobRoutine+0x238>)
 80011da:	815a      	strh	r2, [r3, #10]

	/* Knob rotated right */
	if(Status.KnobCounetr >= KNOB_DIV)
 80011dc:	4b89      	ldr	r3, [pc, #548]	; (8001404 <KnobRoutine+0x238>)
 80011de:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011e2:	2b77      	cmp	r3, #119	; 0x77
 80011e4:	dd6e      	ble.n	80012c4 <KnobRoutine+0xf8>
	{
		Status.KnobDir = 1;
 80011e6:	4b87      	ldr	r3, [pc, #540]	; (8001404 <KnobRoutine+0x238>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	739a      	strb	r2, [r3, #14]
		htim2.Instance->CNT = 0;
 80011ec:	4b84      	ldr	r3, [pc, #528]	; (8001400 <KnobRoutine+0x234>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24

		LEDS_Toggle(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff ffa9 	bl	800114c <LEDS_Toggle>
		KnobLED_counter = 0;
 80011fa:	4b83      	ldr	r3, [pc, #524]	; (8001408 <KnobRoutine+0x23c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]

		Status.Knob_Speed = Status.Knob_Speed_counter;
 8001200:	4b80      	ldr	r3, [pc, #512]	; (8001404 <KnobRoutine+0x238>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <KnobRoutine+0x238>)
 8001208:	825a      	strh	r2, [r3, #18]
		Status.Knob_Speed_counter = 0;
 800120a:	4b7e      	ldr	r3, [pc, #504]	; (8001404 <KnobRoutine+0x238>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]

		if(Status.Edit_mode == NONE_MODE)
 8001210:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <KnobRoutine+0x238>)
 8001212:	7a5b      	ldrb	r3, [r3, #9]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d117      	bne.n	8001248 <KnobRoutine+0x7c>
		{
			if(Status.Knob_Mode == JOG)
 8001218:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <KnobRoutine+0x238>)
 800121a:	7c1b      	ldrb	r3, [r3, #16]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d103      	bne.n	8001228 <KnobRoutine+0x5c>
				Status.KonbRotated = 1;
 8001220:	4b78      	ldr	r3, [pc, #480]	; (8001404 <KnobRoutine+0x238>)
 8001222:	2201      	movs	r2, #1
 8001224:	73da      	strb	r2, [r3, #15]
 8001226:	e0d1      	b.n	80013cc <KnobRoutine+0x200>
			else if(Status.Knob_Mode == SCRL)
 8001228:	4b76      	ldr	r3, [pc, #472]	; (8001404 <KnobRoutine+0x238>)
 800122a:	7c1b      	ldrb	r3, [r3, #16]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d103      	bne.n	8001238 <KnobRoutine+0x6c>
				Status.KonbRotated = 3;
 8001230:	4b74      	ldr	r3, [pc, #464]	; (8001404 <KnobRoutine+0x238>)
 8001232:	2203      	movs	r2, #3
 8001234:	73da      	strb	r2, [r3, #15]
 8001236:	e0c9      	b.n	80013cc <KnobRoutine+0x200>
			else if(Status.Knob_Mode == SHTL)
 8001238:	4b72      	ldr	r3, [pc, #456]	; (8001404 <KnobRoutine+0x238>)
 800123a:	7c1b      	ldrb	r3, [r3, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 80c5 	bne.w	80013cc <KnobRoutine+0x200>
				Shuttle_mode_Routine();
 8001242:	f000 f8e7 	bl	8001414 <Shuttle_mode_Routine>
 8001246:	e0c1      	b.n	80013cc <KnobRoutine+0x200>
		}
		else if((Status.Edit_mode == SLIP) || (Status.Edit_mode == SLIDE))
 8001248:	4b6e      	ldr	r3, [pc, #440]	; (8001404 <KnobRoutine+0x238>)
 800124a:	7a5b      	ldrb	r3, [r3, #9]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d003      	beq.n	8001258 <KnobRoutine+0x8c>
 8001250:	4b6c      	ldr	r3, [pc, #432]	; (8001404 <KnobRoutine+0x238>)
 8001252:	7a5b      	ldrb	r3, [r3, #9]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d110      	bne.n	800127a <KnobRoutine+0xae>
		{
			if(Status.Knob_Mode == JOG)
 8001258:	4b6a      	ldr	r3, [pc, #424]	; (8001404 <KnobRoutine+0x238>)
 800125a:	7c1b      	ldrb	r3, [r3, #16]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d103      	bne.n	8001268 <KnobRoutine+0x9c>
				Status.KonbRotated = 11;
 8001260:	4b68      	ldr	r3, [pc, #416]	; (8001404 <KnobRoutine+0x238>)
 8001262:	220b      	movs	r2, #11
 8001264:	73da      	strb	r2, [r3, #15]
			if(Status.Knob_Mode == JOG)
 8001266:	e0ae      	b.n	80013c6 <KnobRoutine+0x1fa>
			else if(Status.Knob_Mode == SCRL)
 8001268:	4b66      	ldr	r3, [pc, #408]	; (8001404 <KnobRoutine+0x238>)
 800126a:	7c1b      	ldrb	r3, [r3, #16]
 800126c:	2b02      	cmp	r3, #2
 800126e:	f040 80aa 	bne.w	80013c6 <KnobRoutine+0x1fa>
				Status.KonbRotated = 15;
 8001272:	4b64      	ldr	r3, [pc, #400]	; (8001404 <KnobRoutine+0x238>)
 8001274:	220f      	movs	r2, #15
 8001276:	73da      	strb	r2, [r3, #15]
			if(Status.Knob_Mode == JOG)
 8001278:	e0a5      	b.n	80013c6 <KnobRoutine+0x1fa>
		}
		else if((Status.Edit_mode == ZOOM))
 800127a:	4b62      	ldr	r3, [pc, #392]	; (8001404 <KnobRoutine+0x238>)
 800127c:	7a5b      	ldrb	r3, [r3, #9]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d103      	bne.n	800128a <KnobRoutine+0xbe>
			Status.KonbRotated = 7;
 8001282:	4b60      	ldr	r3, [pc, #384]	; (8001404 <KnobRoutine+0x238>)
 8001284:	2207      	movs	r2, #7
 8001286:	73da      	strb	r2, [r3, #15]
 8001288:	e0a0      	b.n	80013cc <KnobRoutine+0x200>
		else if((Status.Edit_mode == AUDIO))
 800128a:	4b5e      	ldr	r3, [pc, #376]	; (8001404 <KnobRoutine+0x238>)
 800128c:	7a5b      	ldrb	r3, [r3, #9]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d103      	bne.n	800129a <KnobRoutine+0xce>
			Status.KonbRotated = 5;
 8001292:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <KnobRoutine+0x238>)
 8001294:	2205      	movs	r2, #5
 8001296:	73da      	strb	r2, [r3, #15]
 8001298:	e098      	b.n	80013cc <KnobRoutine+0x200>
		else if((Status.Edit_mode == SWAP))
 800129a:	4b5a      	ldr	r3, [pc, #360]	; (8001404 <KnobRoutine+0x238>)
 800129c:	7a5b      	ldrb	r3, [r3, #9]
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d103      	bne.n	80012aa <KnobRoutine+0xde>
			Status.KonbRotated = 13;
 80012a2:	4b58      	ldr	r3, [pc, #352]	; (8001404 <KnobRoutine+0x238>)
 80012a4:	220d      	movs	r2, #13
 80012a6:	73da      	strb	r2, [r3, #15]
 80012a8:	e090      	b.n	80013cc <KnobRoutine+0x200>
		else if((Status.Edit_mode == SNAP) || (Status.Edit_mode == SLIDE))
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <KnobRoutine+0x238>)
 80012ac:	7a5b      	ldrb	r3, [r3, #9]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d004      	beq.n	80012bc <KnobRoutine+0xf0>
 80012b2:	4b54      	ldr	r3, [pc, #336]	; (8001404 <KnobRoutine+0x238>)
 80012b4:	7a5b      	ldrb	r3, [r3, #9]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	f040 8088 	bne.w	80013cc <KnobRoutine+0x200>
			Status.KonbRotated = 9;
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <KnobRoutine+0x238>)
 80012be:	2209      	movs	r2, #9
 80012c0:	73da      	strb	r2, [r3, #15]
 80012c2:	e083      	b.n	80013cc <KnobRoutine+0x200>
	}
	/* Knob rotated left */
	else if(Status.KnobCounetr < -KNOB_DIV)
 80012c4:	4b4f      	ldr	r3, [pc, #316]	; (8001404 <KnobRoutine+0x238>)
 80012c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012ca:	f113 0f78 	cmn.w	r3, #120	; 0x78
 80012ce:	da6b      	bge.n	80013a8 <KnobRoutine+0x1dc>
	{
		Status.KnobDir = 0;
 80012d0:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <KnobRoutine+0x238>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	739a      	strb	r2, [r3, #14]
		htim2.Instance->CNT = 0;
 80012d6:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <KnobRoutine+0x234>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24

		LEDS_Toggle(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff ff34 	bl	800114c <LEDS_Toggle>
		KnobLED_counter = 0;
 80012e4:	4b48      	ldr	r3, [pc, #288]	; (8001408 <KnobRoutine+0x23c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]

		Status.Knob_Speed = Status.Knob_Speed_counter;
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <KnobRoutine+0x238>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b44      	ldr	r3, [pc, #272]	; (8001404 <KnobRoutine+0x238>)
 80012f2:	825a      	strh	r2, [r3, #18]
		Status.Knob_Speed_counter = 0;
 80012f4:	4b43      	ldr	r3, [pc, #268]	; (8001404 <KnobRoutine+0x238>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]

		if(Status.Edit_mode == NONE_MODE)
 80012fa:	4b42      	ldr	r3, [pc, #264]	; (8001404 <KnobRoutine+0x238>)
 80012fc:	7a5b      	ldrb	r3, [r3, #9]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d116      	bne.n	8001330 <KnobRoutine+0x164>
		{
			if(Status.Knob_Mode == JOG)
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <KnobRoutine+0x238>)
 8001304:	7c1b      	ldrb	r3, [r3, #16]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d103      	bne.n	8001312 <KnobRoutine+0x146>
				Status.KonbRotated = 1;
 800130a:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <KnobRoutine+0x238>)
 800130c:	2201      	movs	r2, #1
 800130e:	73da      	strb	r2, [r3, #15]
 8001310:	e05c      	b.n	80013cc <KnobRoutine+0x200>
			else if(Status.Knob_Mode == SCRL)
 8001312:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <KnobRoutine+0x238>)
 8001314:	7c1b      	ldrb	r3, [r3, #16]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d103      	bne.n	8001322 <KnobRoutine+0x156>
				Status.KonbRotated = 3;
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <KnobRoutine+0x238>)
 800131c:	2203      	movs	r2, #3
 800131e:	73da      	strb	r2, [r3, #15]
 8001320:	e054      	b.n	80013cc <KnobRoutine+0x200>
			else if(Status.Knob_Mode == SHTL)
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <KnobRoutine+0x238>)
 8001324:	7c1b      	ldrb	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d150      	bne.n	80013cc <KnobRoutine+0x200>
				Shuttle_mode_Routine();
 800132a:	f000 f873 	bl	8001414 <Shuttle_mode_Routine>
 800132e:	e04d      	b.n	80013cc <KnobRoutine+0x200>
		}
		else if((Status.Edit_mode == SLIP) || (Status.Edit_mode == SLIDE))
 8001330:	4b34      	ldr	r3, [pc, #208]	; (8001404 <KnobRoutine+0x238>)
 8001332:	7a5b      	ldrb	r3, [r3, #9]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d003      	beq.n	8001340 <KnobRoutine+0x174>
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <KnobRoutine+0x238>)
 800133a:	7a5b      	ldrb	r3, [r3, #9]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d10f      	bne.n	8001360 <KnobRoutine+0x194>
		{
			if(Status.Knob_Mode == JOG)
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <KnobRoutine+0x238>)
 8001342:	7c1b      	ldrb	r3, [r3, #16]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d103      	bne.n	8001350 <KnobRoutine+0x184>
				Status.KonbRotated = 11;
 8001348:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <KnobRoutine+0x238>)
 800134a:	220b      	movs	r2, #11
 800134c:	73da      	strb	r2, [r3, #15]
			if(Status.Knob_Mode == JOG)
 800134e:	e03c      	b.n	80013ca <KnobRoutine+0x1fe>
			else if(Status.Knob_Mode == SCRL)
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <KnobRoutine+0x238>)
 8001352:	7c1b      	ldrb	r3, [r3, #16]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d138      	bne.n	80013ca <KnobRoutine+0x1fe>
				Status.KonbRotated = 15;
 8001358:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <KnobRoutine+0x238>)
 800135a:	220f      	movs	r2, #15
 800135c:	73da      	strb	r2, [r3, #15]
			if(Status.Knob_Mode == JOG)
 800135e:	e034      	b.n	80013ca <KnobRoutine+0x1fe>
		}
		else if((Status.Edit_mode == ZOOM))
 8001360:	4b28      	ldr	r3, [pc, #160]	; (8001404 <KnobRoutine+0x238>)
 8001362:	7a5b      	ldrb	r3, [r3, #9]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d103      	bne.n	8001370 <KnobRoutine+0x1a4>
			Status.KonbRotated = 7;
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <KnobRoutine+0x238>)
 800136a:	2207      	movs	r2, #7
 800136c:	73da      	strb	r2, [r3, #15]
 800136e:	e02d      	b.n	80013cc <KnobRoutine+0x200>
		else if((Status.Edit_mode == AUDIO))
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <KnobRoutine+0x238>)
 8001372:	7a5b      	ldrb	r3, [r3, #9]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d103      	bne.n	8001380 <KnobRoutine+0x1b4>
			Status.KonbRotated = 5;
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <KnobRoutine+0x238>)
 800137a:	2205      	movs	r2, #5
 800137c:	73da      	strb	r2, [r3, #15]
 800137e:	e025      	b.n	80013cc <KnobRoutine+0x200>
		else if((Status.Edit_mode == SWAP))
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <KnobRoutine+0x238>)
 8001382:	7a5b      	ldrb	r3, [r3, #9]
 8001384:	2b06      	cmp	r3, #6
 8001386:	d103      	bne.n	8001390 <KnobRoutine+0x1c4>
			Status.KonbRotated = 13;
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <KnobRoutine+0x238>)
 800138a:	220d      	movs	r2, #13
 800138c:	73da      	strb	r2, [r3, #15]
 800138e:	e01d      	b.n	80013cc <KnobRoutine+0x200>
		else if((Status.Edit_mode == SNAP) || (Status.Edit_mode == SLIDE))
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <KnobRoutine+0x238>)
 8001392:	7a5b      	ldrb	r3, [r3, #9]
 8001394:	2b05      	cmp	r3, #5
 8001396:	d003      	beq.n	80013a0 <KnobRoutine+0x1d4>
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <KnobRoutine+0x238>)
 800139a:	7a5b      	ldrb	r3, [r3, #9]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d115      	bne.n	80013cc <KnobRoutine+0x200>
			Status.KonbRotated = 9;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <KnobRoutine+0x238>)
 80013a2:	2209      	movs	r2, #9
 80013a4:	73da      	strb	r2, [r3, #15]
 80013a6:	e011      	b.n	80013cc <KnobRoutine+0x200>
	}
	else
	{
		if(KnobLED_counter < 40)
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <KnobRoutine+0x23c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b27      	cmp	r3, #39	; 0x27
 80013ae:	d806      	bhi.n	80013be <KnobRoutine+0x1f2>
			KnobLED_counter++;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <KnobRoutine+0x23c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <KnobRoutine+0x23c>)
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e006      	b.n	80013cc <KnobRoutine+0x200>
		else
			LEDS_Toggle(0);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fec4 	bl	800114c <LEDS_Toggle>
 80013c4:	e002      	b.n	80013cc <KnobRoutine+0x200>
			if(Status.Knob_Mode == JOG)
 80013c6:	bf00      	nop
 80013c8:	e000      	b.n	80013cc <KnobRoutine+0x200>
			if(Status.Knob_Mode == JOG)
 80013ca:	bf00      	nop

	}

	if(Status.KonbRotated)
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <KnobRoutine+0x238>)
 80013ce:	7bdb      	ldrb	r3, [r3, #15]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <KnobRoutine+0x230>
	{
		HID_Status.buff[0] = KnobMacro[Status.KonbRotated + Status.KnobDir];
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <KnobRoutine+0x238>)
 80013d6:	7bdb      	ldrb	r3, [r3, #15]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <KnobRoutine+0x238>)
 80013dc:	7b9b      	ldrb	r3, [r3, #14]
 80013de:	4413      	add	r3, r2
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <KnobRoutine+0x240>)
 80013e2:	490b      	ldr	r1, [pc, #44]	; (8001410 <KnobRoutine+0x244>)
 80013e4:	3201      	adds	r2, #1
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	cb03      	ldmia	r3!, {r0, r1}
 80013ec:	6010      	str	r0, [r2, #0]
 80013ee:	6051      	str	r1, [r2, #4]

		HID_Status.buff_ready = SET;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <KnobRoutine+0x240>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]

		Status.KonbRotated = 0;
 80013f6:	4b03      	ldr	r3, [pc, #12]	; (8001404 <KnobRoutine+0x238>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	73da      	strb	r2, [r3, #15]
	}
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200004ec 	.word	0x200004ec
 8001404:	200004a8 	.word	0x200004a8
 8001408:	200004a5 	.word	0x200004a5
 800140c:	200004d0 	.word	0x200004d0
 8001410:	20000170 	.word	0x20000170

08001414 <Shuttle_mode_Routine>:

void Shuttle_mode_Routine(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	if(Status.KnobDir == 1) /* Right */
 8001418:	4b8f      	ldr	r3, [pc, #572]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800141a:	7b9b      	ldrb	r3, [r3, #14]
 800141c:	2b01      	cmp	r3, #1
 800141e:	f040 8089 	bne.w	8001534 <Shuttle_mode_Routine+0x120>
	{
		switch(Status.Shuttle_mode)
 8001422:	4b8d      	ldr	r3, [pc, #564]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001424:	7e9b      	ldrb	r3, [r3, #26]
 8001426:	2b0e      	cmp	r3, #14
 8001428:	f200 8111 	bhi.w	800164e <Shuttle_mode_Routine+0x23a>
 800142c:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <Shuttle_mode_Routine+0x20>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001471 	.word	0x08001471
 8001438:	0800147f 	.word	0x0800147f
 800143c:	0800148d 	.word	0x0800148d
 8001440:	0800149b 	.word	0x0800149b
 8001444:	080014a9 	.word	0x080014a9
 8001448:	080014b7 	.word	0x080014b7
 800144c:	080014c5 	.word	0x080014c5
 8001450:	0800164f 	.word	0x0800164f
 8001454:	080014d3 	.word	0x080014d3
 8001458:	080014e1 	.word	0x080014e1
 800145c:	080014ef 	.word	0x080014ef
 8001460:	080014fd 	.word	0x080014fd
 8001464:	0800150b 	.word	0x0800150b
 8001468:	08001519 	.word	0x08001519
 800146c:	08001527 	.word	0x08001527
		{
			case SHTL_STOP:
				Status.Shuttle_mode = FORW_1;
 8001470:	4b79      	ldr	r3, [pc, #484]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001472:	2201      	movs	r2, #1
 8001474:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 8001476:	4b78      	ldr	r3, [pc, #480]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001478:	2211      	movs	r2, #17
 800147a:	73da      	strb	r2, [r3, #15]
			break;
 800147c:	e0e7      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_1:
				Status.Shuttle_mode = FORW_2;
 800147e:	4b76      	ldr	r3, [pc, #472]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001480:	2202      	movs	r2, #2
 8001482:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 8001484:	4b74      	ldr	r3, [pc, #464]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001486:	2211      	movs	r2, #17
 8001488:	73da      	strb	r2, [r3, #15]
			break;
 800148a:	e0e0      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_2:
				Status.Shuttle_mode = FORW_4;
 800148c:	4b72      	ldr	r3, [pc, #456]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800148e:	2203      	movs	r2, #3
 8001490:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 8001492:	4b71      	ldr	r3, [pc, #452]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001494:	2211      	movs	r2, #17
 8001496:	73da      	strb	r2, [r3, #15]
			break;
 8001498:	e0d9      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_4:
				Status.Shuttle_mode = FORW_8;
 800149a:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800149c:	2204      	movs	r2, #4
 800149e:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 80014a0:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014a2:	2211      	movs	r2, #17
 80014a4:	73da      	strb	r2, [r3, #15]
			break;
 80014a6:	e0d2      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_8:
				Status.Shuttle_mode = FORW_16;
 80014a8:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014aa:	2205      	movs	r2, #5
 80014ac:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014b0:	2211      	movs	r2, #17
 80014b2:	73da      	strb	r2, [r3, #15]
			break;
 80014b4:	e0cb      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_16:
				Status.Shuttle_mode = FORW_32;
 80014b6:	4b68      	ldr	r3, [pc, #416]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014b8:	2206      	movs	r2, #6
 80014ba:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 80014bc:	4b66      	ldr	r3, [pc, #408]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014be:	2211      	movs	r2, #17
 80014c0:	73da      	strb	r2, [r3, #15]
			break;
 80014c2:	e0c4      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_32:
				Status.Shuttle_mode = FORW_64;
 80014c4:	4b64      	ldr	r3, [pc, #400]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014c6:	2207      	movs	r2, #7
 80014c8:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014cc:	2211      	movs	r2, #17
 80014ce:	73da      	strb	r2, [r3, #15]
			break;
 80014d0:	e0bd      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_1:
				Status.Shuttle_mode = SHTL_STOP;
 80014d2:	4b61      	ldr	r3, [pc, #388]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 14;
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014da:	220e      	movs	r2, #14
 80014dc:	73da      	strb	r2, [r3, #15]
			break;
 80014de:	e0b6      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_2:
				Status.Shuttle_mode = REW_1;
 80014e0:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014e2:	2208      	movs	r2, #8
 80014e4:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 19;
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014e8:	2213      	movs	r2, #19
 80014ea:	73da      	strb	r2, [r3, #15]
			break;
 80014ec:	e0af      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_4:
				Status.Shuttle_mode = REW_2;
 80014ee:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014f0:	2209      	movs	r2, #9
 80014f2:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 19;
 80014f4:	4b58      	ldr	r3, [pc, #352]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014f6:	2213      	movs	r2, #19
 80014f8:	73da      	strb	r2, [r3, #15]
			break;
 80014fa:	e0a8      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_8:
				Status.Shuttle_mode = REW_4;
 80014fc:	4b56      	ldr	r3, [pc, #344]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80014fe:	220a      	movs	r2, #10
 8001500:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 19;
 8001502:	4b55      	ldr	r3, [pc, #340]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001504:	2213      	movs	r2, #19
 8001506:	73da      	strb	r2, [r3, #15]
			break;
 8001508:	e0a1      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_16:
				Status.Shuttle_mode = REW_8;
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800150c:	220b      	movs	r2, #11
 800150e:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 19;
 8001510:	4b51      	ldr	r3, [pc, #324]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001512:	2213      	movs	r2, #19
 8001514:	73da      	strb	r2, [r3, #15]
			break;
 8001516:	e09a      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_32:
				Status.Shuttle_mode = REW_16;
 8001518:	4b4f      	ldr	r3, [pc, #316]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800151a:	220c      	movs	r2, #12
 800151c:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 19;
 800151e:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001520:	2213      	movs	r2, #19
 8001522:	73da      	strb	r2, [r3, #15]
			break;
 8001524:	e093      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_64:
				Status.Shuttle_mode = REW_32;
 8001526:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001528:	220d      	movs	r2, #13
 800152a:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 19;
 800152c:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800152e:	2213      	movs	r2, #19
 8001530:	73da      	strb	r2, [r3, #15]
			break;
 8001532:	e08c      	b.n	800164e <Shuttle_mode_Routine+0x23a>
		}
	}
	else if(Status.KnobDir == 0) /* Left */
 8001534:	4b48      	ldr	r3, [pc, #288]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001536:	7b9b      	ldrb	r3, [r3, #14]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f040 8087 	bne.w	800164c <Shuttle_mode_Routine+0x238>
	{
		switch(Status.Shuttle_mode)
 800153e:	4b46      	ldr	r3, [pc, #280]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001540:	7e9b      	ldrb	r3, [r3, #26]
 8001542:	2b0d      	cmp	r3, #13
 8001544:	f200 8083 	bhi.w	800164e <Shuttle_mode_Routine+0x23a>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <Shuttle_mode_Routine+0x13c>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001589 	.word	0x08001589
 8001554:	080015eb 	.word	0x080015eb
 8001558:	080015f9 	.word	0x080015f9
 800155c:	08001607 	.word	0x08001607
 8001560:	08001615 	.word	0x08001615
 8001564:	08001623 	.word	0x08001623
 8001568:	08001631 	.word	0x08001631
 800156c:	0800163f 	.word	0x0800163f
 8001570:	08001597 	.word	0x08001597
 8001574:	080015a5 	.word	0x080015a5
 8001578:	080015b3 	.word	0x080015b3
 800157c:	080015c1 	.word	0x080015c1
 8001580:	080015cf 	.word	0x080015cf
 8001584:	080015dd 	.word	0x080015dd
		{
			case SHTL_STOP:
				Status.Shuttle_mode = REW_1;
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800158a:	2208      	movs	r2, #8
 800158c:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 800158e:	4b32      	ldr	r3, [pc, #200]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001590:	2211      	movs	r2, #17
 8001592:	73da      	strb	r2, [r3, #15]
			break;
 8001594:	e05b      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_1:
				Status.Shuttle_mode = REW_2;
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001598:	2209      	movs	r2, #9
 800159a:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 800159c:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800159e:	2211      	movs	r2, #17
 80015a0:	73da      	strb	r2, [r3, #15]
			break;
 80015a2:	e054      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_2:
				Status.Shuttle_mode = REW_4;
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015a6:	220a      	movs	r2, #10
 80015a8:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 80015aa:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015ac:	2211      	movs	r2, #17
 80015ae:	73da      	strb	r2, [r3, #15]
			break;
 80015b0:	e04d      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_4:
				Status.Shuttle_mode = REW_8;
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015b4:	220b      	movs	r2, #11
 80015b6:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015ba:	2211      	movs	r2, #17
 80015bc:	73da      	strb	r2, [r3, #15]
			break;
 80015be:	e046      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_8:
				Status.Shuttle_mode = REW_16;
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015c8:	2211      	movs	r2, #17
 80015ca:	73da      	strb	r2, [r3, #15]
			break;
 80015cc:	e03f      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_16:
				Status.Shuttle_mode = REW_32;
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015d0:	220d      	movs	r2, #13
 80015d2:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015d6:	2211      	movs	r2, #17
 80015d8:	73da      	strb	r2, [r3, #15]
			break;
 80015da:	e038      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case REW_32:
				Status.Shuttle_mode = REW_64;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015de:	220e      	movs	r2, #14
 80015e0:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 17;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015e4:	2211      	movs	r2, #17
 80015e6:	73da      	strb	r2, [r3, #15]
			break;
 80015e8:	e031      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_1:
				Status.Shuttle_mode = SHTL_STOP;
 80015ea:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 19;
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015f2:	2213      	movs	r2, #19
 80015f4:	73da      	strb	r2, [r3, #15]
			break;
 80015f6:	e02a      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_2:
				Status.Shuttle_mode = FORW_1;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <Shuttle_mode_Routine+0x244>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 20;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001600:	2214      	movs	r2, #20
 8001602:	73da      	strb	r2, [r3, #15]
			break;
 8001604:	e023      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_4:
				Status.Shuttle_mode = FORW_2;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001608:	2202      	movs	r2, #2
 800160a:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 20;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800160e:	2214      	movs	r2, #20
 8001610:	73da      	strb	r2, [r3, #15]
			break;
 8001612:	e01c      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_8:
				Status.Shuttle_mode = FORW_4;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001616:	2203      	movs	r2, #3
 8001618:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 20;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800161c:	2214      	movs	r2, #20
 800161e:	73da      	strb	r2, [r3, #15]
			break;
 8001620:	e015      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_16:
				Status.Shuttle_mode = FORW_8;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001624:	2204      	movs	r2, #4
 8001626:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 20;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <Shuttle_mode_Routine+0x244>)
 800162a:	2214      	movs	r2, #20
 800162c:	73da      	strb	r2, [r3, #15]
			break;
 800162e:	e00e      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_32:
				Status.Shuttle_mode = FORW_16;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001632:	2205      	movs	r2, #5
 8001634:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 20;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001638:	2214      	movs	r2, #20
 800163a:	73da      	strb	r2, [r3, #15]
			break;
 800163c:	e007      	b.n	800164e <Shuttle_mode_Routine+0x23a>
			case FORW_64:
				Status.Shuttle_mode = FORW_32;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001640:	2206      	movs	r2, #6
 8001642:	769a      	strb	r2, [r3, #26]
				Status.KonbRotated = 20;
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <Shuttle_mode_Routine+0x244>)
 8001646:	2214      	movs	r2, #20
 8001648:	73da      	strb	r2, [r3, #15]
			break;
 800164a:	e000      	b.n	800164e <Shuttle_mode_Routine+0x23a>
		}
	}
 800164c:	bf00      	nop
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	200004a8 	.word	0x200004a8

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f000 fdc5 	bl	80021ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 f888 	bl	8001778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f7fe ff0c 	bl	8000484 <MX_GPIO_Init>
  MX_TIM10_Init();
 800166c:	f000 fc2c 	bl	8001ec8 <MX_TIM10_Init>
  MX_TIM2_Init();
 8001670:	f000 fb6a 	bl	8001d48 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001674:	f7fe fffc 	bl	8000670 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001678:	f7ff f828 	bl	80006cc <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 800167c:	f008 fdb8 	bl	800a1f0 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8001680:	f000 fbec 	bl	8001e5c <MX_TIM7_Init>
  MX_TIM6_Init();
 8001684:	f000 fbb4 	bl	8001df0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001688:	f000 fd16 	bl	80020b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 800168c:	4830      	ldr	r0, [pc, #192]	; (8001750 <main+0xf4>)
 800168e:	f003 fce1 	bl	8005054 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001692:	213c      	movs	r1, #60	; 0x3c
 8001694:	482f      	ldr	r0, [pc, #188]	; (8001754 <main+0xf8>)
 8001696:	f003 fdf3 	bl	8005280 <HAL_TIM_Encoder_Start>

  /* Wait for Nextion display buffer */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)Status.NextionRX_buff, 3);
 800169a:	2203      	movs	r2, #3
 800169c:	492e      	ldr	r1, [pc, #184]	; (8001758 <main+0xfc>)
 800169e:	482f      	ldr	r0, [pc, #188]	; (800175c <main+0x100>)
 80016a0:	f004 f9e3 	bl	8005a6a <HAL_UART_Receive_IT>
  /* Set the required Encoder resolution and save it. It is enough to call this function only once. */
  //SetResolution(0x07); //1024 ticks per rotation
  //BurnSettings();

  /* Default state */
  HAL_GPIO_WritePin(LEDS_A_GPIO_Port, LEDS_A_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016aa:	482d      	ldr	r0, [pc, #180]	; (8001760 <main+0x104>)
 80016ac:	f001 f953 	bl	8002956 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDS_B_GPIO_Port, LEDS_B_Pin, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b6:	482a      	ldr	r0, [pc, #168]	; (8001760 <main+0x104>)
 80016b8:	f001 f94d 	bl	8002956 <HAL_GPIO_WritePin>

  Status.NumOfKeys = 1;
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <main+0x108>)
 80016be:	2201      	movs	r2, #1
 80016c0:	721a      	strb	r2, [r3, #8]
  Status.Knob_Mode = JOG;
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <main+0x108>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	741a      	strb	r2, [r3, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Routines are triggered every 1 ms. */
	  if(Status.Flags.FLAG_1MS)
 80016c8:	4b26      	ldr	r3, [pc, #152]	; (8001764 <main+0x108>)
 80016ca:	7e1b      	ldrb	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00a      	beq.n	80016e6 <main+0x8a>
	  {
		  Status.Flags.FLAG_1MS = RESET;
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <main+0x108>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	761a      	strb	r2, [r3, #24]

		  KnobRoutine();
 80016d6:	f7ff fd79 	bl	80011cc <KnobRoutine>
		  HID_Buf_Routine();
 80016da:	f7ff fc0f 	bl	8000efc <HID_Buf_Routine>
		  LED_Routine();
 80016de:	f000 f9d9 	bl	8001a94 <LED_Routine>
		  LongPress_Routine();
 80016e2:	f000 f895 	bl	8001810 <LongPress_Routine>
	  }

	  /* Send report - USB */
	  if(HID_Status.buff_ready == SET)
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <main+0x10c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d1ec      	bne.n	80016c8 <main+0x6c>
	  {
		  for(i = 0; i < Status.NumOfKeys; i++)
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <main+0x110>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e01f      	b.n	8001736 <main+0xda>
		  {
			  USBD_HID_SendReport(&hUsbDeviceFS, &HID_Status.buff[i], sizeof(HID_Status.buff[i])); //Press the appropriate key
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <main+0x110>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <main+0x10c>)
 80016fe:	4413      	add	r3, r2
 8001700:	3301      	adds	r3, #1
 8001702:	2208      	movs	r2, #8
 8001704:	4619      	mov	r1, r3
 8001706:	481a      	ldr	r0, [pc, #104]	; (8001770 <main+0x114>)
 8001708:	f007 fcf6 	bl	80090f8 <USBD_HID_SendReport>
			  HAL_Delay(20);
 800170c:	2014      	movs	r0, #20
 800170e:	f000 fddd 	bl	80022cc <HAL_Delay>
			  USBD_HID_SendReport(&hUsbDeviceFS, &KeyMacro[0], sizeof(KeyMacro[0])); //After 20ms release all keys
 8001712:	2208      	movs	r2, #8
 8001714:	4917      	ldr	r1, [pc, #92]	; (8001774 <main+0x118>)
 8001716:	4816      	ldr	r0, [pc, #88]	; (8001770 <main+0x114>)
 8001718:	f007 fcee 	bl	80090f8 <USBD_HID_SendReport>

			  /* If you are using a macro and you need more than one key (one after the other) */
			  if(Status.NumOfKeys > 1)
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <main+0x108>)
 800171e:	7a1b      	ldrb	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d902      	bls.n	800172a <main+0xce>
				  HAL_Delay(100);
 8001724:	2064      	movs	r0, #100	; 0x64
 8001726:	f000 fdd1 	bl	80022cc <HAL_Delay>
		  for(i = 0; i < Status.NumOfKeys; i++)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <main+0x110>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <main+0x110>)
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <main+0x108>)
 8001738:	7a1a      	ldrb	r2, [r3, #8]
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <main+0x110>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d8d9      	bhi.n	80016f6 <main+0x9a>
		  }

		  Status.NumOfKeys = 1;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <main+0x108>)
 8001744:	2201      	movs	r2, #1
 8001746:	721a      	strb	r2, [r3, #8]
		  HID_Status.buff_ready = RESET;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <main+0x10c>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
	  if(Status.Flags.FLAG_1MS)
 800174e:	e7bb      	b.n	80016c8 <main+0x6c>
 8001750:	2000052c 	.word	0x2000052c
 8001754:	200004ec 	.word	0x200004ec
 8001758:	200004c9 	.word	0x200004c9
 800175c:	200005ec 	.word	0x200005ec
 8001760:	40020800 	.word	0x40020800
 8001764:	200004a8 	.word	0x200004a8
 8001768:	200004d0 	.word	0x200004d0
 800176c:	200004e9 	.word	0x200004e9
 8001770:	20000638 	.word	0x20000638
 8001774:	20000000 	.word	0x20000000

08001778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b092      	sub	sp, #72	; 0x48
 800177c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	2234      	movs	r2, #52	; 0x34
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f009 f92c 	bl	800a9e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <SystemClock_Config+0x94>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80017a2:	4a1a      	ldr	r2, [pc, #104]	; (800180c <SystemClock_Config+0x94>)
 80017a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017a8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017aa:	2301      	movs	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b2:	2302      	movs	r3, #2
 80017b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80017bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80017c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80017c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 fe4d 	bl	800446c <HAL_RCC_OscConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80017d8:	f000 f9c0 	bl	8001b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
 80017de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e0:	2303      	movs	r3, #3
 80017e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	2101      	movs	r1, #1
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 f969 	bl	8004acc <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001800:	f000 f9ac 	bl	8001b5c <Error_Handler>
  }
}
 8001804:	bf00      	nop
 8001806:	3748      	adds	r7, #72	; 0x48
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40007000 	.word	0x40007000

08001810 <LongPress_Routine>:

/* USER CODE BEGIN 4 */

/* After pressing a key and turning the knob */
void LongPress_Routine(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	if(Status.Pressed_Key == 19)
 8001814:	4b9c      	ldr	r3, [pc, #624]	; (8001a88 <LongPress_Routine+0x278>)
 8001816:	79db      	ldrb	r3, [r3, #7]
 8001818:	2b13      	cmp	r3, #19
 800181a:	d103      	bne.n	8001824 <LongPress_Routine+0x14>
		Status.Edit_mode = ZOOM;
 800181c:	4b9a      	ldr	r3, [pc, #616]	; (8001a88 <LongPress_Routine+0x278>)
 800181e:	2204      	movs	r2, #4
 8001820:	725a      	strb	r2, [r3, #9]
		}
		else if(Status.LP_Key_state.KEY_SLIDE == KEY_JUST_RELEASED)
			Status.LP_Key_state.KEY_SLIDE = KEY_IDLE;
	}

}
 8001822:	e12c      	b.n	8001a7e <LongPress_Routine+0x26e>
	else if(Status.Pressed_Key == 12) //SLIP
 8001824:	4b98      	ldr	r3, [pc, #608]	; (8001a88 <LongPress_Routine+0x278>)
 8001826:	79db      	ldrb	r3, [r3, #7]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d126      	bne.n	800187a <LongPress_Routine+0x6a>
		Status.Edit_mode = SLIP;
 800182c:	4b96      	ldr	r3, [pc, #600]	; (8001a88 <LongPress_Routine+0x278>)
 800182e:	2201      	movs	r2, #1
 8001830:	725a      	strb	r2, [r3, #9]
		if(Status.LP_Key_state.KEY_SLIP == KEY_IDLE)
 8001832:	4b95      	ldr	r3, [pc, #596]	; (8001a88 <LongPress_Routine+0x278>)
 8001834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d113      	bne.n	8001864 <LongPress_Routine+0x54>
			Status.LP_Key_state.KEY_SLIP = KEY_JUST_PRESSED;
 800183c:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <LongPress_Routine+0x278>)
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2020 	strb.w	r2, [r3, #32]
			HID_Status.buff[0] = KeyMacro[Status.Pressed_Key];
 8001844:	4b90      	ldr	r3, [pc, #576]	; (8001a88 <LongPress_Routine+0x278>)
 8001846:	79db      	ldrb	r3, [r3, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	4b90      	ldr	r3, [pc, #576]	; (8001a8c <LongPress_Routine+0x27c>)
 800184c:	4990      	ldr	r1, [pc, #576]	; (8001a90 <LongPress_Routine+0x280>)
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	00c3      	lsls	r3, r0, #3
 8001852:	440b      	add	r3, r1
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	6011      	str	r1, [r2, #0]
 800185a:	6053      	str	r3, [r2, #4]
			HID_Status.buff_ready = SET;
 800185c:	4b8b      	ldr	r3, [pc, #556]	; (8001a8c <LongPress_Routine+0x27c>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
}
 8001862:	e10c      	b.n	8001a7e <LongPress_Routine+0x26e>
		else if(Status.LP_Key_state.KEY_SLIP == KEY_JUST_PRESSED)
 8001864:	4b88      	ldr	r3, [pc, #544]	; (8001a88 <LongPress_Routine+0x278>)
 8001866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186a:	2b01      	cmp	r3, #1
 800186c:	f040 8107 	bne.w	8001a7e <LongPress_Routine+0x26e>
			Status.LP_Key_state.KEY_SLIP = KEY_PRESSED;
 8001870:	4b85      	ldr	r3, [pc, #532]	; (8001a88 <LongPress_Routine+0x278>)
 8001872:	2202      	movs	r2, #2
 8001874:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001878:	e101      	b.n	8001a7e <LongPress_Routine+0x26e>
	else if(Status.Pressed_Key == 13) //SLIDE
 800187a:	4b83      	ldr	r3, [pc, #524]	; (8001a88 <LongPress_Routine+0x278>)
 800187c:	79db      	ldrb	r3, [r3, #7]
 800187e:	2b0d      	cmp	r3, #13
 8001880:	d122      	bne.n	80018c8 <LongPress_Routine+0xb8>
		Status.Edit_mode = SLIDE;
 8001882:	4b81      	ldr	r3, [pc, #516]	; (8001a88 <LongPress_Routine+0x278>)
 8001884:	2202      	movs	r2, #2
 8001886:	725a      	strb	r2, [r3, #9]
		if(Status.LP_Key_state.KEY_SLIDE == KEY_IDLE)
 8001888:	4b7f      	ldr	r3, [pc, #508]	; (8001a88 <LongPress_Routine+0x278>)
 800188a:	7fdb      	ldrb	r3, [r3, #31]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d112      	bne.n	80018b6 <LongPress_Routine+0xa6>
			Status.LP_Key_state.KEY_SLIDE = KEY_JUST_PRESSED;
 8001890:	4b7d      	ldr	r3, [pc, #500]	; (8001a88 <LongPress_Routine+0x278>)
 8001892:	2201      	movs	r2, #1
 8001894:	77da      	strb	r2, [r3, #31]
			HID_Status.buff[0] = KeyMacro[Status.Pressed_Key];
 8001896:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <LongPress_Routine+0x278>)
 8001898:	79db      	ldrb	r3, [r3, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	4b7b      	ldr	r3, [pc, #492]	; (8001a8c <LongPress_Routine+0x27c>)
 800189e:	497c      	ldr	r1, [pc, #496]	; (8001a90 <LongPress_Routine+0x280>)
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	00c3      	lsls	r3, r0, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	6011      	str	r1, [r2, #0]
 80018ac:	6053      	str	r3, [r2, #4]
			HID_Status.buff_ready = SET;
 80018ae:	4b77      	ldr	r3, [pc, #476]	; (8001a8c <LongPress_Routine+0x27c>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
}
 80018b4:	e0e3      	b.n	8001a7e <LongPress_Routine+0x26e>
		else if(Status.LP_Key_state.KEY_SLIDE == KEY_JUST_PRESSED)
 80018b6:	4b74      	ldr	r3, [pc, #464]	; (8001a88 <LongPress_Routine+0x278>)
 80018b8:	7fdb      	ldrb	r3, [r3, #31]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	f040 80df 	bne.w	8001a7e <LongPress_Routine+0x26e>
			Status.LP_Key_state.KEY_SLIDE = KEY_PRESSED;
 80018c0:	4b71      	ldr	r3, [pc, #452]	; (8001a88 <LongPress_Routine+0x278>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	77da      	strb	r2, [r3, #31]
}
 80018c6:	e0da      	b.n	8001a7e <LongPress_Routine+0x26e>
	else if(Status.Pressed_Key == 32) //Audio level
 80018c8:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <LongPress_Routine+0x278>)
 80018ca:	79db      	ldrb	r3, [r3, #7]
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d11f      	bne.n	8001910 <LongPress_Routine+0x100>
		Status.Edit_mode = AUDIO;
 80018d0:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <LongPress_Routine+0x278>)
 80018d2:	2203      	movs	r2, #3
 80018d4:	725a      	strb	r2, [r3, #9]
		if(Status.LP_Key_state.KEY_AUDIO == KEY_IDLE)
 80018d6:	4b6c      	ldr	r3, [pc, #432]	; (8001a88 <LongPress_Routine+0x278>)
 80018d8:	7f9b      	ldrb	r3, [r3, #30]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <LongPress_Routine+0xee>
			Status.LP_Key_state.KEY_AUDIO = KEY_JUST_PRESSED;
 80018de:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <LongPress_Routine+0x278>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	779a      	strb	r2, [r3, #30]
			HID_Status.buff[0] = KeyMacro[40]; //Select clip
 80018e4:	4b69      	ldr	r3, [pc, #420]	; (8001a8c <LongPress_Routine+0x27c>)
 80018e6:	4a6a      	ldr	r2, [pc, #424]	; (8001a90 <LongPress_Routine+0x280>)
 80018e8:	3301      	adds	r3, #1
 80018ea:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80018ee:	6811      	ldr	r1, [r2, #0]
 80018f0:	6852      	ldr	r2, [r2, #4]
 80018f2:	6019      	str	r1, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
			HID_Status.buff_ready = SET;
 80018f6:	4b65      	ldr	r3, [pc, #404]	; (8001a8c <LongPress_Routine+0x27c>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
}
 80018fc:	e0bf      	b.n	8001a7e <LongPress_Routine+0x26e>
		else if(Status.LP_Key_state.KEY_AUDIO == KEY_JUST_PRESSED)
 80018fe:	4b62      	ldr	r3, [pc, #392]	; (8001a88 <LongPress_Routine+0x278>)
 8001900:	7f9b      	ldrb	r3, [r3, #30]
 8001902:	2b01      	cmp	r3, #1
 8001904:	f040 80bb 	bne.w	8001a7e <LongPress_Routine+0x26e>
			Status.LP_Key_state.KEY_AUDIO = KEY_PRESSED;
 8001908:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <LongPress_Routine+0x278>)
 800190a:	2202      	movs	r2, #2
 800190c:	779a      	strb	r2, [r3, #30]
}
 800190e:	e0b6      	b.n	8001a7e <LongPress_Routine+0x26e>
	else if(Status.Pressed_Key == 24)
 8001910:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <LongPress_Routine+0x278>)
 8001912:	79db      	ldrb	r3, [r3, #7]
 8001914:	2b18      	cmp	r3, #24
 8001916:	d11f      	bne.n	8001958 <LongPress_Routine+0x148>
		Status.Edit_mode = SWAP;
 8001918:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <LongPress_Routine+0x278>)
 800191a:	2206      	movs	r2, #6
 800191c:	725a      	strb	r2, [r3, #9]
		if(Status.LP_Key_state.KEY_SWAP == KEY_IDLE)
 800191e:	4b5a      	ldr	r3, [pc, #360]	; (8001a88 <LongPress_Routine+0x278>)
 8001920:	7f5b      	ldrb	r3, [r3, #29]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <LongPress_Routine+0x136>
			Status.LP_Key_state.KEY_SWAP = KEY_JUST_PRESSED;
 8001926:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <LongPress_Routine+0x278>)
 8001928:	2201      	movs	r2, #1
 800192a:	775a      	strb	r2, [r3, #29]
			HID_Status.buff[0] = KeyMacro[40]; //Select clip
 800192c:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <LongPress_Routine+0x27c>)
 800192e:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <LongPress_Routine+0x280>)
 8001930:	3301      	adds	r3, #1
 8001932:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8001936:	6811      	ldr	r1, [r2, #0]
 8001938:	6852      	ldr	r2, [r2, #4]
 800193a:	6019      	str	r1, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
			HID_Status.buff_ready = SET;
 800193e:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <LongPress_Routine+0x27c>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
}
 8001944:	e09b      	b.n	8001a7e <LongPress_Routine+0x26e>
		else if(Status.LP_Key_state.KEY_SWAP == KEY_JUST_PRESSED)
 8001946:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <LongPress_Routine+0x278>)
 8001948:	7f5b      	ldrb	r3, [r3, #29]
 800194a:	2b01      	cmp	r3, #1
 800194c:	f040 8097 	bne.w	8001a7e <LongPress_Routine+0x26e>
			Status.LP_Key_state.KEY_SWAP = KEY_PRESSED;
 8001950:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <LongPress_Routine+0x278>)
 8001952:	2202      	movs	r2, #2
 8001954:	775a      	strb	r2, [r3, #29]
}
 8001956:	e092      	b.n	8001a7e <LongPress_Routine+0x26e>
	else if(Status.Pressed_Key == 20)
 8001958:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <LongPress_Routine+0x278>)
 800195a:	79db      	ldrb	r3, [r3, #7]
 800195c:	2b14      	cmp	r3, #20
 800195e:	d103      	bne.n	8001968 <LongPress_Routine+0x158>
		Status.Edit_mode = SNAP;
 8001960:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <LongPress_Routine+0x278>)
 8001962:	2205      	movs	r2, #5
 8001964:	725a      	strb	r2, [r3, #9]
}
 8001966:	e08a      	b.n	8001a7e <LongPress_Routine+0x26e>
		Status.Edit_mode = NONE_MODE;
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <LongPress_Routine+0x278>)
 800196a:	2200      	movs	r2, #0
 800196c:	725a      	strb	r2, [r3, #9]
		if(Status.LP_Key_state.KEY_SWAP == KEY_PRESSED)
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <LongPress_Routine+0x278>)
 8001970:	7f5b      	ldrb	r3, [r3, #29]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d10f      	bne.n	8001996 <LongPress_Routine+0x186>
			Status.LP_Key_state.KEY_SWAP = KEY_JUST_RELEASED;
 8001976:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <LongPress_Routine+0x278>)
 8001978:	2203      	movs	r2, #3
 800197a:	775a      	strb	r2, [r3, #29]
			HID_Status.buff[0] = KeyMacro[35]; //Deselect clip
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <LongPress_Routine+0x27c>)
 800197e:	4a44      	ldr	r2, [pc, #272]	; (8001a90 <LongPress_Routine+0x280>)
 8001980:	3301      	adds	r3, #1
 8001982:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8001986:	6811      	ldr	r1, [r2, #0]
 8001988:	6852      	ldr	r2, [r2, #4]
 800198a:	6019      	str	r1, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
			HID_Status.buff_ready = SET;
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <LongPress_Routine+0x27c>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e006      	b.n	80019a4 <LongPress_Routine+0x194>
		else if(Status.LP_Key_state.KEY_SWAP == KEY_JUST_RELEASED)
 8001996:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <LongPress_Routine+0x278>)
 8001998:	7f5b      	ldrb	r3, [r3, #29]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d102      	bne.n	80019a4 <LongPress_Routine+0x194>
			Status.LP_Key_state.KEY_SWAP = KEY_IDLE;
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <LongPress_Routine+0x278>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	775a      	strb	r2, [r3, #29]
		if(Status.LP_Key_state.KEY_AUDIO == KEY_PRESSED)
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <LongPress_Routine+0x278>)
 80019a6:	7f9b      	ldrb	r3, [r3, #30]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d10f      	bne.n	80019cc <LongPress_Routine+0x1bc>
			Status.LP_Key_state.KEY_AUDIO = KEY_JUST_RELEASED;
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <LongPress_Routine+0x278>)
 80019ae:	2203      	movs	r2, #3
 80019b0:	779a      	strb	r2, [r3, #30]
			HID_Status.buff[0] = KeyMacro[35]; //Deselect clip
 80019b2:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <LongPress_Routine+0x27c>)
 80019b4:	4a36      	ldr	r2, [pc, #216]	; (8001a90 <LongPress_Routine+0x280>)
 80019b6:	3301      	adds	r3, #1
 80019b8:	f502 728c 	add.w	r2, r2, #280	; 0x118
 80019bc:	6811      	ldr	r1, [r2, #0]
 80019be:	6852      	ldr	r2, [r2, #4]
 80019c0:	6019      	str	r1, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
			HID_Status.buff_ready = SET;
 80019c4:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <LongPress_Routine+0x27c>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e006      	b.n	80019da <LongPress_Routine+0x1ca>
		else if(Status.LP_Key_state.KEY_AUDIO == KEY_JUST_RELEASED)
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <LongPress_Routine+0x278>)
 80019ce:	7f9b      	ldrb	r3, [r3, #30]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d102      	bne.n	80019da <LongPress_Routine+0x1ca>
			Status.LP_Key_state.KEY_AUDIO = KEY_IDLE;
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <LongPress_Routine+0x278>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	779a      	strb	r2, [r3, #30]
		if(Status.LP_Key_state.KEY_SLIP == KEY_PRESSED)
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <LongPress_Routine+0x278>)
 80019dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d11c      	bne.n	8001a1e <LongPress_Routine+0x20e>
			Status.LP_Key_state.KEY_SLIP = KEY_JUST_RELEASED;
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <LongPress_Routine+0x278>)
 80019e6:	2203      	movs	r2, #3
 80019e8:	f883 2020 	strb.w	r2, [r3, #32]
			HID_Status.buff[0] = KeyMacro[35]; //Deselect All
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <LongPress_Routine+0x27c>)
 80019ee:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <LongPress_Routine+0x280>)
 80019f0:	3301      	adds	r3, #1
 80019f2:	f502 728c 	add.w	r2, r2, #280	; 0x118
 80019f6:	6811      	ldr	r1, [r2, #0]
 80019f8:	6852      	ldr	r2, [r2, #4]
 80019fa:	6019      	str	r1, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
			HID_Status.buff[1] = KeyMacro[39]; //Selection mode
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <LongPress_Routine+0x27c>)
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <LongPress_Routine+0x280>)
 8001a02:	3309      	adds	r3, #9
 8001a04:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8001a08:	6811      	ldr	r1, [r2, #0]
 8001a0a:	6852      	ldr	r2, [r2, #4]
 8001a0c:	6019      	str	r1, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
			Status.NumOfKeys = 2;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <LongPress_Routine+0x278>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	721a      	strb	r2, [r3, #8]
			HID_Status.buff_ready = SET;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <LongPress_Routine+0x27c>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e008      	b.n	8001a30 <LongPress_Routine+0x220>
		else if(Status.LP_Key_state.KEY_SLIP == KEY_JUST_RELEASED)
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <LongPress_Routine+0x278>)
 8001a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d103      	bne.n	8001a30 <LongPress_Routine+0x220>
			Status.LP_Key_state.KEY_SLIP = KEY_IDLE;
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <LongPress_Routine+0x278>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]
		if(Status.LP_Key_state.KEY_SLIDE == KEY_PRESSED)
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <LongPress_Routine+0x278>)
 8001a32:	7fdb      	ldrb	r3, [r3, #31]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d11b      	bne.n	8001a70 <LongPress_Routine+0x260>
			Status.LP_Key_state.KEY_SLIDE = KEY_JUST_RELEASED;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <LongPress_Routine+0x278>)
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	77da      	strb	r2, [r3, #31]
			HID_Status.buff[0] = KeyMacro[35]; //Deselect All
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <LongPress_Routine+0x27c>)
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <LongPress_Routine+0x280>)
 8001a42:	3301      	adds	r3, #1
 8001a44:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8001a48:	6811      	ldr	r1, [r2, #0]
 8001a4a:	6852      	ldr	r2, [r2, #4]
 8001a4c:	6019      	str	r1, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
			HID_Status.buff[1] = KeyMacro[39]; //Selection mode
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <LongPress_Routine+0x27c>)
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <LongPress_Routine+0x280>)
 8001a54:	3309      	adds	r3, #9
 8001a56:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8001a5a:	6811      	ldr	r1, [r2, #0]
 8001a5c:	6852      	ldr	r2, [r2, #4]
 8001a5e:	6019      	str	r1, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
			Status.NumOfKeys = 2;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <LongPress_Routine+0x278>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	721a      	strb	r2, [r3, #8]
			HID_Status.buff_ready = SET;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <LongPress_Routine+0x27c>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
}
 8001a6e:	e006      	b.n	8001a7e <LongPress_Routine+0x26e>
		else if(Status.LP_Key_state.KEY_SLIDE == KEY_JUST_RELEASED)
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <LongPress_Routine+0x278>)
 8001a72:	7fdb      	ldrb	r3, [r3, #31]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d102      	bne.n	8001a7e <LongPress_Routine+0x26e>
			Status.LP_Key_state.KEY_SLIDE = KEY_IDLE;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <LongPress_Routine+0x278>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	77da      	strb	r2, [r3, #31]
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	200004a8 	.word	0x200004a8
 8001a8c:	200004d0 	.word	0x200004d0
 8001a90:	20000000 	.word	0x20000000

08001a94 <LED_Routine>:

/* Knob mode */
void LED_Routine(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	if(Status.Knob_Mode == SHTL)
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <LED_Routine+0x38>)
 8001a9a:	7c1b      	ldrb	r3, [r3, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <LED_Routine+0x14>
	  KnobModeLED(1);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f000 f815 	bl	8001ad0 <KnobModeLED>
	else if(Status.Knob_Mode == JOG)
	  KnobModeLED(2);
	else if(Status.Knob_Mode == SCRL)
	  KnobModeLED(3);
}
 8001aa6:	e00e      	b.n	8001ac6 <LED_Routine+0x32>
	else if(Status.Knob_Mode == JOG)
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <LED_Routine+0x38>)
 8001aaa:	7c1b      	ldrb	r3, [r3, #16]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d103      	bne.n	8001ab8 <LED_Routine+0x24>
	  KnobModeLED(2);
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f000 f80d 	bl	8001ad0 <KnobModeLED>
}
 8001ab6:	e006      	b.n	8001ac6 <LED_Routine+0x32>
	else if(Status.Knob_Mode == SCRL)
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <LED_Routine+0x38>)
 8001aba:	7c1b      	ldrb	r3, [r3, #16]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d102      	bne.n	8001ac6 <LED_Routine+0x32>
	  KnobModeLED(3);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f805 	bl	8001ad0 <KnobModeLED>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200004a8 	.word	0x200004a8

08001ad0 <KnobModeLED>:

/* Knob ring of LEDs */
void KnobModeLED(uint8_t led)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	switch(led)
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d026      	beq.n	8001b2e <KnobModeLED+0x5e>
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	dc34      	bgt.n	8001b4e <KnobModeLED+0x7e>
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d002      	beq.n	8001aee <KnobModeLED+0x1e>
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d010      	beq.n	8001b0e <KnobModeLED+0x3e>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001aec:	e02f      	b.n	8001b4e <KnobModeLED+0x7e>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	4819      	ldr	r0, [pc, #100]	; (8001b58 <KnobModeLED+0x88>)
 8001af4:	f000 ff2f 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2140      	movs	r1, #64	; 0x40
 8001afc:	4816      	ldr	r0, [pc, #88]	; (8001b58 <KnobModeLED+0x88>)
 8001afe:	f000 ff2a 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2120      	movs	r1, #32
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <KnobModeLED+0x88>)
 8001b08:	f000 ff25 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8001b0c:	e01f      	b.n	8001b4e <KnobModeLED+0x7e>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	4811      	ldr	r0, [pc, #68]	; (8001b58 <KnobModeLED+0x88>)
 8001b14:	f000 ff1f 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2140      	movs	r1, #64	; 0x40
 8001b1c:	480e      	ldr	r0, [pc, #56]	; (8001b58 <KnobModeLED+0x88>)
 8001b1e:	f000 ff1a 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	2120      	movs	r1, #32
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <KnobModeLED+0x88>)
 8001b28:	f000 ff15 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8001b2c:	e00f      	b.n	8001b4e <KnobModeLED+0x7e>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <KnobModeLED+0x88>)
 8001b34:	f000 ff0f 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2140      	movs	r1, #64	; 0x40
 8001b3c:	4806      	ldr	r0, [pc, #24]	; (8001b58 <KnobModeLED+0x88>)
 8001b3e:	f000 ff0a 	bl	8002956 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2120      	movs	r1, #32
 8001b46:	4804      	ldr	r0, [pc, #16]	; (8001b58 <KnobModeLED+0x88>)
 8001b48:	f000 ff05 	bl	8002956 <HAL_GPIO_WritePin>
		break;
 8001b4c:	bf00      	nop
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020000 	.word	0x40020000

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <Error_Handler+0x8>
	...

08001b68 <HAL_UART_RxCpltCallback>:
		{MOD_CTRL_L, 0, KEY_X}								//13 - Paste Attributes
};

/* Callback after receiving a message from the display */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	HID_Status.buff[0] = NextionMacro[Status.NextionRX_buff[2]];
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_UART_RxCpltCallback+0x38>)
 8001b72:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b76:	4618      	mov	r0, r3
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_UART_RxCpltCallback+0x3c>)
 8001b7a:	490b      	ldr	r1, [pc, #44]	; (8001ba8 <HAL_UART_RxCpltCallback+0x40>)
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	00c3      	lsls	r3, r0, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	cb03      	ldmia	r3!, {r0, r1}
 8001b84:	6010      	str	r0, [r2, #0]
 8001b86:	6051      	str	r1, [r2, #4]

	HID_Status.buff_ready = SET;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_UART_RxCpltCallback+0x3c>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart1, (uint8_t *)Status.NextionRX_buff, 7);
 8001b8e:	2207      	movs	r2, #7
 8001b90:	4906      	ldr	r1, [pc, #24]	; (8001bac <HAL_UART_RxCpltCallback+0x44>)
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <HAL_UART_RxCpltCallback+0x48>)
 8001b94:	f003 ff69 	bl	8005a6a <HAL_UART_Receive_IT>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200004a8 	.word	0x200004a8
 8001ba4:	200004d0 	.word	0x200004d0
 8001ba8:	20000218 	.word	0x20000218
 8001bac:	200004c9 	.word	0x200004c9
 8001bb0:	200005ec 	.word	0x200005ec

08001bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_MspInit+0x58>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_MspInit+0x58>)
 8001bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bc4:	6253      	str	r3, [r2, #36]	; 0x24
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_MspInit+0x58>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_MspInit+0x58>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_MspInit+0x58>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6213      	str	r3, [r2, #32]
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_MspInit+0x58>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_MspInit+0x58>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_MspInit+0x58>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6253      	str	r3, [r2, #36]	; 0x24
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_MspInit+0x58>)
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40023800 	.word	0x40023800

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <NMI_Handler+0x4>

08001c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <MemManage_Handler+0x4>

08001c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c56:	f000 fb1d 	bl	8002294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROW4_Pin);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f000 fe90 	bl	8002988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROW3_Pin);
 8001c70:	2002      	movs	r0, #2
 8001c72:	f000 fe89 	bl	8002988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROW2_Pin);
 8001c7e:	2004      	movs	r0, #4
 8001c80:	f000 fe82 	bl	8002988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROW1_Pin);
 8001c8c:	2008      	movs	r0, #8
 8001c8e:	f000 fe7b 	bl	8002988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROW5_Pin);
 8001c9a:	2010      	movs	r0, #16
 8001c9c:	f000 fe74 	bl	8002988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <USB_HP_IRQHandler+0x10>)
 8001caa:	f001 f8cd 	bl	8002e48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000ad4 	.word	0x20000ad4

08001cb8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <USB_LP_IRQHandler+0x10>)
 8001cbe:	f001 f8c3 	bl	8002e48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000ad4 	.word	0x20000ad4

08001ccc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROW6_Pin);
 8001cd0:	2020      	movs	r0, #32
 8001cd2:	f000 fe59 	bl	8002988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <TIM10_IRQHandler>:

/**
  * @brief This function handles TIM10 global interrupt.
  */
void TIM10_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM10_IRQn 0 */

	Status.Flags.FLAG_50MS = SET;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <TIM10_IRQHandler+0x14>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	765a      	strb	r2, [r3, #25]

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001ce6:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <TIM10_IRQHandler+0x18>)
 8001ce8:	f003 fb34 	bl	8005354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM10_IRQn 1 */

  /* USER CODE END TIM10_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200004a8 	.word	0x200004a8
 8001cf4:	200005ac 	.word	0x200005ac

08001cf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <USART1_IRQHandler+0x10>)
 8001cfe:	f003 fee5 	bl	8005acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200005ec 	.word	0x200005ec

08001d0c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

	Status.Flags.FLAG_1MS = SET;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <TIM6_IRQHandler+0x14>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	761a      	strb	r2, [r3, #24]

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <TIM6_IRQHandler+0x18>)
 8001d18:	f003 fb1c 	bl	8005354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200004a8 	.word	0x200004a8
 8001d24:	2000052c 	.word	0x2000052c

08001d28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <TIM7_IRQHandler+0x10>)
 8001d2e:	f003 fb11 	bl	8005354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000056c 	.word	0x2000056c

08001d3c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	2224      	movs	r2, #36	; 0x24
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f008 fe44 	bl	800a9e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <MX_TIM2_Init+0xa4>)
 8001d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <MX_TIM2_Init+0xa4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <MX_TIM2_Init+0xa4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <MX_TIM2_Init+0xa4>)
 8001d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <MX_TIM2_Init+0xa4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <MX_TIM2_Init+0xa4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d94:	2301      	movs	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001da4:	2301      	movs	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	4619      	mov	r1, r3
 8001db6:	480d      	ldr	r0, [pc, #52]	; (8001dec <MX_TIM2_Init+0xa4>)
 8001db8:	f003 f9c4 	bl	8005144 <HAL_TIM_Encoder_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001dc2:	f7ff fecb 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	; (8001dec <MX_TIM2_Init+0xa4>)
 8001dd4:	f003 fd9e 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001dde:	f7ff febd 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	3730      	adds	r7, #48	; 0x30
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200004ec 	.word	0x200004ec

08001df0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df6:	463b      	mov	r3, r7
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <MX_TIM6_Init+0x68>)
 8001e02:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e06:	22c7      	movs	r2, #199	; 0xc7
 8001e08:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3200-1;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e12:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001e16:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e20:	f003 f8d8 	bl	8004fd4 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e2a:	f7ff fe97 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e36:	463b      	mov	r3, r7
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e3c:	f003 fd6a 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e46:	f7ff fe89 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000052c 	.word	0x2000052c
 8001e58:	40001000 	.word	0x40001000

08001e5c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e62:	463b      	mov	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e6e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 30-1;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e72:	221d      	movs	r2, #29
 8001e74:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 32000-1;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e7e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001e82:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e8c:	f003 f8a2 	bl	8004fd4 <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e96:	f7ff fe61 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001ea8:	f003 fd34 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001eb2:	f7ff fe53 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000056c 	.word	0x2000056c
 8001ec4:	40001400 	.word	0x40001400

08001ec8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ece:	463b      	mov	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_TIM10_Init+0x6c>)
 8001edc:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <MX_TIM10_Init+0x70>)
 8001ede:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50-1;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_TIM10_Init+0x6c>)
 8001ee2:	2231      	movs	r2, #49	; 0x31
 8001ee4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <MX_TIM10_Init+0x6c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 32000-1;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_TIM10_Init+0x6c>)
 8001eee:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001ef2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_TIM10_Init+0x6c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_TIM10_Init+0x6c>)
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <MX_TIM10_Init+0x6c>)
 8001f02:	f003 f867 	bl	8004fd4 <HAL_TIM_Base_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8001f0c:	f7ff fe26 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f14:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4806      	ldr	r0, [pc, #24]	; (8001f34 <MX_TIM10_Init+0x6c>)
 8001f1c:	f003 faf6 	bl	800550c <HAL_TIM_ConfigClockSource>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM10_Init+0x62>
  {
    Error_Handler();
 8001f26:	f7ff fe19 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200005ac 	.word	0x200005ac
 8001f38:	40010c00 	.word	0x40010c00

08001f3c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d144      	bne.n	8001fe8 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6253      	str	r3, [r2, #36]	; 0x24
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8001fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001fc4:	f000 fb30 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001fe4:	f000 fb20 	bl	8002628 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400

08001ffc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <HAL_TIM_Base_MspInit+0xac>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d114      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800200e:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_TIM_Base_MspInit+0xb0>)
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	4a26      	ldr	r2, [pc, #152]	; (80020ac <HAL_TIM_Base_MspInit+0xb0>)
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	6253      	str	r3, [r2, #36]	; 0x24
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_TIM_Base_MspInit+0xb0>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	202b      	movs	r0, #43	; 0x2b
 800202c:	f000 fa47 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002030:	202b      	movs	r0, #43	; 0x2b
 8002032:	f000 fa60 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002036:	e032      	b.n	800209e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_TIM_Base_MspInit+0xb4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d114      	bne.n	800206c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_TIM_Base_MspInit+0xb0>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_TIM_Base_MspInit+0xb0>)
 8002048:	f043 0320 	orr.w	r3, r3, #32
 800204c:	6253      	str	r3, [r2, #36]	; 0x24
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_TIM_Base_MspInit+0xb0>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	202c      	movs	r0, #44	; 0x2c
 8002060:	f000 fa2d 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002064:	202c      	movs	r0, #44	; 0x2c
 8002066:	f000 fa46 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 800206a:	e018      	b.n	800209e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM10)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_TIM_Base_MspInit+0xb8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d113      	bne.n	800209e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_TIM_Base_MspInit+0xb0>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <HAL_TIM_Base_MspInit+0xb0>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_TIM_Base_MspInit+0xb0>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	201a      	movs	r0, #26
 8002094:	f000 fa13 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8002098:	201a      	movs	r0, #26
 800209a:	f000 fa2c 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40001000 	.word	0x40001000
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40001400 	.word	0x40001400
 80020b4:	40010c00 	.word	0x40010c00

080020b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <MX_USART1_UART_Init+0x50>)
 80020c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020de:	220c      	movs	r2, #12
 80020e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020f0:	f003 fc6e 	bl	80059d0 <HAL_UART_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020fa:	f7ff fd2f 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200005ec 	.word	0x200005ec
 8002108:	40013800 	.word	0x40013800

0800210c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_UART_MspInit+0x8c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d12f      	bne.n	800218e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_UART_MspInit+0x90>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a1a      	ldr	r2, [pc, #104]	; (800219c <HAL_UART_MspInit+0x90>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_UART_MspInit+0x90>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_UART_MspInit+0x90>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_UART_MspInit+0x90>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	61d3      	str	r3, [r2, #28]
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_UART_MspInit+0x90>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = NEXTION_TX_Pin|NEXTION_RX_Pin;
 800215e:	23c0      	movs	r3, #192	; 0xc0
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800216e:	2307      	movs	r3, #7
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	4809      	ldr	r0, [pc, #36]	; (80021a0 <HAL_UART_MspInit+0x94>)
 800217a:	f000 fa55 	bl	8002628 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	2025      	movs	r0, #37	; 0x25
 8002184:	f000 f99b 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002188:	2025      	movs	r0, #37	; 0x25
 800218a:	f000 f9b4 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800218e:	bf00      	nop
 8002190:	3728      	adds	r7, #40	; 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40013800 	.word	0x40013800
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020400 	.word	0x40020400

080021a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a4:	480c      	ldr	r0, [pc, #48]	; (80021d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a6:	490d      	ldr	r1, [pc, #52]	; (80021dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021bc:	4c0a      	ldr	r4, [pc, #40]	; (80021e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ca:	f7ff fdb7 	bl	8001d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f008 fbe5 	bl	800a99c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021d2:	f7ff fa43 	bl	800165c <main>
  bx lr
 80021d6:	4770      	bx	lr
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	200003e0 	.word	0x200003e0
  ldr r2, =_sidata
 80021e0:	0800aa8c 	.word	0x0800aa8c
  ldr r2, =_sbss
 80021e4:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 80021e8:	20000dd4 	.word	0x20000dd4

080021ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC1_IRQHandler>

080021ee <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f955 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fe:	200f      	movs	r0, #15
 8002200:	f000 f80e 	bl	8002220 <HAL_InitTick>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	e001      	b.n	8002214 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002210:	f7ff fcd0 	bl	8001bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002214:	79fb      	ldrb	r3, [r7, #7]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_InitTick+0x68>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d022      	beq.n	800227a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_InitTick+0x6c>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_InitTick+0x68>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002240:	fbb1 f3f3 	udiv	r3, r1, r3
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f962 	bl	8002512 <HAL_SYSTICK_Config>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10f      	bne.n	8002274 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	d809      	bhi.n	800226e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800225a:	2200      	movs	r2, #0
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	f04f 30ff 	mov.w	r0, #4294967295
 8002262:	f000 f92c 	bl	80024be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_InitTick+0x70>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e007      	b.n	800227e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	e004      	b.n	800227e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e001      	b.n	800227e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000290 	.word	0x20000290
 800228c:	20000288 	.word	0x20000288
 8002290:	2000028c 	.word	0x2000028c

08002294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_IncTick+0x1c>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_IncTick+0x20>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <HAL_IncTick+0x1c>)
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000630 	.word	0x20000630
 80022b4:	20000290 	.word	0x20000290

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <HAL_GetTick+0x10>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000630 	.word	0x20000630

080022cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d004      	beq.n	80022f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_Delay+0x40>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f0:	bf00      	nop
 80022f2:	f7ff ffe1 	bl	80022b8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d8f7      	bhi.n	80022f2 <HAL_Delay+0x26>
  {
  }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000290 	.word	0x20000290

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4906      	ldr	r1, [pc, #24]	; (80023a8 <__NVIC_EnableIRQ+0x34>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	; (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	; (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff90 	bl	80023ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff2d 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff42 	bl	8002358 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff90 	bl	8002400 <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5f 	bl	80023ac <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff35 	bl	8002374 <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d008      	beq.n	8002554 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e022      	b.n	800259a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 020e 	bic.w	r2, r2, #14
 8002562:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f003 021c 	and.w	r2, r3, #28
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	2101      	movs	r1, #1
 8002582:	fa01 f202 	lsl.w	r2, r1, r2
 8002586:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d005      	beq.n	80025c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2204      	movs	r2, #4
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
 80025c6:	e029      	b.n	800261c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020e 	bic.w	r2, r2, #14
 80025d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f003 021c 	and.w	r2, r3, #28
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
    }
  }
  return status;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800263e:	e154      	b.n	80028ea <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8146 	beq.w	80028e4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d005      	beq.n	8002670 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800266c:	2b02      	cmp	r3, #2
 800266e:	d130      	bne.n	80026d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80026a6:	2201      	movs	r2, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 0201 	and.w	r2, r3, #1
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d017      	beq.n	800270e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d123      	bne.n	8002762 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002726:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	08da      	lsrs	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3208      	adds	r2, #8
 800275c:	6939      	ldr	r1, [r7, #16]
 800275e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0203 	and.w	r2, r3, #3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80a0 	beq.w	80028e4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <HAL_GPIO_Init+0x2e0>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4a57      	ldr	r2, [pc, #348]	; (8002908 <HAL_GPIO_Init+0x2e0>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6213      	str	r3, [r2, #32]
 80027b0:	4b55      	ldr	r3, [pc, #340]	; (8002908 <HAL_GPIO_Init+0x2e0>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80027bc:	4a53      	ldr	r2, [pc, #332]	; (800290c <HAL_GPIO_Init+0x2e4>)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <HAL_GPIO_Init+0x2e8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d019      	beq.n	800281c <HAL_GPIO_Init+0x1f4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a4a      	ldr	r2, [pc, #296]	; (8002914 <HAL_GPIO_Init+0x2ec>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d013      	beq.n	8002818 <HAL_GPIO_Init+0x1f0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a49      	ldr	r2, [pc, #292]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00d      	beq.n	8002814 <HAL_GPIO_Init+0x1ec>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a48      	ldr	r2, [pc, #288]	; (800291c <HAL_GPIO_Init+0x2f4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <HAL_GPIO_Init+0x1e8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a47      	ldr	r2, [pc, #284]	; (8002920 <HAL_GPIO_Init+0x2f8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_GPIO_Init+0x1e4>
 8002808:	2304      	movs	r3, #4
 800280a:	e008      	b.n	800281e <HAL_GPIO_Init+0x1f6>
 800280c:	2305      	movs	r3, #5
 800280e:	e006      	b.n	800281e <HAL_GPIO_Init+0x1f6>
 8002810:	2303      	movs	r3, #3
 8002812:	e004      	b.n	800281e <HAL_GPIO_Init+0x1f6>
 8002814:	2302      	movs	r3, #2
 8002816:	e002      	b.n	800281e <HAL_GPIO_Init+0x1f6>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <HAL_GPIO_Init+0x1f6>
 800281c:	2300      	movs	r3, #0
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	f002 0203 	and.w	r2, r2, #3
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	4093      	lsls	r3, r2
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800282e:	4937      	ldr	r1, [pc, #220]	; (800290c <HAL_GPIO_Init+0x2e4>)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800283c:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_GPIO_Init+0x2fc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002860:	4a30      	ldr	r2, [pc, #192]	; (8002924 <HAL_GPIO_Init+0x2fc>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002866:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_GPIO_Init+0x2fc>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800288a:	4a26      	ldr	r2, [pc, #152]	; (8002924 <HAL_GPIO_Init+0x2fc>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_GPIO_Init+0x2fc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028b4:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_GPIO_Init+0x2fc>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_GPIO_Init+0x2fc>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028de:	4a11      	ldr	r2, [pc, #68]	; (8002924 <HAL_GPIO_Init+0x2fc>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f aea3 	bne.w	8002640 <HAL_GPIO_Init+0x18>
  }
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	40010000 	.word	0x40010000
 8002910:	40020000 	.word	0x40020000
 8002914:	40020400 	.word	0x40020400
 8002918:	40020800 	.word	0x40020800
 800291c:	40020c00 	.word	0x40020c00
 8002920:	40021000 	.word	0x40021000
 8002924:	40010400 	.word	0x40010400

08002928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e001      	b.n	800294a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	807b      	strh	r3, [r7, #2]
 8002962:	4613      	mov	r3, r2
 8002964:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002966:	787b      	ldrb	r3, [r7, #1]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800296c:	887a      	ldrh	r2, [r7, #2]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002972:	e003      	b.n	800297c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	041a      	lsls	r2, r3, #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
	...

08002988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd ff34 	bl	8000814 <HAL_GPIO_EXTI_Callback>
  }
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40010400 	.word	0x40010400

080029b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e12b      	b.n	8002c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fd fea2 	bl	8000728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a1c:	f002 fa52 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 8002a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4a81      	ldr	r2, [pc, #516]	; (8002c2c <HAL_I2C_Init+0x274>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d807      	bhi.n	8002a3c <HAL_I2C_Init+0x84>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a80      	ldr	r2, [pc, #512]	; (8002c30 <HAL_I2C_Init+0x278>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	bf94      	ite	ls
 8002a34:	2301      	movls	r3, #1
 8002a36:	2300      	movhi	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e006      	b.n	8002a4a <HAL_I2C_Init+0x92>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a7d      	ldr	r2, [pc, #500]	; (8002c34 <HAL_I2C_Init+0x27c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	bf94      	ite	ls
 8002a44:	2301      	movls	r3, #1
 8002a46:	2300      	movhi	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0e7      	b.n	8002c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a78      	ldr	r2, [pc, #480]	; (8002c38 <HAL_I2C_Init+0x280>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	0c9b      	lsrs	r3, r3, #18
 8002a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <HAL_I2C_Init+0x274>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d802      	bhi.n	8002a8c <HAL_I2C_Init+0xd4>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	e009      	b.n	8002aa0 <HAL_I2C_Init+0xe8>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	4a69      	ldr	r2, [pc, #420]	; (8002c3c <HAL_I2C_Init+0x284>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	495c      	ldr	r1, [pc, #368]	; (8002c2c <HAL_I2C_Init+0x274>)
 8002abc:	428b      	cmp	r3, r1
 8002abe:	d819      	bhi.n	8002af4 <HAL_I2C_Init+0x13c>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e59      	subs	r1, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_I2C_Init+0x138>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e59      	subs	r1, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aee:	e051      	b.n	8002b94 <HAL_I2C_Init+0x1dc>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e04f      	b.n	8002b94 <HAL_I2C_Init+0x1dc>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d111      	bne.n	8002b20 <HAL_I2C_Init+0x168>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1e58      	subs	r0, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e012      	b.n	8002b46 <HAL_I2C_Init+0x18e>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1e58      	subs	r0, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	0099      	lsls	r1, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Init+0x196>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e022      	b.n	8002b94 <HAL_I2C_Init+0x1dc>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10e      	bne.n	8002b74 <HAL_I2C_Init+0x1bc>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e58      	subs	r0, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6859      	ldr	r1, [r3, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	440b      	add	r3, r1
 8002b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b72:	e00f      	b.n	8002b94 <HAL_I2C_Init+0x1dc>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e58      	subs	r0, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	0099      	lsls	r1, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	6809      	ldr	r1, [r1, #0]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6911      	ldr	r1, [r2, #16]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68d2      	ldr	r2, [r2, #12]
 8002bce:	4311      	orrs	r1, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	000186a0 	.word	0x000186a0
 8002c30:	001e847f 	.word	0x001e847f
 8002c34:	003d08ff 	.word	0x003d08ff
 8002c38:	431bde83 	.word	0x431bde83
 8002c3c:	10624dd3 	.word	0x10624dd3

08002c40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c42:	b08b      	sub	sp, #44	; 0x2c
 8002c44:	af06      	add	r7, sp, #24
 8002c46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0d0      	b.n	8002df4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f007 fc14 	bl	800a494 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fb71 	bl	8006360 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	e04c      	b.n	8002d1e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	3301      	adds	r3, #1
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	b298      	uxth	r0, r3
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3336      	adds	r3, #54	; 0x36
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3303      	adds	r3, #3
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	3338      	adds	r3, #56	; 0x38
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	333c      	adds	r3, #60	; 0x3c
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	3340      	adds	r3, #64	; 0x40
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3ad      	bcc.n	8002c84 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e044      	b.n	8002db8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	3301      	adds	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3b5      	bcc.n	8002d2e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	687e      	ldr	r6, [r7, #4]
 8002dca:	466d      	mov	r5, sp
 8002dcc:	f106 0410 	add.w	r4, r6, #16
 8002dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	602b      	str	r3, [r5, #0]
 8002dd8:	1d33      	adds	r3, r6, #4
 8002dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ddc:	6838      	ldr	r0, [r7, #0]
 8002dde:	f003 fad9 	bl	8006394 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_PCD_Start+0x16>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e016      	b.n	8002e40 <HAL_PCD_Start+0x44>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fa88 	bl	8006334 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e24:	2101      	movs	r1, #1
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f007 fb16 	bl	800a458 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 ff6d 	bl	8008d10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 ff65 	bl	8008d24 <USB_ReadInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e64:	d102      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fade 	bl	8003428 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f005 ff57 	bl	8008d24 <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e80:	d112      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e94:	b292      	uxth	r2, r2
 8002e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f007 fb7d 	bl	800a59a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8c7 	bl	8003036 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f005 ff39 	bl	8008d24 <USB_ReadInterrupts>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f005 ff22 	bl	8008d24 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eea:	d10b      	bne.n	8002f04 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efe:	b292      	uxth	r2, r2
 8002f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f005 ff0b 	bl	8008d24 <USB_ReadInterrupts>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f18:	d126      	bne.n	8002f68 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0204 	bic.w	r2, r2, #4
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0208 	bic.w	r2, r2, #8
 8002f44:	b292      	uxth	r2, r2
 8002f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f007 fb5e 	bl	800a60c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f62:	b292      	uxth	r2, r2
 8002f64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f005 fed9 	bl	8008d24 <USB_ReadInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7c:	d126      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0208 	orr.w	r2, r2, #8
 8002f90:	b292      	uxth	r2, r2
 8002f92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa8:	b292      	uxth	r2, r2
 8002faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0204 	orr.w	r2, r2, #4
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f007 fb06 	bl	800a5d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f005 fea7 	bl	8008d24 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe0:	d10e      	bne.n	8003000 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f007 fabf 	bl	800a57e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f005 fe8d 	bl	8008d24 <USB_ReadInterrupts>
 800300a:	4603      	mov	r3, r0
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003014:	d10b      	bne.n	800302e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003028:	b292      	uxth	r2, r2
 800302a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_PCD_SetAddress+0x1a>
 800304c:	2302      	movs	r3, #2
 800304e:	e013      	b.n	8003078 <HAL_PCD_SetAddress+0x42>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f005 fe3e 	bl	8008cea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	70fb      	strb	r3, [r7, #3]
 8003092:	460b      	mov	r3, r1
 8003094:	803b      	strh	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800309e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da0e      	bge.n	80030c4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	705a      	strb	r2, [r3, #1]
 80030c2:	e00e      	b.n	80030e2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 0207 	and.w	r2, r3, #7
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030ee:	883a      	ldrh	r2, [r7, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	78ba      	ldrb	r2, [r7, #2]
 80030f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800310c:	78bb      	ldrb	r3, [r7, #2]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d102      	bne.n	8003118 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_PCD_EP_Open+0xa6>
 8003122:	2302      	movs	r3, #2
 8003124:	e00e      	b.n	8003144 <HAL_PCD_EP_Open+0xc4>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68f9      	ldr	r1, [r7, #12]
 8003134:	4618      	mov	r0, r3
 8003136:	f003 f94d 	bl	80063d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003142:	7afb      	ldrb	r3, [r7, #11]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	da0e      	bge.n	800317e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	705a      	strb	r2, [r3, #1]
 800317c:	e00e      	b.n	800319c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 0207 	and.w	r2, r3, #7
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_PCD_EP_Close+0x6a>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e00e      	b.n	80031d4 <HAL_PCD_EP_Close+0x88>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68f9      	ldr	r1, [r7, #12]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fc6f 	bl	8006aa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	460b      	mov	r3, r1
 80031ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	7afb      	ldrb	r3, [r7, #11]
 80031ee:	f003 0207 	and.w	r2, r3, #7
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321c:	7afb      	ldrb	r3, [r7, #11]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	b2da      	uxtb	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003228:	7afb      	ldrb	r3, [r7, #11]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6979      	ldr	r1, [r7, #20]
 8003238:	4618      	mov	r0, r3
 800323a:	f003 fe21 	bl	8006e80 <USB_EPStartXfer>
 800323e:	e005      	b.n	800324c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6979      	ldr	r1, [r7, #20]
 8003246:	4618      	mov	r0, r3
 8003248:	f003 fe1a 	bl	8006e80 <USB_EPStartXfer>
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	460b      	mov	r3, r1
 8003264:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003266:	7afb      	ldrb	r3, [r7, #11]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2201      	movs	r2, #1
 80032a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ae:	7afb      	ldrb	r3, [r7, #11]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6979      	ldr	r1, [r7, #20]
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 fdde 	bl	8006e80 <USB_EPStartXfer>
 80032c4:	e005      	b.n	80032d2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6979      	ldr	r1, [r7, #20]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fdd7 	bl	8006e80 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 0207 	and.w	r2, r3, #7
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d901      	bls.n	80032fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e03e      	b.n	8003378 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da0e      	bge.n	8003320 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	705a      	strb	r2, [r3, #1]
 800331e:	e00c      	b.n	800333a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_PCD_EP_SetStall+0x7e>
 8003356:	2302      	movs	r3, #2
 8003358:	e00e      	b.n	8003378 <HAL_PCD_EP_SetStall+0x9c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	4618      	mov	r0, r3
 800336a:	f005 fbc1 	bl	8008af0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 020f 	and.w	r2, r3, #15
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d901      	bls.n	800339e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e040      	b.n	8003420 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800339e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	da0e      	bge.n	80033c4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	705a      	strb	r2, [r3, #1]
 80033c2:	e00e      	b.n	80033e2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 0207 	and.w	r2, r3, #7
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_PCD_EP_ClrStall+0x82>
 80033fe:	2302      	movs	r3, #2
 8003400:	e00e      	b.n	8003420 <HAL_PCD_EP_ClrStall+0xa0>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	4618      	mov	r0, r3
 8003412:	f005 fbbd 	bl	8008b90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	; 0x38
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003430:	e2ec      	b.n	8003a0c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800343a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800343c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003448:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 8161 	bne.w	8003714 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003452:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d152      	bne.n	8003502 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346c:	81fb      	strh	r3, [r7, #14]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	89fb      	ldrh	r3, [r7, #14]
 8003474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3328      	adds	r3, #40	; 0x28
 8003484:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	3302      	adds	r3, #2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	441a      	add	r2, r3
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034c0:	2100      	movs	r1, #0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f007 f841 	bl	800a54a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 829b 	beq.w	8003a0c <PCD_EP_ISR_Handler+0x5e4>
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 8296 	bne.w	8003a0c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b292      	uxth	r2, r2
 80034f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003500:	e284      	b.n	8003a0c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003512:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003518:	2b00      	cmp	r3, #0
 800351a:	d034      	beq.n	8003586 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003524:	b29b      	uxth	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	3306      	adds	r3, #6
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800355a:	b29b      	uxth	r3, r3
 800355c:	f005 fc36 	bl	8008dcc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29a      	uxth	r2, r3
 8003568:	f640 738f 	movw	r3, #3983	; 0xf8f
 800356c:	4013      	ands	r3, r2
 800356e:	823b      	strh	r3, [r7, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	8a3a      	ldrh	r2, [r7, #16]
 8003576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800357a:	b292      	uxth	r2, r2
 800357c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f006 ffb6 	bl	800a4f0 <HAL_PCD_SetupStageCallback>
 8003584:	e242      	b.n	8003a0c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003586:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800358a:	2b00      	cmp	r3, #0
 800358c:	f280 823e 	bge.w	8003a0c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29a      	uxth	r2, r3
 8003598:	f640 738f 	movw	r3, #3983	; 0xf8f
 800359c:	4013      	ands	r3, r2
 800359e:	83bb      	strh	r3, [r7, #28]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	8bba      	ldrh	r2, [r7, #28]
 80035a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035aa:	b292      	uxth	r2, r2
 80035ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	3306      	adds	r3, #6
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d019      	beq.n	8003616 <PCD_EP_ISR_Handler+0x1ee>
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d015      	beq.n	8003616 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	6959      	ldr	r1, [r3, #20]
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f005 fbe6 	bl	8008dcc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	441a      	add	r2, r3
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800360e:	2100      	movs	r1, #0
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f006 ff7f 	bl	800a514 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 81f2 	bne.w	8003a0c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4413      	add	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d112      	bne.n	8003676 <PCD_EP_ISR_Handler+0x24e>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800365a:	b29a      	uxth	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800366a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366e:	b29a      	uxth	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e02f      	b.n	80036d6 <PCD_EP_ISR_Handler+0x2ae>
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b3e      	cmp	r3, #62	; 0x3e
 800367c:	d813      	bhi.n	80036a6 <PCD_EP_ISR_Handler+0x27e>
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <PCD_EP_ISR_Handler+0x270>
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	3301      	adds	r3, #1
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	b29b      	uxth	r3, r3
 800369c:	029b      	lsls	r3, r3, #10
 800369e:	b29a      	uxth	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	801a      	strh	r2, [r3, #0]
 80036a4:	e017      	b.n	80036d6 <PCD_EP_ISR_Handler+0x2ae>
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <PCD_EP_ISR_Handler+0x298>
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	3b01      	subs	r3, #1
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	029b      	lsls	r3, r3, #10
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	827b      	strh	r3, [r7, #18]
 80036e8:	8a7b      	ldrh	r3, [r7, #18]
 80036ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036ee:	827b      	strh	r3, [r7, #18]
 80036f0:	8a7b      	ldrh	r3, [r7, #18]
 80036f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036f6:	827b      	strh	r3, [r7, #18]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	8a7b      	ldrh	r3, [r7, #18]
 80036fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370e:	b29b      	uxth	r3, r3
 8003710:	8013      	strh	r3, [r2, #0]
 8003712:	e17b      	b.n	8003a0c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003726:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800372a:	2b00      	cmp	r3, #0
 800372c:	f280 80ea 	bge.w	8003904 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29a      	uxth	r2, r3
 8003742:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003746:	4013      	ands	r3, r2
 8003748:	853b      	strh	r3, [r7, #40]	; 0x28
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800375a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800375e:	b292      	uxth	r2, r2
 8003760:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003762:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	7b1b      	ldrb	r3, [r3, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d122      	bne.n	80037c6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003788:	b29b      	uxth	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	3306      	adds	r3, #6
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80037aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8087 	beq.w	80038c0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	6959      	ldr	r1, [r3, #20]
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	88da      	ldrh	r2, [r3, #6]
 80037be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037c0:	f005 fb04 	bl	8008dcc <USB_ReadPMA>
 80037c4:	e07c      	b.n	80038c0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	78db      	ldrb	r3, [r3, #3]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d108      	bne.n	80037e0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037d0:	461a      	mov	r2, r3
 80037d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f927 	bl	8003a28 <HAL_PCD_EP_DB_Receive>
 80037da:	4603      	mov	r3, r0
 80037dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80037de:	e06f      	b.n	80038c0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	441a      	add	r2, r3
 800380a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800380c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800381c:	b29b      	uxth	r3, r3
 800381e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d021      	beq.n	800387e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003842:	b29b      	uxth	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	3302      	adds	r3, #2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003862:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02a      	beq.n	80038c0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	6959      	ldr	r1, [r3, #20]
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	891a      	ldrh	r2, [r3, #8]
 8003876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003878:	f005 faa8 	bl	8008dcc <USB_ReadPMA>
 800387c:	e020      	b.n	80038c0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003886:	b29b      	uxth	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	3306      	adds	r3, #6
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80038a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	6959      	ldr	r1, [r3, #20]
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	895a      	ldrh	r2, [r3, #10]
 80038ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038bc:	f005 fa86 	bl	8008dcc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038c6:	441a      	add	r2, r3
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038d2:	441a      	add	r2, r3
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <PCD_EP_ISR_Handler+0x4c2>
 80038e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d206      	bcs.n	80038f8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f006 fe0f 	bl	800a514 <HAL_PCD_DataOutStageCallback>
 80038f6:	e005      	b.n	8003904 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 fabe 	bl	8006e80 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b00      	cmp	r3, #0
 800390c:	d07e      	beq.n	8003a0c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800390e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393c:	843b      	strh	r3, [r7, #32]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	441a      	add	r2, r3
 800394c:	8c3b      	ldrh	r3, [r7, #32]
 800394e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003956:	b29b      	uxth	r3, r3
 8003958:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	78db      	ldrb	r3, [r3, #3]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d00c      	beq.n	800397c <PCD_EP_ISR_Handler+0x554>
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	78db      	ldrb	r3, [r3, #3]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d008      	beq.n	800397c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800396e:	2b02      	cmp	r3, #2
 8003970:	d146      	bne.n	8003a00 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003972:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d141      	bne.n	8003a00 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003984:	b29b      	uxth	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	3302      	adds	r3, #2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	8bfb      	ldrh	r3, [r7, #30]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d906      	bls.n	80039be <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	8bfb      	ldrh	r3, [r7, #30]
 80039b6:	1ad2      	subs	r2, r2, r3
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	619a      	str	r2, [r3, #24]
 80039bc:	e002      	b.n	80039c4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f006 fdb9 	bl	800a54a <HAL_PCD_DataInStageCallback>
 80039d8:	e018      	b.n	8003a0c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	8bfb      	ldrh	r3, [r7, #30]
 80039e0:	441a      	add	r2, r3
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	8bfb      	ldrh	r3, [r7, #30]
 80039ec:	441a      	add	r2, r3
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fa41 	bl	8006e80 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80039fe:	e005      	b.n	8003a0c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a02:	461a      	mov	r2, r3
 8003a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f91b 	bl	8003c42 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	b21b      	sxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f6ff ad0a 	blt.w	8003432 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3738      	adds	r7, #56	; 0x38
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d07e      	beq.n	8003b3e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	3302      	adds	r3, #2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	8b7b      	ldrh	r3, [r7, #26]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d306      	bcc.n	8003a82 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	8b7b      	ldrh	r3, [r7, #26]
 8003a7a:	1ad2      	subs	r2, r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	619a      	str	r2, [r3, #24]
 8003a80:	e002      	b.n	8003a88 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d123      	bne.n	8003ad8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	833b      	strh	r3, [r7, #24]
 8003aac:	8b3b      	ldrh	r3, [r7, #24]
 8003aae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ab2:	833b      	strh	r3, [r7, #24]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	441a      	add	r2, r3
 8003ac2:	8b3b      	ldrh	r3, [r7, #24]
 8003ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01f      	beq.n	8003b22 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afc:	82fb      	strh	r3, [r7, #22]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	8afb      	ldrh	r3, [r7, #22]
 8003b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b22:	8b7b      	ldrh	r3, [r7, #26]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8087 	beq.w	8003c38 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	6959      	ldr	r1, [r3, #20]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	891a      	ldrh	r2, [r3, #8]
 8003b36:	8b7b      	ldrh	r3, [r7, #26]
 8003b38:	f005 f948 	bl	8008dcc <USB_ReadPMA>
 8003b3c:	e07c      	b.n	8003c38 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	3306      	adds	r3, #6
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	8b7b      	ldrh	r3, [r7, #26]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d306      	bcc.n	8003b80 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	8b7b      	ldrh	r3, [r7, #26]
 8003b78:	1ad2      	subs	r2, r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	619a      	str	r2, [r3, #24]
 8003b7e:	e002      	b.n	8003b86 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2200      	movs	r2, #0
 8003b84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d123      	bne.n	8003bd6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba8:	83fb      	strh	r3, [r7, #30]
 8003baa:	8bfb      	ldrh	r3, [r7, #30]
 8003bac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bb0:	83fb      	strh	r3, [r7, #30]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	441a      	add	r2, r3
 8003bc0:	8bfb      	ldrh	r3, [r7, #30]
 8003bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11f      	bne.n	8003c20 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	83bb      	strh	r3, [r7, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	8bbb      	ldrh	r3, [r7, #28]
 8003c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c20:	8b7b      	ldrh	r3, [r7, #26]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6959      	ldr	r1, [r3, #20]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	895a      	ldrh	r2, [r3, #10]
 8003c32:	8b7b      	ldrh	r3, [r7, #26]
 8003c34:	f005 f8ca 	bl	8008dcc <USB_ReadPMA>
    }
  }

  return count;
 8003c38:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3720      	adds	r7, #32
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b0a2      	sub	sp, #136	; 0x88
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 81c7 	beq.w	8003fea <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3302      	adds	r3, #2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d907      	bls.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c9c:	1ad2      	subs	r2, r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	619a      	str	r2, [r3, #24]
 8003ca2:	e002      	b.n	8003caa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f040 80b9 	bne.w	8003e26 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d126      	bne.n	8003d0a <HAL_PCD_EP_DB_Transmit+0xc8>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	4413      	add	r3, r2
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	011a      	lsls	r2, r3, #4
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	4413      	add	r3, r2
 8003cde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	e01a      	b.n	8003d40 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d116      	bne.n	8003d40 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	633b      	str	r3, [r7, #48]	; 0x30
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	4413      	add	r3, r2
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	011a      	lsls	r2, r3, #4
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	4413      	add	r3, r2
 8003d34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d126      	bne.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	4413      	add	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	011a      	lsls	r2, r3, #4
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	801a      	strh	r2, [r3, #0]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	e017      	b.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d113      	bne.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x18a>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	4413      	add	r3, r2
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	011a      	lsls	r2, r3, #4
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f006 fbb9 	bl	800a54a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 82d4 	beq.w	800438c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	827b      	strh	r3, [r7, #18]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	441a      	add	r2, r3
 8003e0e:	8a7b      	ldrh	r3, [r7, #18]
 8003e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8013      	strh	r3, [r2, #0]
 8003e24:	e2b2      	b.n	800438c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d021      	beq.n	8003e74 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	441a      	add	r2, r3
 8003e5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 8286 	bne.w	800438c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e88:	441a      	add	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e96:	441a      	add	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d309      	bcc.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb4:	1ad2      	subs	r2, r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	621a      	str	r2, [r3, #32]
 8003eba:	e015      	b.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003ec4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ec8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ed2:	e009      	b.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d155      	bne.n	8003f9c <HAL_PCD_EP_DB_Transmit+0x35a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	4413      	add	r3, r2
 8003f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	011a      	lsls	r2, r3, #4
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	4413      	add	r3, r2
 8003f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
 8003f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d112      	bne.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x302>
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	e047      	b.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f46:	2b3e      	cmp	r3, #62	; 0x3e
 8003f48:	d811      	bhi.n	8003f6e <HAL_PCD_EP_DB_Transmit+0x32c>
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	029b      	lsls	r3, r3, #10
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	e032      	b.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x342>
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f80:	3b01      	subs	r3, #1
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	029b      	lsls	r3, r3, #10
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	801a      	strh	r2, [r3, #0]
 8003f9a:	e01b      	b.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d117      	bne.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x392>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb8:	4413      	add	r3, r2
 8003fba:	643b      	str	r3, [r7, #64]	; 0x40
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	011a      	lsls	r2, r3, #4
 8003fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6959      	ldr	r1, [r3, #20]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	891a      	ldrh	r2, [r3, #8]
 8003fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f004 fead 	bl	8008d42 <USB_WritePMA>
 8003fe8:	e1d0      	b.n	800438c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3306      	adds	r3, #6
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004012:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800401e:	429a      	cmp	r2, r3
 8004020:	d307      	bcc.n	8004032 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	619a      	str	r2, [r3, #24]
 8004030:	e002      	b.n	8004038 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2200      	movs	r2, #0
 8004036:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 80c4 	bne.w	80041ca <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d126      	bne.n	8004098 <HAL_PCD_EP_DB_Transmit+0x456>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004058:	b29b      	uxth	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405e:	4413      	add	r3, r2
 8004060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	011a      	lsls	r2, r3, #4
 8004068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406a:	4413      	add	r3, r2
 800406c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004070:	66bb      	str	r3, [r7, #104]	; 0x68
 8004072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800407c:	b29a      	uxth	r2, r3
 800407e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800408c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004090:	b29a      	uxth	r2, r3
 8004092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004094:	801a      	strh	r2, [r3, #0]
 8004096:	e01a      	b.n	80040ce <HAL_PCD_EP_DB_Transmit+0x48c>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d116      	bne.n	80040ce <HAL_PCD_EP_DB_Transmit+0x48c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	677b      	str	r3, [r7, #116]	; 0x74
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b4:	4413      	add	r3, r2
 80040b6:	677b      	str	r3, [r7, #116]	; 0x74
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	011a      	lsls	r2, r3, #4
 80040be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c0:	4413      	add	r3, r2
 80040c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040c6:	673b      	str	r3, [r7, #112]	; 0x70
 80040c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ca:	2200      	movs	r2, #0
 80040cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d12f      	bne.n	800413c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040f4:	4413      	add	r3, r2
 80040f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	011a      	lsls	r2, r3, #4
 8004100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004104:	4413      	add	r3, r2
 8004106:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800410a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800410e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800411a:	b29a      	uxth	r2, r3
 800411c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004132:	b29a      	uxth	r2, r3
 8004134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004138:	801a      	strh	r2, [r3, #0]
 800413a:	e017      	b.n	800416c <HAL_PCD_EP_DB_Transmit+0x52a>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d113      	bne.n	800416c <HAL_PCD_EP_DB_Transmit+0x52a>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414c:	b29b      	uxth	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004152:	4413      	add	r3, r2
 8004154:	67bb      	str	r3, [r7, #120]	; 0x78
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	011a      	lsls	r2, r3, #4
 800415c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415e:	4413      	add	r3, r2
 8004160:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004164:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004166:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004168:	2200      	movs	r2, #0
 800416a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	4619      	mov	r1, r3
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f006 f9e9 	bl	800a54a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 8104 	bne.w	800438c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	8013      	strh	r3, [r2, #0]
 80041c8:	e0e0      	b.n	800438c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d121      	bne.n	8004218 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	441a      	add	r2, r3
 8004200:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004214:	b29b      	uxth	r3, r3
 8004216:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800421e:	2b01      	cmp	r3, #1
 8004220:	f040 80b4 	bne.w	800438c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800422c:	441a      	add	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800423a:	441a      	add	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	429a      	cmp	r2, r3
 800424a:	d309      	bcc.n	8004260 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004258:	1ad2      	subs	r2, r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	621a      	str	r2, [r3, #32]
 800425e:	e015      	b.n	800428c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004268:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800426c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004276:	e009      	b.n	800428c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2200      	movs	r2, #0
 8004282:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	667b      	str	r3, [r7, #100]	; 0x64
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d155      	bne.n	8004346 <HAL_PCD_EP_DB_Transmit+0x704>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ae:	4413      	add	r3, r2
 80042b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	011a      	lsls	r2, r3, #4
 80042b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ba:	4413      	add	r3, r2
 80042bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80042c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d112      	bne.n	80042ee <HAL_PCD_EP_DB_Transmit+0x6ac>
 80042c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d6:	801a      	strh	r2, [r3, #0]
 80042d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ea:	801a      	strh	r2, [r3, #0]
 80042ec:	e044      	b.n	8004378 <HAL_PCD_EP_DB_Transmit+0x736>
 80042ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f0:	2b3e      	cmp	r3, #62	; 0x3e
 80042f2:	d811      	bhi.n	8004318 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80042f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	657b      	str	r3, [r7, #84]	; 0x54
 80042fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004306:	3301      	adds	r3, #1
 8004308:	657b      	str	r3, [r7, #84]	; 0x54
 800430a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800430c:	b29b      	uxth	r3, r3
 800430e:	029b      	lsls	r3, r3, #10
 8004310:	b29a      	uxth	r2, r3
 8004312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e02f      	b.n	8004378 <HAL_PCD_EP_DB_Transmit+0x736>
 8004318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	657b      	str	r3, [r7, #84]	; 0x54
 800431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432a:	3b01      	subs	r3, #1
 800432c:	657b      	str	r3, [r7, #84]	; 0x54
 800432e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004330:	b29b      	uxth	r3, r3
 8004332:	029b      	lsls	r3, r3, #10
 8004334:	b29b      	uxth	r3, r3
 8004336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800433a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800433e:	b29a      	uxth	r2, r3
 8004340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	e018      	b.n	8004378 <HAL_PCD_EP_DB_Transmit+0x736>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	785b      	ldrb	r3, [r3, #1]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d114      	bne.n	8004378 <HAL_PCD_EP_DB_Transmit+0x736>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435c:	4413      	add	r3, r2
 800435e:	667b      	str	r3, [r7, #100]	; 0x64
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	011a      	lsls	r2, r3, #4
 8004366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004368:	4413      	add	r3, r2
 800436a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800436e:	663b      	str	r3, [r7, #96]	; 0x60
 8004370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004372:	b29a      	uxth	r2, r3
 8004374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004376:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6959      	ldr	r1, [r3, #20]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	895a      	ldrh	r2, [r3, #10]
 8004384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004386:	b29b      	uxth	r3, r3
 8004388:	f004 fcdb 	bl	8008d42 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a6:	823b      	strh	r3, [r7, #16]
 80043a8:	8a3b      	ldrh	r3, [r7, #16]
 80043aa:	f083 0310 	eor.w	r3, r3, #16
 80043ae:	823b      	strh	r3, [r7, #16]
 80043b0:	8a3b      	ldrh	r3, [r7, #16]
 80043b2:	f083 0320 	eor.w	r3, r3, #32
 80043b6:	823b      	strh	r3, [r7, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	8a3b      	ldrh	r3, [r7, #16]
 80043c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d8:	b29b      	uxth	r3, r3
 80043da:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3788      	adds	r7, #136	; 0x88
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b087      	sub	sp, #28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	817b      	strh	r3, [r7, #10]
 80043f4:	4613      	mov	r3, r2
 80043f6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00b      	beq.n	800441c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004404:	897b      	ldrh	r3, [r7, #10]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e009      	b.n	8004430 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800441c:	897a      	ldrh	r2, [r7, #10]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4413      	add	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004430:	893b      	ldrh	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d107      	bne.n	8004446 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	b29a      	uxth	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	80da      	strh	r2, [r3, #6]
 8004444:	e00b      	b.n	800445e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2201      	movs	r2, #1
 800444a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	b29a      	uxth	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	0c1b      	lsrs	r3, r3, #16
 8004458:	b29a      	uxth	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
	...

0800446c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e31d      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800447e:	4b94      	ldr	r3, [pc, #592]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004488:	4b91      	ldr	r3, [pc, #580]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004490:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d07b      	beq.n	8004596 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d006      	beq.n	80044b2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d10f      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d10b      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b2:	4b87      	ldr	r3, [pc, #540]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d06a      	beq.n	8004594 <HAL_RCC_OscConfig+0x128>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d166      	bne.n	8004594 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e2f7      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d106      	bne.n	80044e0 <HAL_RCC_OscConfig+0x74>
 80044d2:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7e      	ldr	r2, [pc, #504]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e02d      	b.n	800453c <HAL_RCC_OscConfig+0xd0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10c      	bne.n	8004502 <HAL_RCC_OscConfig+0x96>
 80044e8:	4b79      	ldr	r3, [pc, #484]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a78      	ldr	r2, [pc, #480]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a75      	ldr	r2, [pc, #468]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80044fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	e01c      	b.n	800453c <HAL_RCC_OscConfig+0xd0>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b05      	cmp	r3, #5
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0xb8>
 800450a:	4b71      	ldr	r3, [pc, #452]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a70      	ldr	r2, [pc, #448]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b6e      	ldr	r3, [pc, #440]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6d      	ldr	r2, [pc, #436]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0xd0>
 8004524:	4b6a      	ldr	r3, [pc, #424]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a69      	ldr	r2, [pc, #420]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b67      	ldr	r3, [pc, #412]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a66      	ldr	r2, [pc, #408]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fd feb8 	bl	80022b8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800454c:	f7fd feb4 	bl	80022b8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e2ad      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800455e:	4b5c      	ldr	r3, [pc, #368]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0xe0>
 800456a:	e014      	b.n	8004596 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fd fea4 	bl	80022b8 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004574:	f7fd fea0 	bl	80022b8 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e299      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004586:	4b52      	ldr	r3, [pc, #328]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x108>
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d05a      	beq.n	8004658 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d005      	beq.n	80045b4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b0c      	cmp	r3, #12
 80045ac:	d119      	bne.n	80045e2 <HAL_RCC_OscConfig+0x176>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d116      	bne.n	80045e2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b4:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_OscConfig+0x160>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e276      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b40      	ldr	r3, [pc, #256]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	493d      	ldr	r1, [pc, #244]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e0:	e03a      	b.n	8004658 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d020      	beq.n	800462c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ea:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <HAL_RCC_OscConfig+0x268>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fd fe62 	bl	80022b8 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f8:	f7fd fe5e 	bl	80022b8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e257      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800460a:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	492a      	ldr	r1, [pc, #168]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 8004626:	4313      	orrs	r3, r2
 8004628:	604b      	str	r3, [r1, #4]
 800462a:	e015      	b.n	8004658 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462c:	4b29      	ldr	r3, [pc, #164]	; (80046d4 <HAL_RCC_OscConfig+0x268>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7fd fe41 	bl	80022b8 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463a:	f7fd fe3d 	bl	80022b8 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e236      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800464c:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80b8 	beq.w	80047d6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d170      	bne.n	800474e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800466c:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_OscConfig+0x218>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e21a      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004690:	429a      	cmp	r2, r3
 8004692:	d921      	bls.n	80046d8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fc3b 	bl	8004f14 <RCC_SetFlashLatencyFromMSIRange>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e208      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	4906      	ldr	r1, [pc, #24]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	4901      	ldr	r1, [pc, #4]	; (80046d0 <HAL_RCC_OscConfig+0x264>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
 80046ce:	e020      	b.n	8004712 <HAL_RCC_OscConfig+0x2a6>
 80046d0:	40023800 	.word	0x40023800
 80046d4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d8:	4b99      	ldr	r3, [pc, #612]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	4996      	ldr	r1, [pc, #600]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ea:	4b95      	ldr	r3, [pc, #596]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	061b      	lsls	r3, r3, #24
 80046f8:	4991      	ldr	r1, [pc, #580]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fc06 	bl	8004f14 <RCC_SetFlashLatencyFromMSIRange>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e1d3      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	0b5b      	lsrs	r3, r3, #13
 8004718:	3301      	adds	r3, #1
 800471a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004722:	4a87      	ldr	r2, [pc, #540]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004724:	6892      	ldr	r2, [r2, #8]
 8004726:	0912      	lsrs	r2, r2, #4
 8004728:	f002 020f 	and.w	r2, r2, #15
 800472c:	4985      	ldr	r1, [pc, #532]	; (8004944 <HAL_RCC_OscConfig+0x4d8>)
 800472e:	5c8a      	ldrb	r2, [r1, r2]
 8004730:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004732:	4a85      	ldr	r2, [pc, #532]	; (8004948 <HAL_RCC_OscConfig+0x4dc>)
 8004734:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004736:	4b85      	ldr	r3, [pc, #532]	; (800494c <HAL_RCC_OscConfig+0x4e0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fd70 	bl	8002220 <HAL_InitTick>
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d045      	beq.n	80047d6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	e1b5      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d029      	beq.n	80047aa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004756:	4b7e      	ldr	r3, [pc, #504]	; (8004950 <HAL_RCC_OscConfig+0x4e4>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fd fdac 	bl	80022b8 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004764:	f7fd fda8 	bl	80022b8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e1a1      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004776:	4b72      	ldr	r3, [pc, #456]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004782:	4b6f      	ldr	r3, [pc, #444]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	496c      	ldr	r1, [pc, #432]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004794:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	4967      	ldr	r1, [pc, #412]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047aa:	4b69      	ldr	r3, [pc, #420]	; (8004950 <HAL_RCC_OscConfig+0x4e4>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fd fd82 	bl	80022b8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047b8:	f7fd fd7e 	bl	80022b8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e177      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047ca:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d030      	beq.n	8004844 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ea:	4b5a      	ldr	r3, [pc, #360]	; (8004954 <HAL_RCC_OscConfig+0x4e8>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f0:	f7fd fd62 	bl	80022b8 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fd fd5e 	bl	80022b8 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e157      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800480a:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 800480c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x38c>
 8004816:	e015      	b.n	8004844 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004818:	4b4e      	ldr	r3, [pc, #312]	; (8004954 <HAL_RCC_OscConfig+0x4e8>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fd fd4b 	bl	80022b8 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004826:	f7fd fd47 	bl	80022b8 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e140      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f0      	bne.n	8004826 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80b5 	beq.w	80049bc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004852:	2300      	movs	r3, #0
 8004854:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004856:	4b3a      	ldr	r3, [pc, #232]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10d      	bne.n	800487e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	4b37      	ldr	r3, [pc, #220]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	4a36      	ldr	r2, [pc, #216]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486c:	6253      	str	r3, [r2, #36]	; 0x24
 800486e:	4b34      	ldr	r3, [pc, #208]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800487a:	2301      	movs	r3, #1
 800487c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487e:	4b36      	ldr	r3, [pc, #216]	; (8004958 <HAL_RCC_OscConfig+0x4ec>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d118      	bne.n	80048bc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800488a:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCC_OscConfig+0x4ec>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <HAL_RCC_OscConfig+0x4ec>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004896:	f7fd fd0f 	bl	80022b8 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489e:	f7fd fd0b 	bl	80022b8 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b64      	cmp	r3, #100	; 0x64
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e104      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b0:	4b29      	ldr	r3, [pc, #164]	; (8004958 <HAL_RCC_OscConfig+0x4ec>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d106      	bne.n	80048d2 <HAL_RCC_OscConfig+0x466>
 80048c4:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80048c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c8:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80048ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ce:	6353      	str	r3, [r2, #52]	; 0x34
 80048d0:	e02d      	b.n	800492e <HAL_RCC_OscConfig+0x4c2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x488>
 80048da:	4b19      	ldr	r3, [pc, #100]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80048e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e4:	6353      	str	r3, [r2, #52]	; 0x34
 80048e6:	4b16      	ldr	r3, [pc, #88]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	4a15      	ldr	r2, [pc, #84]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80048ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048f0:	6353      	str	r3, [r2, #52]	; 0x34
 80048f2:	e01c      	b.n	800492e <HAL_RCC_OscConfig+0x4c2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d10c      	bne.n	8004916 <HAL_RCC_OscConfig+0x4aa>
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 80048fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004900:	4a0f      	ldr	r2, [pc, #60]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004906:	6353      	str	r3, [r2, #52]	; 0x34
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	4a0c      	ldr	r2, [pc, #48]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 800490e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004912:	6353      	str	r3, [r2, #52]	; 0x34
 8004914:	e00b      	b.n	800492e <HAL_RCC_OscConfig+0x4c2>
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491a:	4a09      	ldr	r2, [pc, #36]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 800491c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004920:	6353      	str	r3, [r2, #52]	; 0x34
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004926:	4a06      	ldr	r2, [pc, #24]	; (8004940 <HAL_RCC_OscConfig+0x4d4>)
 8004928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800492c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d024      	beq.n	8004980 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004936:	f7fd fcbf 	bl	80022b8 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800493c:	e019      	b.n	8004972 <HAL_RCC_OscConfig+0x506>
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800
 8004944:	0800aa64 	.word	0x0800aa64
 8004948:	20000288 	.word	0x20000288
 800494c:	2000028c 	.word	0x2000028c
 8004950:	42470020 	.word	0x42470020
 8004954:	42470680 	.word	0x42470680
 8004958:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fd fcac 	bl	80022b8 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e0a3      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004972:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0ee      	beq.n	800495c <HAL_RCC_OscConfig+0x4f0>
 800497e:	e014      	b.n	80049aa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004980:	f7fd fc9a 	bl	80022b8 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004986:	e00a      	b.n	800499e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004988:	f7fd fc96 	bl	80022b8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e08d      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800499e:	4b49      	ldr	r3, [pc, #292]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1ee      	bne.n	8004988 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049aa:	7ffb      	ldrb	r3, [r7, #31]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b0:	4b44      	ldr	r3, [pc, #272]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	4a43      	ldr	r2, [pc, #268]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 80049b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ba:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d079      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d056      	beq.n	8004a78 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d13b      	bne.n	8004a4a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d2:	4b3d      	ldr	r3, [pc, #244]	; (8004ac8 <HAL_RCC_OscConfig+0x65c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fd fc6e 	bl	80022b8 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fd fc6a 	bl	80022b8 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e063      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049f2:	4b34      	ldr	r3, [pc, #208]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049fe:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	4319      	orrs	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	430b      	orrs	r3, r1
 8004a16:	492b      	ldr	r1, [pc, #172]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <HAL_RCC_OscConfig+0x65c>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fd fc49 	bl	80022b8 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2a:	f7fd fc45 	bl	80022b8 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e03e      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a3c:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x5be>
 8004a48:	e036      	b.n	8004ab8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4a:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <HAL_RCC_OscConfig+0x65c>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fd fc32 	bl	80022b8 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fd fc2e 	bl	80022b8 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e027      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a6a:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x5ec>
 8004a76:	e01f      	b.n	8004ab8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e01a      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <HAL_RCC_OscConfig+0x658>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d10d      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	42470060 	.word	0x42470060

08004acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e11a      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae0:	4b8f      	ldr	r3, [pc, #572]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d919      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d105      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x34>
 8004af4:	4b8a      	ldr	r3, [pc, #552]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a89      	ldr	r2, [pc, #548]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	4b87      	ldr	r3, [pc, #540]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f023 0201 	bic.w	r2, r3, #1
 8004b08:	4985      	ldr	r1, [pc, #532]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b10:	4b83      	ldr	r3, [pc, #524]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e0f9      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2e:	4b7d      	ldr	r3, [pc, #500]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	497a      	ldr	r1, [pc, #488]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 808e 	beq.w	8004c6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d107      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b56:	4b73      	ldr	r3, [pc, #460]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d121      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0d7      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d115      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0cb      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b86:	4b67      	ldr	r3, [pc, #412]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0bf      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b96:	4b63      	ldr	r3, [pc, #396]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e0b7      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f023 0203 	bic.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	495c      	ldr	r1, [pc, #368]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb8:	f7fd fb7e 	bl	80022b8 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d112      	bne.n	8004bec <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc8:	f7fd fb76 	bl	80022b8 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e09b      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bde:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d1ee      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xfc>
 8004bea:	e03e      	b.n	8004c6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d112      	bne.n	8004c1a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf6:	f7fd fb5f 	bl	80022b8 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e084      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c0c:	4b45      	ldr	r3, [pc, #276]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b0c      	cmp	r3, #12
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0x12a>
 8004c18:	e027      	b.n	8004c6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d11d      	bne.n	8004c5e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c22:	e00a      	b.n	8004c3a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c24:	f7fd fb48 	bl	80022b8 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e06d      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c3a:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d1ee      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x158>
 8004c46:	e010      	b.n	8004c6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c48:	f7fd fb36 	bl	80022b8 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e05b      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ee      	bne.n	8004c48 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c6a:	4b2d      	ldr	r3, [pc, #180]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d219      	bcs.n	8004cac <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d105      	bne.n	8004c8a <HAL_RCC_ClockConfig+0x1be>
 8004c7e:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a27      	ldr	r2, [pc, #156]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004c84:	f043 0304 	orr.w	r3, r3, #4
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	4923      	ldr	r1, [pc, #140]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <HAL_RCC_ClockConfig+0x254>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e034      	b.n	8004d16 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4917      	ldr	r1, [pc, #92]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	490f      	ldr	r1, [pc, #60]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cea:	f000 f823 	bl	8004d34 <HAL_RCC_GetSysClockFreq>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <HAL_RCC_ClockConfig+0x258>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	490b      	ldr	r1, [pc, #44]	; (8004d28 <HAL_RCC_ClockConfig+0x25c>)
 8004cfc:	5ccb      	ldrb	r3, [r1, r3]
 8004cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <HAL_RCC_ClockConfig+0x260>)
 8004d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d06:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <HAL_RCC_ClockConfig+0x264>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fd fa88 	bl	8002220 <HAL_InitTick>
 8004d10:	4603      	mov	r3, r0
 8004d12:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d14:	7afb      	ldrb	r3, [r7, #11]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023c00 	.word	0x40023c00
 8004d24:	40023800 	.word	0x40023800
 8004d28:	0800aa64 	.word	0x0800aa64
 8004d2c:	20000288 	.word	0x20000288
 8004d30:	2000028c 	.word	0x2000028c

08004d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d38:	b08e      	sub	sp, #56	; 0x38
 8004d3a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004d3c:	4b58      	ldr	r3, [pc, #352]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	d00d      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x34>
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	f200 8092 	bhi.w	8004e76 <HAL_RCC_GetSysClockFreq+0x142>
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x28>
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x2e>
 8004d5a:	e08c      	b.n	8004e76 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d5c:	4b51      	ldr	r3, [pc, #324]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x170>)
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d60:	e097      	b.n	8004e92 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d62:	4b51      	ldr	r3, [pc, #324]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x174>)
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d66:	e094      	b.n	8004e92 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	0c9b      	lsrs	r3, r3, #18
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	4b4e      	ldr	r3, [pc, #312]	; (8004eac <HAL_RCC_GetSysClockFreq+0x178>)
 8004d72:	5c9b      	ldrb	r3, [r3, r2]
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	0d9b      	lsrs	r3, r3, #22
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d82:	4b47      	ldr	r3, [pc, #284]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d021      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	2200      	movs	r2, #0
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	61fa      	str	r2, [r7, #28]
 8004d96:	4b44      	ldr	r3, [pc, #272]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x174>)
 8004d98:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004d9c:	464a      	mov	r2, r9
 8004d9e:	fb03 f202 	mul.w	r2, r3, r2
 8004da2:	2300      	movs	r3, #0
 8004da4:	4644      	mov	r4, r8
 8004da6:	fb04 f303 	mul.w	r3, r4, r3
 8004daa:	4413      	add	r3, r2
 8004dac:	4a3e      	ldr	r2, [pc, #248]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x174>)
 8004dae:	4644      	mov	r4, r8
 8004db0:	fba4 0102 	umull	r0, r1, r4, r2
 8004db4:	440b      	add	r3, r1
 8004db6:	4619      	mov	r1, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	2200      	movs	r2, #0
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	617a      	str	r2, [r7, #20]
 8004dc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dc4:	f7fb f9da 	bl	800017c <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd0:	e04e      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	469a      	mov	sl, r3
 8004dd8:	4693      	mov	fp, r2
 8004dda:	4652      	mov	r2, sl
 8004ddc:	465b      	mov	r3, fp
 8004dde:	f04f 0000 	mov.w	r0, #0
 8004de2:	f04f 0100 	mov.w	r1, #0
 8004de6:	0159      	lsls	r1, r3, #5
 8004de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dec:	0150      	lsls	r0, r2, #5
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	ebb2 080a 	subs.w	r8, r2, sl
 8004df6:	eb63 090b 	sbc.w	r9, r3, fp
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e0e:	ebb2 0408 	subs.w	r4, r2, r8
 8004e12:	eb63 0509 	sbc.w	r5, r3, r9
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	00eb      	lsls	r3, r5, #3
 8004e20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e24:	00e2      	lsls	r2, r4, #3
 8004e26:	4614      	mov	r4, r2
 8004e28:	461d      	mov	r5, r3
 8004e2a:	eb14 030a 	adds.w	r3, r4, sl
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	eb45 030b 	adc.w	r3, r5, fp
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e42:	4629      	mov	r1, r5
 8004e44:	028b      	lsls	r3, r1, #10
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004e50:	4601      	mov	r1, r0
 8004e52:	028a      	lsls	r2, r1, #10
 8004e54:	4610      	mov	r0, r2
 8004e56:	4619      	mov	r1, r3
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	60fa      	str	r2, [r7, #12]
 8004e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e64:	f7fb f98a 	bl	800017c <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e74:	e00d      	b.n	8004e92 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	3301      	adds	r3, #1
 8004e86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3738      	adds	r7, #56	; 0x38
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	016e3600 	.word	0x016e3600
 8004eac:	0800aa58 	.word	0x0800aa58

08004eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	20000288 	.word	0x20000288

08004ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ec8:	f7ff fff2 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4903      	ldr	r1, [pc, #12]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	0800aa74 	.word	0x0800aa74

08004eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ef0:	f7ff ffde 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0adb      	lsrs	r3, r3, #11
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4903      	ldr	r1, [pc, #12]	; (8004f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	0800aa74 	.word	0x0800aa74

08004f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f20:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d12c      	bne.n	8004f86 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f2c:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004f38:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	e016      	b.n	8004f72 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f44:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	6253      	str	r3, [r2, #36]	; 0x24
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004f5c:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004f64:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f66:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f70:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004f78:	d105      	bne.n	8004f86 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f80:	d101      	bne.n	8004f86 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004f82:	2301      	movs	r3, #1
 8004f84:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f92:	f043 0304 	orr.w	r3, r3, #4
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f023 0201 	bic.w	r2, r3, #1
 8004fa0:	490b      	ldr	r1, [pc, #44]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fa8:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d001      	beq.n	8004fba <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40007000 	.word	0x40007000
 8004fd0:	40023c00 	.word	0x40023c00

08004fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e031      	b.n	800504a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc fffe 	bl	8001ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fb62 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d001      	beq.n	800506c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e03a      	b.n	80050e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d00e      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x58>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <HAL_TIM_Base_Start_IT+0x98>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x58>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a14      	ldr	r2, [pc, #80]	; (80050f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x58>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d111      	bne.n	80050d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b06      	cmp	r3, #6
 80050bc:	d010      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ce:	e007      	b.n	80050e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40010800 	.word	0x40010800

080050f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	f241 1311 	movw	r3, #4369	; 0x1111
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d107      	bne.n	8005130 <HAL_TIM_Base_Stop_IT+0x38>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0201 	bic.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e08f      	b.n	8005278 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fc fee5 	bl	8001f3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005188:	f023 0307 	bic.w	r3, r3, #7
 800518c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fa9f 	bl	80056dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	4313      	orrs	r3, r2
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051e4:	f023 030c 	bic.w	r3, r3, #12
 80051e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	4313      	orrs	r3, r2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	011a      	lsls	r2, r3, #4
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	031b      	lsls	r3, r3, #12
 8005214:	4313      	orrs	r3, r2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	4313      	orrs	r3, r2
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005290:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8005298:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_TIM_Encoder_Start+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d001      	beq.n	80052aa <HAL_TIM_Encoder_Start+0x2a>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e050      	b.n	800534c <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80052b2:	e01c      	b.n	80052ee <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d109      	bne.n	80052ce <HAL_TIM_Encoder_Start+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d001      	beq.n	80052c4 <HAL_TIM_Encoder_Start+0x44>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e043      	b.n	800534c <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80052cc:	e00f      	b.n	80052ee <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d102      	bne.n	80052da <HAL_TIM_Encoder_Start+0x5a>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052d4:	7bbb      	ldrb	r3, [r7, #14]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d001      	beq.n	80052de <HAL_TIM_Encoder_Start+0x5e>
    {
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e036      	b.n	800534c <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_TIM_Encoder_Start+0x7c>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d008      	beq.n	800530c <HAL_TIM_Encoder_Start+0x8c>
 80052fa:	e00f      	b.n	800531c <HAL_TIM_Encoder_Start+0x9c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2201      	movs	r2, #1
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fae1 	bl	80058cc <TIM_CCxChannelCmd>
      break;
 800530a:	e016      	b.n	800533a <HAL_TIM_Encoder_Start+0xba>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2201      	movs	r2, #1
 8005312:	2104      	movs	r1, #4
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fad9 	bl	80058cc <TIM_CCxChannelCmd>
      break;
 800531a:	e00e      	b.n	800533a <HAL_TIM_Encoder_Start+0xba>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fad1 	bl	80058cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	2104      	movs	r1, #4
 8005332:	4618      	mov	r0, r3
 8005334:	f000 faca 	bl	80058cc <TIM_CCxChannelCmd>
      break;
 8005338:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b02      	cmp	r3, #2
 8005368:	d122      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b02      	cmp	r3, #2
 8005376:	d11b      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0202 	mvn.w	r2, #2
 8005380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f985 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 800539c:	e005      	b.n	80053aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f978 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f987 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d122      	bne.n	8005404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d11b      	bne.n	8005404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0204 	mvn.w	r2, #4
 80053d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2202      	movs	r2, #2
 80053da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f95b 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 80053f0:	e005      	b.n	80053fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f94e 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f95d 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b08      	cmp	r3, #8
 8005410:	d122      	bne.n	8005458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b08      	cmp	r3, #8
 800541e:	d11b      	bne.n	8005458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0208 	mvn.w	r2, #8
 8005428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2204      	movs	r2, #4
 800542e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f931 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 8005444:	e005      	b.n	8005452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f924 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f933 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b10      	cmp	r3, #16
 8005464:	d122      	bne.n	80054ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b10      	cmp	r3, #16
 8005472:	d11b      	bne.n	80054ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0210 	mvn.w	r2, #16
 800547c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2208      	movs	r2, #8
 8005482:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f907 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 8005498:	e005      	b.n	80054a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f8fa 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f909 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d10e      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d107      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0201 	mvn.w	r2, #1
 80054d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fb fa3a 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d10e      	bne.n	8005504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d107      	bne.n	8005504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8e3 	bl	80056ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIM_ConfigClockSource+0x18>
 8005520:	2302      	movs	r3, #2
 8005522:	e0b3      	b.n	800568c <HAL_TIM_ConfigClockSource+0x180>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005542:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800554a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555c:	d03e      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0xd0>
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005562:	f200 8087 	bhi.w	8005674 <HAL_TIM_ConfigClockSource+0x168>
 8005566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556a:	f000 8085 	beq.w	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d87f      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 8005574:	2b70      	cmp	r3, #112	; 0x70
 8005576:	d01a      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xa2>
 8005578:	2b70      	cmp	r3, #112	; 0x70
 800557a:	d87b      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 800557c:	2b60      	cmp	r3, #96	; 0x60
 800557e:	d050      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x116>
 8005580:	2b60      	cmp	r3, #96	; 0x60
 8005582:	d877      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 8005584:	2b50      	cmp	r3, #80	; 0x50
 8005586:	d03c      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0xf6>
 8005588:	2b50      	cmp	r3, #80	; 0x50
 800558a:	d873      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d058      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x136>
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d86f      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 8005594:	2b30      	cmp	r3, #48	; 0x30
 8005596:	d064      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x156>
 8005598:	2b30      	cmp	r3, #48	; 0x30
 800559a:	d86b      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 800559c:	2b20      	cmp	r3, #32
 800559e:	d060      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x156>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d867      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d05c      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x156>
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d05a      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80055ac:	e062      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6899      	ldr	r1, [r3, #8]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f000 f966 	bl	800588e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	609a      	str	r2, [r3, #8]
      break;
 80055da:	e04e      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f000 f94f 	bl	800588e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055fe:	609a      	str	r2, [r3, #8]
      break;
 8005600:	e03b      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6859      	ldr	r1, [r3, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	461a      	mov	r2, r3
 8005610:	f000 f8c6 	bl	80057a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2150      	movs	r1, #80	; 0x50
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f91d 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005620:	e02b      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6859      	ldr	r1, [r3, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	461a      	mov	r2, r3
 8005630:	f000 f8e4 	bl	80057fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2160      	movs	r1, #96	; 0x60
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f90d 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005640:	e01b      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	461a      	mov	r2, r3
 8005650:	f000 f8a6 	bl	80057a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2140      	movs	r1, #64	; 0x40
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f8fd 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8005660:	e00b      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f000 f8f4 	bl	800585a <TIM_ITRx_SetConfig>
        break;
 8005672:	e002      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005678:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d007      	beq.n	8005704 <TIM_Base_SetConfig+0x28>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a25      	ldr	r2, [pc, #148]	; (800578c <TIM_Base_SetConfig+0xb0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_Base_SetConfig+0x28>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a24      	ldr	r2, [pc, #144]	; (8005790 <TIM_Base_SetConfig+0xb4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d013      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1a      	ldr	r2, [pc, #104]	; (800578c <TIM_Base_SetConfig+0xb0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00f      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a19      	ldr	r2, [pc, #100]	; (8005790 <TIM_Base_SetConfig+0xb4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00b      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a18      	ldr	r2, [pc, #96]	; (8005794 <TIM_Base_SetConfig+0xb8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a17      	ldr	r2, [pc, #92]	; (8005798 <TIM_Base_SetConfig+0xbc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a16      	ldr	r2, [pc, #88]	; (800579c <TIM_Base_SetConfig+0xc0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d108      	bne.n	8005758 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	615a      	str	r2, [r3, #20]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40010800 	.word	0x40010800
 8005798:	40010c00 	.word	0x40010c00
 800579c:	40011000 	.word	0x40011000

080057a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f023 030a 	bic.w	r3, r3, #10
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f023 0210 	bic.w	r2, r3, #16
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005826:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	031b      	lsls	r3, r3, #12
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005838:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr

0800585a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	f043 0307 	orr.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800588e:	b480      	push	{r7}
 8005890:	b087      	sub	sp, #28
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	021a      	lsls	r2, r3, #8
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	609a      	str	r2, [r3, #8]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	2201      	movs	r2, #1
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	43db      	mvns	r3, r3
 80058ee:	401a      	ands	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1a      	ldr	r2, [r3, #32]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	fa01 f303 	lsl.w	r3, r1, r3
 8005904:	431a      	orrs	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	621a      	str	r2, [r3, #32]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e046      	b.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d00e      	beq.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a13      	ldr	r2, [pc, #76]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d009      	beq.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a12      	ldr	r2, [pc, #72]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d004      	beq.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a10      	ldr	r2, [pc, #64]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d10c      	bne.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4313      	orrs	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40010800 	.word	0x40010800

080059d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e03f      	b.n	8005a62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fc fb88 	bl	800210c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2224      	movs	r2, #36	; 0x24
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fba9 	bl	800616c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695a      	ldr	r2, [r3, #20]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	4613      	mov	r3, r2
 8005a76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d11d      	bne.n	8005ac0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_UART_Receive_IT+0x26>
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e016      	b.n	8005ac2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Receive_IT+0x38>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e00f      	b.n	8005ac2 <HAL_UART_Receive_IT+0x58>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f9cf 	bl	8005e5a <UART_Start_Receive_IT>
 8005abc:	4603      	mov	r3, r0
 8005abe:	e000      	b.n	8005ac2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
  }
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	; 0x28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10d      	bne.n	8005b1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_UART_IRQHandler+0x52>
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa7f 	bl	800601a <UART_Receive_IT>
      return;
 8005b1c:	e17b      	b.n	8005e16 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80b1 	beq.w	8005c88 <HAL_UART_IRQHandler+0x1bc>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <HAL_UART_IRQHandler+0x70>
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80a6 	beq.w	8005c88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_UART_IRQHandler+0x90>
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	f043 0201 	orr.w	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_UART_IRQHandler+0xb0>
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f043 0202 	orr.w	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_UART_IRQHandler+0xd0>
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	f043 0204 	orr.w	r2, r3, #4
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00f      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xfa>
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <HAL_UART_IRQHandler+0xee>
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f043 0208 	orr.w	r2, r3, #8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 811e 	beq.w	8005e0c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <HAL_UART_IRQHandler+0x11e>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fa18 	bl	800601a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	bf0c      	ite	eq
 8005bf8:	2301      	moveq	r3, #1
 8005bfa:	2300      	movne	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <HAL_UART_IRQHandler+0x146>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d031      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f95a 	bl	8005ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d123      	bne.n	8005c6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d013      	beq.n	8005c66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	4a76      	ldr	r2, [pc, #472]	; (8005e1c <HAL_UART_IRQHandler+0x350>)
 8005c44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fc fcaa 	bl	80025a4 <HAL_DMA_Abort_IT>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d016      	beq.n	8005c84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c64:	e00e      	b.n	8005c84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f8e3 	bl	8005e32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	e00a      	b.n	8005c84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f8df 	bl	8005e32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	e006      	b.n	8005c84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f8db 	bl	8005e32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c82:	e0c3      	b.n	8005e0c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c84:	bf00      	nop
    return;
 8005c86:	e0c1      	b.n	8005e0c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	f040 80a1 	bne.w	8005dd4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 809b 	beq.w	8005dd4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8095 	beq.w	8005dd4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d14e      	bne.n	8005d6c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005cd8:	8a3b      	ldrh	r3, [r7, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 8098 	beq.w	8005e10 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ce4:	8a3a      	ldrh	r2, [r7, #16]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	f080 8092 	bcs.w	8005e10 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	8a3a      	ldrh	r2, [r7, #16]
 8005cf0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d02b      	beq.n	8005d54 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d0a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0210 	bic.w	r2, r2, #16
 8005d48:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fc fbeb 	bl	800252a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f86d 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d6a:	e051      	b.n	8005e10 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d047      	beq.n	8005e14 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005d84:	8a7b      	ldrh	r3, [r7, #18]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d044      	beq.n	8005e14 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d98:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695a      	ldr	r2, [r3, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0210 	bic.w	r2, r2, #16
 8005dc6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dc8:	8a7b      	ldrh	r3, [r7, #18]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f839 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dd2:	e01f      	b.n	8005e14 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d008      	beq.n	8005df0 <HAL_UART_IRQHandler+0x324>
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f8af 	bl	8005f4c <UART_Transmit_IT>
    return;
 8005dee:	e012      	b.n	8005e16 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00d      	beq.n	8005e16 <HAL_UART_IRQHandler+0x34a>
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f8f0 	bl	8005fea <UART_EndTransmit_IT>
    return;
 8005e0a:	e004      	b.n	8005e16 <HAL_UART_IRQHandler+0x34a>
    return;
 8005e0c:	bf00      	nop
 8005e0e:	e002      	b.n	8005e16 <HAL_UART_IRQHandler+0x34a>
      return;
 8005e10:	bf00      	nop
 8005e12:	e000      	b.n	8005e16 <HAL_UART_IRQHandler+0x34a>
      return;
 8005e14:	bf00      	nop
  }
}
 8005e16:	3728      	adds	r7, #40	; 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	08005f25 	.word	0x08005f25

08005e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bc80      	pop	{r7}
 8005e30:	4770      	bx	lr

08005e32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	4613      	mov	r3, r2
 8005e66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	88fa      	ldrh	r2, [r7, #6]
 8005e72:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2222      	movs	r2, #34	; 0x22
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e9e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695a      	ldr	r2, [r3, #20]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0201 	orr.w	r2, r2, #1
 8005eae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0220 	orr.w	r2, r2, #32
 8005ebe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ee2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d107      	bne.n	8005f0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0210 	bic.w	r2, r2, #16
 8005f0a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr

08005f24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff ff77 	bl	8005e32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b21      	cmp	r3, #33	; 0x21
 8005f5e:	d13e      	bne.n	8005fde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f68:	d114      	bne.n	8005f94 <UART_Transmit_IT+0x48>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d110      	bne.n	8005f94 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]
 8005f92:	e008      	b.n	8005fa6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	1c59      	adds	r1, r3, #1
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6211      	str	r1, [r2, #32]
 8005f9e:	781a      	ldrb	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10f      	bne.n	8005fda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006000:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff ff08 	bl	8005e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b086      	sub	sp, #24
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b22      	cmp	r3, #34	; 0x22
 800602c:	f040 8099 	bne.w	8006162 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	d117      	bne.n	800606a <UART_Receive_IT+0x50>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d113      	bne.n	800606a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006058:	b29a      	uxth	r2, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	1c9a      	adds	r2, r3, #2
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	; 0x28
 8006068:	e026      	b.n	80060b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607c:	d007      	beq.n	800608e <UART_Receive_IT+0x74>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <UART_Receive_IT+0x82>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	b2da      	uxtb	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e008      	b.n	80060ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4619      	mov	r1, r3
 80060c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d148      	bne.n	800615e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0220 	bic.w	r2, r2, #32
 80060da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	2b01      	cmp	r3, #1
 800610a:	d123      	bne.n	8006154 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0210 	bic.w	r2, r2, #16
 8006120:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b10      	cmp	r3, #16
 800612e:	d10a      	bne.n	8006146 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff fe79 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
 8006152:	e002      	b.n	800615a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fb fd07 	bl	8001b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e002      	b.n	8006164 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006162:	2302      	movs	r3, #2
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80061ac:	f023 030c 	bic.w	r3, r3, #12
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	430b      	orrs	r3, r1
 80061b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a55      	ldr	r2, [pc, #340]	; (800632c <UART_SetConfig+0x1c0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d103      	bne.n	80061e2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061da:	f7fe fe87 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	e002      	b.n	80061e8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061e2:	f7fe fe6f 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 80061e6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f0:	d14c      	bne.n	800628c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009a      	lsls	r2, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	4a49      	ldr	r2, [pc, #292]	; (8006330 <UART_SetConfig+0x1c4>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	0119      	lsls	r1, r3, #4
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009a      	lsls	r2, r3, #2
 800621c:	441a      	add	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	fbb2 f2f3 	udiv	r2, r2, r3
 8006228:	4b41      	ldr	r3, [pc, #260]	; (8006330 <UART_SetConfig+0x1c4>)
 800622a:	fba3 0302 	umull	r0, r3, r3, r2
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	2064      	movs	r0, #100	; 0x64
 8006232:	fb00 f303 	mul.w	r3, r0, r3
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	3332      	adds	r3, #50	; 0x32
 800623c:	4a3c      	ldr	r2, [pc, #240]	; (8006330 <UART_SetConfig+0x1c4>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800624a:	4419      	add	r1, r3
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009a      	lsls	r2, r3, #2
 8006256:	441a      	add	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006262:	4b33      	ldr	r3, [pc, #204]	; (8006330 <UART_SetConfig+0x1c4>)
 8006264:	fba3 0302 	umull	r0, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	2064      	movs	r0, #100	; 0x64
 800626c:	fb00 f303 	mul.w	r3, r0, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	3332      	adds	r3, #50	; 0x32
 8006276:	4a2e      	ldr	r2, [pc, #184]	; (8006330 <UART_SetConfig+0x1c4>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	f003 0207 	and.w	r2, r3, #7
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	440a      	add	r2, r1
 8006288:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800628a:	e04a      	b.n	8006322 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009a      	lsls	r2, r3, #2
 8006296:	441a      	add	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a2:	4a23      	ldr	r2, [pc, #140]	; (8006330 <UART_SetConfig+0x1c4>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	0119      	lsls	r1, r3, #4
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009a      	lsls	r2, r3, #2
 80062b6:	441a      	add	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	fbb2 f2f3 	udiv	r2, r2, r3
 80062c2:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <UART_SetConfig+0x1c4>)
 80062c4:	fba3 0302 	umull	r0, r3, r3, r2
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	2064      	movs	r0, #100	; 0x64
 80062cc:	fb00 f303 	mul.w	r3, r0, r3
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	3332      	adds	r3, #50	; 0x32
 80062d6:	4a16      	ldr	r2, [pc, #88]	; (8006330 <UART_SetConfig+0x1c4>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062e2:	4419      	add	r1, r3
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009a      	lsls	r2, r3, #2
 80062ee:	441a      	add	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80062fa:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <UART_SetConfig+0x1c4>)
 80062fc:	fba3 0302 	umull	r0, r3, r3, r2
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	2064      	movs	r0, #100	; 0x64
 8006304:	fb00 f303 	mul.w	r3, r0, r3
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	3332      	adds	r3, #50	; 0x32
 800630e:	4a08      	ldr	r2, [pc, #32]	; (8006330 <UART_SetConfig+0x1c4>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	f003 020f 	and.w	r2, r3, #15
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	440a      	add	r2, r1
 8006320:	609a      	str	r2, [r3, #8]
}
 8006322:	bf00      	nop
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40013800 	.word	0x40013800
 8006330:	51eb851f 	.word	0x51eb851f

08006334 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006344:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006348:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006368:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800636c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	b29b      	uxth	r3, r3
 800637a:	43db      	mvns	r3, r3
 800637c:	b29b      	uxth	r3, r3
 800637e:	4013      	ands	r3, r2
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr

08006394 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006394:	b084      	sub	sp, #16
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	f107 0014 	add.w	r0, r7, #20
 80063a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	b004      	add	sp, #16
 80063d2:	4770      	bx	lr

080063d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b09b      	sub	sp, #108	; 0x6c
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	78db      	ldrb	r3, [r3, #3]
 8006402:	2b03      	cmp	r3, #3
 8006404:	d81f      	bhi.n	8006446 <USB_ActivateEndpoint+0x72>
 8006406:	a201      	add	r2, pc, #4	; (adr r2, 800640c <USB_ActivateEndpoint+0x38>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	0800641d 	.word	0x0800641d
 8006410:	08006439 	.word	0x08006439
 8006414:	0800644f 	.word	0x0800644f
 8006418:	0800642b 	.word	0x0800642b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800641c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006424:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006428:	e012      	b.n	8006450 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800642a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800642e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006432:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006436:	e00b      	b.n	8006450 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006438:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800643c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006440:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006444:	e004      	b.n	8006450 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800644c:	e000      	b.n	8006450 <USB_ActivateEndpoint+0x7c>
      break;
 800644e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006488:	b29a      	uxth	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	4313      	orrs	r3, r2
 8006492:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	441a      	add	r2, r3
 80064a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80064a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	7b1b      	ldrb	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f040 8149 	bne.w	8006754 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 8084 	beq.w	80065d4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	88db      	ldrh	r3, [r3, #6]
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	81fb      	strh	r3, [r7, #14]
 800650e:	89fb      	ldrh	r3, [r7, #14]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <USB_ActivateEndpoint+0x17c>
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	81bb      	strh	r3, [r7, #12]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	89bb      	ldrh	r3, [r7, #12]
 800653c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006548:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	78db      	ldrb	r3, [r3, #3]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d020      	beq.n	800659a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656e:	813b      	strh	r3, [r7, #8]
 8006570:	893b      	ldrh	r3, [r7, #8]
 8006572:	f083 0320 	eor.w	r3, r3, #32
 8006576:	813b      	strh	r3, [r7, #8]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	893b      	ldrh	r3, [r7, #8]
 8006584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006594:	b29b      	uxth	r3, r3
 8006596:	8013      	strh	r3, [r2, #0]
 8006598:	e27f      	b.n	8006a9a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b0:	817b      	strh	r3, [r7, #10]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	441a      	add	r2, r3
 80065bc:	897b      	ldrh	r3, [r7, #10]
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]
 80065d2:	e262      	b.n	8006a9a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065de:	b29b      	uxth	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	4413      	add	r3, r2
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	011a      	lsls	r2, r3, #4
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	88db      	ldrh	r3, [r3, #6]
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	b29b      	uxth	r3, r3
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006612:	b29b      	uxth	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	4413      	add	r3, r2
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	011a      	lsls	r2, r3, #4
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	4413      	add	r3, r2
 8006626:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800662a:	623b      	str	r3, [r7, #32]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d112      	bne.n	800665a <USB_ActivateEndpoint+0x286>
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800663e:	b29a      	uxth	r2, r3
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006652:	b29a      	uxth	r2, r3
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	801a      	strh	r2, [r3, #0]
 8006658:	e02f      	b.n	80066ba <USB_ActivateEndpoint+0x2e6>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b3e      	cmp	r3, #62	; 0x3e
 8006660:	d813      	bhi.n	800668a <USB_ActivateEndpoint+0x2b6>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	663b      	str	r3, [r7, #96]	; 0x60
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <USB_ActivateEndpoint+0x2a8>
 8006676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006678:	3301      	adds	r3, #1
 800667a:	663b      	str	r3, [r7, #96]	; 0x60
 800667c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800667e:	b29b      	uxth	r3, r3
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	b29a      	uxth	r2, r3
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	e017      	b.n	80066ba <USB_ActivateEndpoint+0x2e6>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	663b      	str	r3, [r7, #96]	; 0x60
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <USB_ActivateEndpoint+0x2d0>
 800669e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a0:	3b01      	subs	r3, #1
 80066a2:	663b      	str	r3, [r7, #96]	; 0x60
 80066a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	029b      	lsls	r3, r3, #10
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	83fb      	strh	r3, [r7, #30]
 80066c8:	8bfb      	ldrh	r3, [r7, #30]
 80066ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01b      	beq.n	800670a <USB_ActivateEndpoint+0x336>
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e8:	83bb      	strh	r3, [r7, #28]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	8bbb      	ldrh	r3, [r7, #28]
 80066f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006706:	b29b      	uxth	r3, r3
 8006708:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800671c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006720:	837b      	strh	r3, [r7, #26]
 8006722:	8b7b      	ldrh	r3, [r7, #26]
 8006724:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006728:	837b      	strh	r3, [r7, #26]
 800672a:	8b7b      	ldrh	r3, [r7, #26]
 800672c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006730:	837b      	strh	r3, [r7, #26]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	8b7b      	ldrh	r3, [r7, #26]
 800673e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674e:	b29b      	uxth	r3, r3
 8006750:	8013      	strh	r3, [r2, #0]
 8006752:	e1a2      	b.n	8006a9a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006784:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	65bb      	str	r3, [r7, #88]	; 0x58
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679a:	b29b      	uxth	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067a0:	4413      	add	r3, r2
 80067a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	011a      	lsls	r2, r3, #4
 80067aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b2:	657b      	str	r3, [r7, #84]	; 0x54
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	891b      	ldrh	r3, [r3, #8]
 80067b8:	085b      	lsrs	r3, r3, #1
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	653b      	str	r3, [r7, #80]	; 0x50
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d4:	4413      	add	r3, r2
 80067d6:	653b      	str	r3, [r7, #80]	; 0x50
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	011a      	lsls	r2, r3, #4
 80067de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80067e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	895b      	ldrh	r3, [r3, #10]
 80067ec:	085b      	lsrs	r3, r3, #1
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 8091 	bne.w	8006924 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006810:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01b      	beq.n	8006852 <USB_ActivateEndpoint+0x47e>
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006860:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <USB_ActivateEndpoint+0x4ce>
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006880:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006900:	867b      	strh	r3, [r7, #50]	; 0x32
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	441a      	add	r2, r3
 800690c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800690e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800691a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691e:	b29b      	uxth	r3, r3
 8006920:	8013      	strh	r3, [r2, #0]
 8006922:	e0ba      	b.n	8006a9a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006934:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01d      	beq.n	800697c <USB_ActivateEndpoint+0x5a8>
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	441a      	add	r2, r3
 8006964:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006978:	b29b      	uxth	r3, r3
 800697a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800698c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01d      	beq.n	80069d4 <USB_ActivateEndpoint+0x600>
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	441a      	add	r2, r3
 80069bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	78db      	ldrb	r3, [r3, #3]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d024      	beq.n	8006a26 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069fa:	f083 0320 	eor.w	r3, r3, #32
 80069fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	441a      	add	r2, r3
 8006a0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8013      	strh	r3, [r2, #0]
 8006a24:	e01d      	b.n	8006a62 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	441a      	add	r2, r3
 8006a4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006a9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	376c      	adds	r7, #108	; 0x6c
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr

08006aa8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b08d      	sub	sp, #52	; 0x34
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	7b1b      	ldrb	r3, [r3, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f040 808e 	bne.w	8006bd8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d044      	beq.n	8006b4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	81bb      	strh	r3, [r7, #12]
 8006ad2:	89bb      	ldrh	r3, [r7, #12]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01b      	beq.n	8006b14 <USB_DeactivateEndpoint+0x6c>
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af2:	817b      	strh	r3, [r7, #10]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	441a      	add	r2, r3
 8006afe:	897b      	ldrh	r3, [r7, #10]
 8006b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2a:	813b      	strh	r3, [r7, #8]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	893b      	ldrh	r3, [r7, #8]
 8006b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	8013      	strh	r3, [r2, #0]
 8006b4c:	e192      	b.n	8006e74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	827b      	strh	r3, [r7, #18]
 8006b5c:	8a7b      	ldrh	r3, [r7, #18]
 8006b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01b      	beq.n	8006b9e <USB_DeactivateEndpoint+0xf6>
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7c:	823b      	strh	r3, [r7, #16]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8a3b      	ldrh	r3, [r7, #16]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb4:	81fb      	strh	r3, [r7, #14]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	441a      	add	r2, r3
 8006bc0:	89fb      	ldrh	r3, [r7, #14]
 8006bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	8013      	strh	r3, [r2, #0]
 8006bd6:	e14d      	b.n	8006e74 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 80a5 	bne.w	8006d2c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	843b      	strh	r3, [r7, #32]
 8006bf0:	8c3b      	ldrh	r3, [r7, #32]
 8006bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01b      	beq.n	8006c32 <USB_DeactivateEndpoint+0x18a>
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	83fb      	strh	r3, [r7, #30]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	8bfb      	ldrh	r3, [r7, #30]
 8006c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	83bb      	strh	r3, [r7, #28]
 8006c40:	8bbb      	ldrh	r3, [r7, #28]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01b      	beq.n	8006c82 <USB_DeactivateEndpoint+0x1da>
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c60:	837b      	strh	r3, [r7, #26]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	8b7b      	ldrh	r3, [r7, #26]
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c98:	833b      	strh	r3, [r7, #24]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	8b3b      	ldrh	r3, [r7, #24]
 8006ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd0:	82fb      	strh	r3, [r7, #22]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	441a      	add	r2, r3
 8006cdc:	8afb      	ldrh	r3, [r7, #22]
 8006cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d08:	82bb      	strh	r3, [r7, #20]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	441a      	add	r2, r3
 8006d14:	8abb      	ldrh	r3, [r7, #20]
 8006d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	8013      	strh	r3, [r2, #0]
 8006d2a:	e0a3      	b.n	8006e74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01b      	beq.n	8006d7c <USB_DeactivateEndpoint+0x2d4>
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	441a      	add	r2, r3
 8006d66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01b      	beq.n	8006dcc <USB_DeactivateEndpoint+0x324>
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006daa:	853b      	strh	r3, [r7, #40]	; 0x28
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	441a      	add	r2, r3
 8006dee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e52:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	441a      	add	r2, r3
 8006e5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3734      	adds	r7, #52	; 0x34
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr

08006e80 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b0cc      	sub	sp, #304	; 0x130
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e8e:	6018      	str	r0, [r3, #0]
 8006e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e98:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	785b      	ldrb	r3, [r3, #1]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	f041 817d 	bne.w	80081a6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d908      	bls.n	8006eda <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006ed8:	e007      	b.n	8006eea <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	7b1b      	ldrb	r3, [r3, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d152      	bne.n	8006fa0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6959      	ldr	r1, [r3, #20]
 8006f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	88da      	ldrh	r2, [r3, #6]
 8006f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f1c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f20:	6800      	ldr	r0, [r0, #0]
 8006f22:	f001 ff0e 	bl	8008d42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f32:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f50:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f58:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	440a      	add	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	011a      	lsls	r2, r3, #4
 8006f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	801a      	strh	r2, [r3, #0]
 8006f9c:	f001 b8b5 	b.w	800810a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	78db      	ldrb	r3, [r3, #3]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	f040 84c6 	bne.w	800793e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6a1a      	ldr	r2, [r3, #32]
 8006fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	f240 8443 	bls.w	8007856 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007020:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007028:	b29b      	uxth	r3, r3
 800702a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800702c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a1a      	ldr	r2, [r3, #32]
 8007038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703c:	1ad2      	subs	r2, r2, r3
 800703e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800704a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 823e 	beq.w	80074ee <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800707a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800707e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	785b      	ldrb	r3, [r3, #1]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f040 809a 	bne.w	80071cc <USB_EPStartXfer+0x34c>
 8007098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070a8:	6812      	ldr	r2, [r2, #0]
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4619      	mov	r1, r3
 80070be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070ca:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	440a      	add	r2, r1
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	011a      	lsls	r2, r3, #4
 80070e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4413      	add	r3, r2
 80070ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80070f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d122      	bne.n	800714a <USB_EPStartXfer+0x2ca>
 8007104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007108:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007116:	b29a      	uxth	r2, r3
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713a:	b29a      	uxth	r2, r3
 800713c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007140:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	801a      	strh	r2, [r3, #0]
 8007148:	e079      	b.n	800723e <USB_EPStartXfer+0x3be>
 800714a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714e:	2b3e      	cmp	r3, #62	; 0x3e
 8007150:	d81b      	bhi.n	800718a <USB_EPStartXfer+0x30a>
 8007152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800715c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d004      	beq.n	8007172 <USB_EPStartXfer+0x2f2>
 8007168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800716c:	3301      	adds	r3, #1
 800716e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007176:	b29b      	uxth	r3, r3
 8007178:	029b      	lsls	r3, r3, #10
 800717a:	b29a      	uxth	r2, r3
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	e059      	b.n	800723e <USB_EPStartXfer+0x3be>
 800718a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <USB_EPStartXfer+0x32a>
 80071a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071a4:	3b01      	subs	r3, #1
 80071a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	029b      	lsls	r3, r3, #10
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071bc:	b29a      	uxth	r2, r3
 80071be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e038      	b.n	800723e <USB_EPStartXfer+0x3be>
 80071cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d130      	bne.n	800723e <USB_EPStartXfer+0x3be>
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	4619      	mov	r1, r3
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071fa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	440a      	add	r2, r1
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	011a      	lsls	r2, r3, #4
 8007212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007216:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4413      	add	r3, r2
 800721e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007230:	b29a      	uxth	r2, r3
 8007232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	895b      	ldrh	r3, [r3, #10]
 800724a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800724e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6959      	ldr	r1, [r3, #20]
 800725a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725e:	b29b      	uxth	r3, r3
 8007260:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007264:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007268:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800726c:	6800      	ldr	r0, [r0, #0]
 800726e:	f001 fd68 	bl	8008d42 <USB_WritePMA>
            ep->xfer_buff += len;
 8007272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007282:	441a      	add	r2, r3
 8007284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6a1a      	ldr	r2, [r3, #32]
 800729c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d90f      	bls.n	80072cc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80072ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6a1a      	ldr	r2, [r3, #32]
 80072b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072bc:	1ad2      	subs	r2, r2, r3
 80072be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	621a      	str	r2, [r3, #32]
 80072ca:	e00e      	b.n	80072ea <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80072cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	785b      	ldrb	r3, [r3, #1]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f040 809a 	bne.w	8007430 <USB_EPStartXfer+0x5b0>
 80072fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007300:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007304:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007308:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731e:	b29b      	uxth	r3, r3
 8007320:	4619      	mov	r1, r3
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800732a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800732e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007332:	6812      	ldr	r2, [r2, #0]
 8007334:	440a      	add	r2, r1
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	011a      	lsls	r2, r3, #4
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4413      	add	r3, r2
 8007352:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d122      	bne.n	80073ae <USB_EPStartXfer+0x52e>
 8007368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800737a:	b29a      	uxth	r2, r3
 800737c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007380:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	801a      	strh	r2, [r3, #0]
 80073ac:	e083      	b.n	80074b6 <USB_EPStartXfer+0x636>
 80073ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b2:	2b3e      	cmp	r3, #62	; 0x3e
 80073b4:	d81b      	bhi.n	80073ee <USB_EPStartXfer+0x56e>
 80073b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ba:	085b      	lsrs	r3, r3, #1
 80073bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <USB_EPStartXfer+0x556>
 80073cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073d0:	3301      	adds	r3, #1
 80073d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073da:	b29b      	uxth	r3, r3
 80073dc:	029b      	lsls	r3, r3, #10
 80073de:	b29a      	uxth	r2, r3
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	801a      	strh	r2, [r3, #0]
 80073ec:	e063      	b.n	80074b6 <USB_EPStartXfer+0x636>
 80073ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <USB_EPStartXfer+0x58e>
 8007404:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007408:	3b01      	subs	r3, #1
 800740a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800740e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007412:	b29b      	uxth	r3, r3
 8007414:	029b      	lsls	r3, r3, #10
 8007416:	b29b      	uxth	r3, r3
 8007418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800741c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007420:	b29a      	uxth	r2, r3
 8007422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007426:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	e042      	b.n	80074b6 <USB_EPStartXfer+0x636>
 8007430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	785b      	ldrb	r3, [r3, #1]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d13a      	bne.n	80074b6 <USB_EPStartXfer+0x636>
 8007440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007444:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007448:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800744c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007462:	b29b      	uxth	r3, r3
 8007464:	4619      	mov	r1, r3
 8007466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800746e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007472:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007476:	6812      	ldr	r2, [r2, #0]
 8007478:	440a      	add	r2, r1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	011a      	lsls	r2, r3, #4
 800748a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4413      	add	r3, r2
 8007496:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800749a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	891b      	ldrh	r3, [r3, #8]
 80074c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6959      	ldr	r1, [r3, #20]
 80074d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074e4:	6800      	ldr	r0, [r0, #0]
 80074e6:	f001 fc2c 	bl	8008d42 <USB_WritePMA>
 80074ea:	f000 be0e 	b.w	800810a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	785b      	ldrb	r3, [r3, #1]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d16d      	bne.n	80075da <USB_EPStartXfer+0x75a>
 80074fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	64bb      	str	r3, [r7, #72]	; 0x48
 800750a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007518:	b29b      	uxth	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800751e:	4413      	add	r3, r2
 8007520:	64bb      	str	r3, [r7, #72]	; 0x48
 8007522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	011a      	lsls	r2, r3, #4
 8007530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007532:	4413      	add	r3, r2
 8007534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007538:	647b      	str	r3, [r7, #68]	; 0x44
 800753a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d112      	bne.n	8007568 <USB_EPStartXfer+0x6e8>
 8007542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800754c:	b29a      	uxth	r2, r3
 800754e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007550:	801a      	strh	r2, [r3, #0]
 8007552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007560:	b29a      	uxth	r2, r3
 8007562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007564:	801a      	strh	r2, [r3, #0]
 8007566:	e063      	b.n	8007630 <USB_EPStartXfer+0x7b0>
 8007568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756c:	2b3e      	cmp	r3, #62	; 0x3e
 800756e:	d817      	bhi.n	80075a0 <USB_EPStartXfer+0x720>
 8007570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800757a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d004      	beq.n	8007590 <USB_EPStartXfer+0x710>
 8007586:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800758a:	3301      	adds	r3, #1
 800758c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007590:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007594:	b29b      	uxth	r3, r3
 8007596:	029b      	lsls	r3, r3, #10
 8007598:	b29a      	uxth	r2, r3
 800759a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800759c:	801a      	strh	r2, [r3, #0]
 800759e:	e047      	b.n	8007630 <USB_EPStartXfer+0x7b0>
 80075a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a4:	095b      	lsrs	r3, r3, #5
 80075a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d104      	bne.n	80075c0 <USB_EPStartXfer+0x740>
 80075b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075ba:	3b01      	subs	r3, #1
 80075bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	029b      	lsls	r3, r3, #10
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	e02a      	b.n	8007630 <USB_EPStartXfer+0x7b0>
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d122      	bne.n	8007630 <USB_EPStartXfer+0x7b0>
 80075ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	653b      	str	r3, [r7, #80]	; 0x50
 80075f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007604:	b29b      	uxth	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800760a:	4413      	add	r3, r2
 800760c:	653b      	str	r3, [r7, #80]	; 0x50
 800760e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	011a      	lsls	r2, r3, #4
 800761c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800761e:	4413      	add	r3, r2
 8007620:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762a:	b29a      	uxth	r2, r3
 800762c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	891b      	ldrh	r3, [r3, #8]
 800763c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6959      	ldr	r1, [r3, #20]
 800764c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007650:	b29b      	uxth	r3, r3
 8007652:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007656:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800765a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800765e:	6800      	ldr	r0, [r0, #0]
 8007660:	f001 fb6f 	bl	8008d42 <USB_WritePMA>
            ep->xfer_buff += len;
 8007664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	695a      	ldr	r2, [r3, #20]
 8007670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007674:	441a      	add	r2, r3
 8007676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6a1a      	ldr	r2, [r3, #32]
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	429a      	cmp	r2, r3
 800769c:	d90f      	bls.n	80076be <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800769e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6a1a      	ldr	r2, [r3, #32]
 80076aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ae:	1ad2      	subs	r2, r2, r3
 80076b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	621a      	str	r2, [r3, #32]
 80076bc:	e00e      	b.n	80076dc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80076be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80076ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2200      	movs	r2, #0
 80076da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	643b      	str	r3, [r7, #64]	; 0x40
 80076e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d16d      	bne.n	80077d4 <USB_EPStartXfer+0x954>
 80076f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	63bb      	str	r3, [r7, #56]	; 0x38
 8007704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007712:	b29b      	uxth	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	4413      	add	r3, r2
 800771a:	63bb      	str	r3, [r7, #56]	; 0x38
 800771c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	011a      	lsls	r2, r3, #4
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	4413      	add	r3, r2
 800772e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
 8007734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d112      	bne.n	8007762 <USB_EPStartXfer+0x8e2>
 800773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007746:	b29a      	uxth	r2, r3
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	801a      	strh	r2, [r3, #0]
 800774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775a:	b29a      	uxth	r2, r3
 800775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	e05d      	b.n	800781e <USB_EPStartXfer+0x99e>
 8007762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007766:	2b3e      	cmp	r3, #62	; 0x3e
 8007768:	d817      	bhi.n	800779a <USB_EPStartXfer+0x91a>
 800776a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <USB_EPStartXfer+0x90a>
 8007780:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007784:	3301      	adds	r3, #1
 8007786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800778a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800778e:	b29b      	uxth	r3, r3
 8007790:	029b      	lsls	r3, r3, #10
 8007792:	b29a      	uxth	r2, r3
 8007794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	e041      	b.n	800781e <USB_EPStartXfer+0x99e>
 800779a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779e:	095b      	lsrs	r3, r3, #5
 80077a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a8:	f003 031f 	and.w	r3, r3, #31
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d104      	bne.n	80077ba <USB_EPStartXfer+0x93a>
 80077b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077b4:	3b01      	subs	r3, #1
 80077b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077be:	b29b      	uxth	r3, r3
 80077c0:	029b      	lsls	r3, r3, #10
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	e024      	b.n	800781e <USB_EPStartXfer+0x99e>
 80077d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d11c      	bne.n	800781e <USB_EPStartXfer+0x99e>
 80077e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	461a      	mov	r2, r3
 80077f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f8:	4413      	add	r3, r2
 80077fa:	643b      	str	r3, [r7, #64]	; 0x40
 80077fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	011a      	lsls	r2, r3, #4
 800780a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780c:	4413      	add	r3, r2
 800780e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007818:	b29a      	uxth	r2, r3
 800781a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800781e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	895b      	ldrh	r3, [r3, #10]
 800782a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6959      	ldr	r1, [r3, #20]
 800783a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783e:	b29b      	uxth	r3, r3
 8007840:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007844:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007848:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800784c:	6800      	ldr	r0, [r0, #0]
 800784e:	f001 fa78 	bl	8008d42 <USB_WritePMA>
 8007852:	f000 bc5a 	b.w	800810a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	441a      	add	r2, r3
 80078aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078be:	b29b      	uxth	r3, r3
 80078c0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078dc:	b29b      	uxth	r3, r3
 80078de:	461a      	mov	r2, r3
 80078e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e2:	4413      	add	r3, r2
 80078e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	011a      	lsls	r2, r3, #4
 80078f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078f6:	4413      	add	r3, r2
 80078f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80078fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007902:	b29a      	uxth	r2, r3
 8007904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007906:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	891b      	ldrh	r3, [r3, #8]
 8007914:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6959      	ldr	r1, [r3, #20]
 8007924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007928:	b29b      	uxth	r3, r3
 800792a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800792e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007932:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007936:	6800      	ldr	r0, [r0, #0]
 8007938:	f001 fa03 	bl	8008d42 <USB_WritePMA>
 800793c:	e3e5      	b.n	800810a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800793e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007942:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007964:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	441a      	add	r2, r3
 8007982:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800798a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007996:	b29b      	uxth	r3, r3
 8007998:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800799a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079aa:	1ad2      	subs	r2, r2, r3
 80079ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 81bc 	beq.w	8007d58 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	785b      	ldrb	r3, [r3, #1]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d16d      	bne.n	8007ada <USB_EPStartXfer+0xc5a>
 80079fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a1e:	4413      	add	r3, r2
 8007a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	011a      	lsls	r2, r3, #4
 8007a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a32:	4413      	add	r3, r2
 8007a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a38:	677b      	str	r3, [r7, #116]	; 0x74
 8007a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d112      	bne.n	8007a68 <USB_EPStartXfer+0xbe8>
 8007a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a64:	801a      	strh	r2, [r3, #0]
 8007a66:	e060      	b.n	8007b2a <USB_EPStartXfer+0xcaa>
 8007a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8007a6e:	d817      	bhi.n	8007aa0 <USB_EPStartXfer+0xc20>
 8007a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a74:	085b      	lsrs	r3, r3, #1
 8007a76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <USB_EPStartXfer+0xc10>
 8007a86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	029b      	lsls	r3, r3, #10
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a9c:	801a      	strh	r2, [r3, #0]
 8007a9e:	e044      	b.n	8007b2a <USB_EPStartXfer+0xcaa>
 8007aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aae:	f003 031f 	and.w	r3, r3, #31
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d104      	bne.n	8007ac0 <USB_EPStartXfer+0xc40>
 8007ab6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007aba:	3b01      	subs	r3, #1
 8007abc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ac0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	029b      	lsls	r3, r3, #10
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	e027      	b.n	8007b2a <USB_EPStartXfer+0xcaa>
 8007ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d11f      	bne.n	8007b2a <USB_EPStartXfer+0xcaa>
 8007aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b00:	4413      	add	r3, r2
 8007b02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	011a      	lsls	r2, r3, #4
 8007b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b18:	4413      	add	r3, r2
 8007b1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	895b      	ldrh	r3, [r3, #10]
 8007b36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6959      	ldr	r1, [r3, #20]
 8007b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b50:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b54:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b58:	6800      	ldr	r0, [r0, #0]
 8007b5a:	f001 f8f2 	bl	8008d42 <USB_WritePMA>
          ep->xfer_buff += len;
 8007b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695a      	ldr	r2, [r3, #20]
 8007b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6e:	441a      	add	r2, r3
 8007b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6a1a      	ldr	r2, [r3, #32]
 8007b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d90f      	bls.n	8007bb8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6a1a      	ldr	r2, [r3, #32]
 8007ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba8:	1ad2      	subs	r2, r2, r3
 8007baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	621a      	str	r2, [r3, #32]
 8007bb6:	e00e      	b.n	8007bd6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 8295 	beq.w	800810a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d16d      	bne.n	8007ccc <USB_EPStartXfer+0xe4c>
 8007bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c10:	4413      	add	r3, r2
 8007c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	011a      	lsls	r2, r3, #4
 8007c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c24:	4413      	add	r3, r2
 8007c26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8007c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d112      	bne.n	8007c5a <USB_EPStartXfer+0xdda>
 8007c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c56:	801a      	strh	r2, [r3, #0]
 8007c58:	e063      	b.n	8007d22 <USB_EPStartXfer+0xea2>
 8007c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c60:	d817      	bhi.n	8007c92 <USB_EPStartXfer+0xe12>
 8007c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d004      	beq.n	8007c82 <USB_EPStartXfer+0xe02>
 8007c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	029b      	lsls	r3, r3, #10
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c8e:	801a      	strh	r2, [r3, #0]
 8007c90:	e047      	b.n	8007d22 <USB_EPStartXfer+0xea2>
 8007c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c96:	095b      	lsrs	r3, r3, #5
 8007c98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca0:	f003 031f 	and.w	r3, r3, #31
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d104      	bne.n	8007cb2 <USB_EPStartXfer+0xe32>
 8007ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cac:	3b01      	subs	r3, #1
 8007cae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	029b      	lsls	r3, r3, #10
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc8:	801a      	strh	r2, [r3, #0]
 8007cca:	e02a      	b.n	8007d22 <USB_EPStartXfer+0xea2>
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d122      	bne.n	8007d22 <USB_EPStartXfer+0xea2>
 8007cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8007ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cfc:	4413      	add	r3, r2
 8007cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	011a      	lsls	r2, r3, #4
 8007d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d10:	4413      	add	r3, r2
 8007d12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	891b      	ldrh	r3, [r3, #8]
 8007d2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6959      	ldr	r1, [r3, #20]
 8007d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d48:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d4c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d50:	6800      	ldr	r0, [r0, #0]
 8007d52:	f000 fff6 	bl	8008d42 <USB_WritePMA>
 8007d56:	e1d8      	b.n	800810a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	785b      	ldrb	r3, [r3, #1]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d178      	bne.n	8007e5a <USB_EPStartXfer+0xfda>
 8007d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	011a      	lsls	r2, r3, #4
 8007da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007da4:	4413      	add	r3, r2
 8007da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007daa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d116      	bne.n	8007de4 <USB_EPStartXfer+0xf64>
 8007db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	e06b      	b.n	8007ebc <USB_EPStartXfer+0x103c>
 8007de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de8:	2b3e      	cmp	r3, #62	; 0x3e
 8007dea:	d818      	bhi.n	8007e1e <USB_EPStartXfer+0xf9e>
 8007dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df0:	085b      	lsrs	r3, r3, #1
 8007df2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <USB_EPStartXfer+0xf8c>
 8007e02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e06:	3301      	adds	r3, #1
 8007e08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	029b      	lsls	r3, r3, #10
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	e04e      	b.n	8007ebc <USB_EPStartXfer+0x103c>
 8007e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2c:	f003 031f 	and.w	r3, r3, #31
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <USB_EPStartXfer+0xfbe>
 8007e34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	029b      	lsls	r3, r3, #10
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e56:	801a      	strh	r2, [r3, #0]
 8007e58:	e030      	b.n	8007ebc <USB_EPStartXfer+0x103c>
 8007e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	785b      	ldrb	r3, [r3, #1]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d128      	bne.n	8007ebc <USB_EPStartXfer+0x103c>
 8007e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e8e:	4413      	add	r3, r2
 8007e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	011a      	lsls	r2, r3, #4
 8007ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007eba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	891b      	ldrh	r3, [r3, #8]
 8007ec8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6959      	ldr	r1, [r3, #20]
 8007ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ee2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007ee6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007eea:	6800      	ldr	r0, [r0, #0]
 8007eec:	f000 ff29 	bl	8008d42 <USB_WritePMA>
          ep->xfer_buff += len;
 8007ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	695a      	ldr	r2, [r3, #20]
 8007efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f00:	441a      	add	r2, r3
 8007f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6a1a      	ldr	r2, [r3, #32]
 8007f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d90f      	bls.n	8007f4a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6a1a      	ldr	r2, [r3, #32]
 8007f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3a:	1ad2      	subs	r2, r2, r3
 8007f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	621a      	str	r2, [r3, #32]
 8007f48:	e00e      	b.n	8007f68 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2200      	movs	r2, #0
 8007f66:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80cc 	beq.w	800810a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d178      	bne.n	8008082 <USB_EPStartXfer+0x1202>
 8007f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	011a      	lsls	r2, r3, #4
 8007fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fcc:	4413      	add	r3, r2
 8007fce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d116      	bne.n	800800c <USB_EPStartXfer+0x118c>
 8007fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ff0:	801a      	strh	r2, [r3, #0]
 8007ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008002:	b29a      	uxth	r2, r3
 8008004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008008:	801a      	strh	r2, [r3, #0]
 800800a:	e064      	b.n	80080d6 <USB_EPStartXfer+0x1256>
 800800c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008010:	2b3e      	cmp	r3, #62	; 0x3e
 8008012:	d818      	bhi.n	8008046 <USB_EPStartXfer+0x11c6>
 8008014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008018:	085b      	lsrs	r3, r3, #1
 800801a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800801e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <USB_EPStartXfer+0x11b4>
 800802a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800802e:	3301      	adds	r3, #1
 8008030:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008038:	b29b      	uxth	r3, r3
 800803a:	029b      	lsls	r3, r3, #10
 800803c:	b29a      	uxth	r2, r3
 800803e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008042:	801a      	strh	r2, [r3, #0]
 8008044:	e047      	b.n	80080d6 <USB_EPStartXfer+0x1256>
 8008046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804a:	095b      	lsrs	r3, r3, #5
 800804c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	2b00      	cmp	r3, #0
 800805a:	d104      	bne.n	8008066 <USB_EPStartXfer+0x11e6>
 800805c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008060:	3b01      	subs	r3, #1
 8008062:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800806a:	b29b      	uxth	r3, r3
 800806c:	029b      	lsls	r3, r3, #10
 800806e:	b29b      	uxth	r3, r3
 8008070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008078:	b29a      	uxth	r2, r3
 800807a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	e029      	b.n	80080d6 <USB_EPStartXfer+0x1256>
 8008082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d121      	bne.n	80080d6 <USB_EPStartXfer+0x1256>
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	461a      	mov	r2, r3
 80080a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080a8:	4413      	add	r3, r2
 80080aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	011a      	lsls	r2, r3, #4
 80080bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080c0:	4413      	add	r3, r2
 80080c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	895b      	ldrh	r3, [r3, #10]
 80080e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6959      	ldr	r1, [r3, #20]
 80080f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008100:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008104:	6800      	ldr	r0, [r0, #0]
 8008106:	f000 fe1c 	bl	8008d42 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800812c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008138:	8013      	strh	r3, [r2, #0]
 800813a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008142:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008146:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800814a:	8812      	ldrh	r2, [r2, #0]
 800814c:	f082 0210 	eor.w	r2, r2, #16
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008156:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800815a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800815e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008162:	8812      	ldrh	r2, [r2, #0]
 8008164:	f082 0220 	eor.w	r2, r2, #32
 8008168:	801a      	strh	r2, [r3, #0]
 800816a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	441a      	add	r2, r3
 8008184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008188:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800819a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819e:	b29b      	uxth	r3, r3
 80081a0:	8013      	strh	r3, [r2, #0]
 80081a2:	f000 bc9f 	b.w	8008ae4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	7b1b      	ldrb	r3, [r3, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 80ae 	bne.w	8008314 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d917      	bls.n	8008204 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80081d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80081e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699a      	ldr	r2, [r3, #24]
 80081f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f4:	1ad2      	subs	r2, r2, r3
 80081f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	619a      	str	r2, [r3, #24]
 8008202:	e00e      	b.n	8008222 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800823e:	b29b      	uxth	r3, r3
 8008240:	461a      	mov	r2, r3
 8008242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008246:	4413      	add	r3, r2
 8008248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800824c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	011a      	lsls	r2, r3, #4
 800825a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800825e:	4413      	add	r3, r2
 8008260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d116      	bne.n	800829e <USB_EPStartXfer+0x141e>
 8008270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	e3e8      	b.n	8008a70 <USB_EPStartXfer+0x1bf0>
 800829e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a2:	2b3e      	cmp	r3, #62	; 0x3e
 80082a4:	d818      	bhi.n	80082d8 <USB_EPStartXfer+0x1458>
 80082a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082aa:	085b      	lsrs	r3, r3, #1
 80082ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d004      	beq.n	80082c6 <USB_EPStartXfer+0x1446>
 80082bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082c0:	3301      	adds	r3, #1
 80082c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	029b      	lsls	r3, r3, #10
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	e3cb      	b.n	8008a70 <USB_EPStartXfer+0x1bf0>
 80082d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082dc:	095b      	lsrs	r3, r3, #5
 80082de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e6:	f003 031f 	and.w	r3, r3, #31
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <USB_EPStartXfer+0x1478>
 80082ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082f2:	3b01      	subs	r3, #1
 80082f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	029b      	lsls	r3, r3, #10
 8008300:	b29b      	uxth	r3, r3
 8008302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800830a:	b29a      	uxth	r2, r3
 800830c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008310:	801a      	strh	r2, [r3, #0]
 8008312:	e3ad      	b.n	8008a70 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	78db      	ldrb	r3, [r3, #3]
 8008320:	2b02      	cmp	r3, #2
 8008322:	f040 8200 	bne.w	8008726 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f040 8091 	bne.w	800845a <USB_EPStartXfer+0x15da>
 8008338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008354:	b29b      	uxth	r3, r3
 8008356:	461a      	mov	r2, r3
 8008358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800835c:	4413      	add	r3, r2
 800835e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	011a      	lsls	r2, r3, #4
 8008370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008374:	4413      	add	r3, r2
 8008376:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800837a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800837e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d116      	bne.n	80083bc <USB_EPStartXfer+0x153c>
 800838e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	b29b      	uxth	r3, r3
 8008396:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800839a:	b29a      	uxth	r2, r3
 800839c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	e083      	b.n	80084c4 <USB_EPStartXfer+0x1644>
 80083bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2b3e      	cmp	r3, #62	; 0x3e
 80083ca:	d820      	bhi.n	800840e <USB_EPStartXfer+0x158e>
 80083cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	085b      	lsrs	r3, r3, #1
 80083da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d004      	beq.n	80083fc <USB_EPStartXfer+0x157c>
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f6:	3301      	adds	r3, #1
 80083f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008400:	b29b      	uxth	r3, r3
 8008402:	029b      	lsls	r3, r3, #10
 8008404:	b29a      	uxth	r2, r3
 8008406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800840a:	801a      	strh	r2, [r3, #0]
 800840c:	e05a      	b.n	80084c4 <USB_EPStartXfer+0x1644>
 800840e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	095b      	lsrs	r3, r3, #5
 800841c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <USB_EPStartXfer+0x15be>
 8008434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008438:	3b01      	subs	r3, #1
 800843a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800843e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008442:	b29b      	uxth	r3, r3
 8008444:	029b      	lsls	r3, r3, #10
 8008446:	b29b      	uxth	r3, r3
 8008448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800844c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008450:	b29a      	uxth	r2, r3
 8008452:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008456:	801a      	strh	r2, [r3, #0]
 8008458:	e034      	b.n	80084c4 <USB_EPStartXfer+0x1644>
 800845a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d12c      	bne.n	80084c4 <USB_EPStartXfer+0x1644>
 800846a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008486:	b29b      	uxth	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800848e:	4413      	add	r3, r2
 8008490:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	011a      	lsls	r2, r3, #4
 80084a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084a6:	4413      	add	r3, r2
 80084a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084c2:	801a      	strh	r2, [r3, #0]
 80084c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f040 8091 	bne.w	8008606 <USB_EPStartXfer+0x1786>
 80084e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008500:	b29b      	uxth	r3, r3
 8008502:	461a      	mov	r2, r3
 8008504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008508:	4413      	add	r3, r2
 800850a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800850e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	011a      	lsls	r2, r3, #4
 800851c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008520:	4413      	add	r3, r2
 8008522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800852a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d116      	bne.n	8008568 <USB_EPStartXfer+0x16e8>
 800853a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008546:	b29a      	uxth	r2, r3
 8008548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800854c:	801a      	strh	r2, [r3, #0]
 800854e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800855a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855e:	b29a      	uxth	r2, r3
 8008560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	e07c      	b.n	8008662 <USB_EPStartXfer+0x17e2>
 8008568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800856c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	2b3e      	cmp	r3, #62	; 0x3e
 8008576:	d820      	bhi.n	80085ba <USB_EPStartXfer+0x173a>
 8008578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800858a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <USB_EPStartXfer+0x1728>
 800859e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085a2:	3301      	adds	r3, #1
 80085a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	029b      	lsls	r3, r3, #10
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	e053      	b.n	8008662 <USB_EPStartXfer+0x17e2>
 80085ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	f003 031f 	and.w	r3, r3, #31
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <USB_EPStartXfer+0x176a>
 80085e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	029b      	lsls	r3, r3, #10
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008602:	801a      	strh	r2, [r3, #0]
 8008604:	e02d      	b.n	8008662 <USB_EPStartXfer+0x17e2>
 8008606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d125      	bne.n	8008662 <USB_EPStartXfer+0x17e2>
 8008616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800862c:	4413      	add	r3, r2
 800862e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	011a      	lsls	r2, r3, #4
 8008640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008644:	4413      	add	r3, r2
 8008646:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800864a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800864e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	b29a      	uxth	r2, r3
 800865c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008660:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 81fe 	beq.w	8008a70 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008678:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008694:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d005      	beq.n	80086ac <USB_EPStartXfer+0x182c>
 80086a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10d      	bne.n	80086c8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 81db 	bne.w	8008a70 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f040 81d4 	bne.w	8008a70 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80086c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ee:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80086f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	441a      	add	r2, r3
 800870c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800871c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008720:	b29b      	uxth	r3, r3
 8008722:	8013      	strh	r3, [r2, #0]
 8008724:	e1a4      	b.n	8008a70 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	78db      	ldrb	r3, [r3, #3]
 8008732:	2b01      	cmp	r3, #1
 8008734:	f040 819a 	bne.w	8008a6c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	429a      	cmp	r2, r3
 8008752:	d917      	bls.n	8008784 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	699a      	ldr	r2, [r3, #24]
 8008770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008774:	1ad2      	subs	r2, r2, r3
 8008776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	619a      	str	r2, [r3, #24]
 8008782:	e00e      	b.n	80087a2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2200      	movs	r2, #0
 80087a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	785b      	ldrb	r3, [r3, #1]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d178      	bne.n	80088a4 <USB_EPStartXfer+0x1a24>
 80087b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087d6:	4413      	add	r3, r2
 80087d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	011a      	lsls	r2, r3, #4
 80087ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ee:	4413      	add	r3, r2
 80087f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d116      	bne.n	800882e <USB_EPStartXfer+0x19ae>
 8008800:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800880c:	b29a      	uxth	r2, r3
 800880e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008812:	801a      	strh	r2, [r3, #0]
 8008814:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008824:	b29a      	uxth	r2, r3
 8008826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800882a:	801a      	strh	r2, [r3, #0]
 800882c:	e06b      	b.n	8008906 <USB_EPStartXfer+0x1a86>
 800882e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008832:	2b3e      	cmp	r3, #62	; 0x3e
 8008834:	d818      	bhi.n	8008868 <USB_EPStartXfer+0x19e8>
 8008836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800883a:	085b      	lsrs	r3, r3, #1
 800883c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d004      	beq.n	8008856 <USB_EPStartXfer+0x19d6>
 800884c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008850:	3301      	adds	r3, #1
 8008852:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800885a:	b29b      	uxth	r3, r3
 800885c:	029b      	lsls	r3, r3, #10
 800885e:	b29a      	uxth	r2, r3
 8008860:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008864:	801a      	strh	r2, [r3, #0]
 8008866:	e04e      	b.n	8008906 <USB_EPStartXfer+0x1a86>
 8008868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886c:	095b      	lsrs	r3, r3, #5
 800886e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008876:	f003 031f 	and.w	r3, r3, #31
 800887a:	2b00      	cmp	r3, #0
 800887c:	d104      	bne.n	8008888 <USB_EPStartXfer+0x1a08>
 800887e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008882:	3b01      	subs	r3, #1
 8008884:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800888c:	b29b      	uxth	r3, r3
 800888e:	029b      	lsls	r3, r3, #10
 8008890:	b29b      	uxth	r3, r3
 8008892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800889a:	b29a      	uxth	r2, r3
 800889c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	e030      	b.n	8008906 <USB_EPStartXfer+0x1a86>
 80088a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d128      	bne.n	8008906 <USB_EPStartXfer+0x1a86>
 80088b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	461a      	mov	r2, r3
 80088d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d8:	4413      	add	r3, r2
 80088da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	011a      	lsls	r2, r3, #4
 80088ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fe:	b29a      	uxth	r2, r3
 8008900:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008904:	801a      	strh	r2, [r3, #0]
 8008906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d178      	bne.n	8008a16 <USB_EPStartXfer+0x1b96>
 8008924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008940:	b29b      	uxth	r3, r3
 8008942:	461a      	mov	r2, r3
 8008944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008948:	4413      	add	r3, r2
 800894a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800894e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	011a      	lsls	r2, r3, #4
 800895c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008960:	4413      	add	r3, r2
 8008962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800896a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896e:	2b00      	cmp	r3, #0
 8008970:	d116      	bne.n	80089a0 <USB_EPStartXfer+0x1b20>
 8008972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29b      	uxth	r3, r3
 800897a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800897e:	b29a      	uxth	r2, r3
 8008980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008984:	801a      	strh	r2, [r3, #0]
 8008986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	b29b      	uxth	r3, r3
 800898e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008996:	b29a      	uxth	r2, r3
 8008998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	e067      	b.n	8008a70 <USB_EPStartXfer+0x1bf0>
 80089a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a4:	2b3e      	cmp	r3, #62	; 0x3e
 80089a6:	d818      	bhi.n	80089da <USB_EPStartXfer+0x1b5a>
 80089a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ac:	085b      	lsrs	r3, r3, #1
 80089ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d004      	beq.n	80089c8 <USB_EPStartXfer+0x1b48>
 80089be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089c2:	3301      	adds	r3, #1
 80089c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	029b      	lsls	r3, r3, #10
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089d6:	801a      	strh	r2, [r3, #0]
 80089d8:	e04a      	b.n	8008a70 <USB_EPStartXfer+0x1bf0>
 80089da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089de:	095b      	lsrs	r3, r3, #5
 80089e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e8:	f003 031f 	and.w	r3, r3, #31
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d104      	bne.n	80089fa <USB_EPStartXfer+0x1b7a>
 80089f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089f4:	3b01      	subs	r3, #1
 80089f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	029b      	lsls	r3, r3, #10
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a12:	801a      	strh	r2, [r3, #0]
 8008a14:	e02c      	b.n	8008a70 <USB_EPStartXfer+0x1bf0>
 8008a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d124      	bne.n	8008a70 <USB_EPStartXfer+0x1bf0>
 8008a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	461a      	mov	r2, r3
 8008a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	011a      	lsls	r2, r3, #4
 8008a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a54:	4413      	add	r3, r2
 8008a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a68:	801a      	strh	r2, [r3, #0]
 8008a6a:	e001      	b.n	8008a70 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e03a      	b.n	8008ae6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a9a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008aa2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008aa6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008aaa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008aae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	441a      	add	r2, r3
 8008acc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d020      	beq.n	8008b44 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b18:	81bb      	strh	r3, [r7, #12]
 8008b1a:	89bb      	ldrh	r3, [r7, #12]
 8008b1c:	f083 0310 	eor.w	r3, r3, #16
 8008b20:	81bb      	strh	r3, [r7, #12]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	441a      	add	r2, r3
 8008b2c:	89bb      	ldrh	r3, [r7, #12]
 8008b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8013      	strh	r3, [r2, #0]
 8008b42:	e01f      	b.n	8008b84 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5a:	81fb      	strh	r3, [r7, #14]
 8008b5c:	89fb      	ldrh	r3, [r7, #14]
 8008b5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b62:	81fb      	strh	r3, [r7, #14]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	441a      	add	r2, r3
 8008b6e:	89fb      	ldrh	r3, [r7, #14]
 8008b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr

08008b90 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	7b1b      	ldrb	r3, [r3, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f040 809d 	bne.w	8008cde <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d04c      	beq.n	8008c46 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	823b      	strh	r3, [r7, #16]
 8008bba:	8a3b      	ldrh	r3, [r7, #16]
 8008bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01b      	beq.n	8008bfc <USB_EPClearStall+0x6c>
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bda:	81fb      	strh	r3, [r7, #14]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	441a      	add	r2, r3
 8008be6:	89fb      	ldrh	r3, [r7, #14]
 8008be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	78db      	ldrb	r3, [r3, #3]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d06c      	beq.n	8008cde <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c1a:	81bb      	strh	r3, [r7, #12]
 8008c1c:	89bb      	ldrh	r3, [r7, #12]
 8008c1e:	f083 0320 	eor.w	r3, r3, #32
 8008c22:	81bb      	strh	r3, [r7, #12]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	441a      	add	r2, r3
 8008c2e:	89bb      	ldrh	r3, [r7, #12]
 8008c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	8013      	strh	r3, [r2, #0]
 8008c44:	e04b      	b.n	8008cde <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	82fb      	strh	r3, [r7, #22]
 8008c54:	8afb      	ldrh	r3, [r7, #22]
 8008c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d01b      	beq.n	8008c96 <USB_EPClearStall+0x106>
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c74:	82bb      	strh	r3, [r7, #20]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	441a      	add	r2, r3
 8008c80:	8abb      	ldrh	r3, [r7, #20]
 8008c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cac:	827b      	strh	r3, [r7, #18]
 8008cae:	8a7b      	ldrh	r3, [r7, #18]
 8008cb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cb4:	827b      	strh	r3, [r7, #18]
 8008cb6:	8a7b      	ldrh	r3, [r7, #18]
 8008cb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cbc:	827b      	strh	r3, [r7, #18]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	441a      	add	r2, r3
 8008cc8:	8a7b      	ldrh	r3, [r7, #18]
 8008cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bc80      	pop	{r7}
 8008ce8:	4770      	bx	lr

08008cea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d103      	bne.n	8008d04 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2280      	movs	r2, #128	; 0x80
 8008d00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr

08008d10 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d36:	68fb      	ldr	r3, [r7, #12]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc80      	pop	{r7}
 8008d40:	4770      	bx	lr

08008d42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b08d      	sub	sp, #52	; 0x34
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	461a      	mov	r2, r3
 8008d50:	460b      	mov	r3, r1
 8008d52:	80fb      	strh	r3, [r7, #6]
 8008d54:	4613      	mov	r3, r2
 8008d56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d58:	88bb      	ldrh	r3, [r7, #4]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	085b      	lsrs	r3, r3, #1
 8008d5e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d68:	88fb      	ldrh	r3, [r7, #6]
 8008d6a:	005a      	lsls	r2, r3, #1
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d74:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d7a:	e01e      	b.n	8008dba <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	3301      	adds	r3, #1
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	461a      	mov	r2, r3
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	3302      	adds	r3, #2
 8008da6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	3302      	adds	r3, #2
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	3301      	adds	r3, #1
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	3b01      	subs	r3, #1
 8008db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1dd      	bne.n	8008d7c <USB_WritePMA+0x3a>
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	3734      	adds	r7, #52	; 0x34
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc80      	pop	{r7}
 8008dca:	4770      	bx	lr

08008dcc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b08b      	sub	sp, #44	; 0x2c
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	460b      	mov	r3, r1
 8008ddc:	80fb      	strh	r3, [r7, #6]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008de2:	88bb      	ldrh	r3, [r7, #4]
 8008de4:	085b      	lsrs	r3, r3, #1
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008df2:	88fb      	ldrh	r3, [r7, #6]
 8008df4:	005a      	lsls	r2, r3, #1
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dfe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24
 8008e04:	e01b      	b.n	8008e3e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	3302      	adds	r3, #2
 8008e12:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	0a1b      	lsrs	r3, r3, #8
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	3302      	adds	r3, #2
 8008e36:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e0      	bne.n	8008e06 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008e44:	88bb      	ldrh	r3, [r7, #4]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d007      	beq.n	8008e60 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	701a      	strb	r2, [r3, #0]
  }
}
 8008e60:	bf00      	nop
 8008e62:	372c      	adds	r7, #44	; 0x2c
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr

08008e6a <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008e76:	2304      	movs	r3, #4
 8008e78:	2203      	movs	r2, #3
 8008e7a:	2181      	movs	r1, #129	; 0x81
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 fc36 	bl	800a6ee <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8008e88:	2010      	movs	r0, #16
 8008e8a:	f001 fd45 	bl	800a918 <USBD_static_malloc>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if (pdev->pClassData == NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e005      	b.n	8008eb0 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008eaa:	2200      	movs	r2, #0
 8008eac:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008ec4:	2181      	movs	r1, #129	; 0x81
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 fc37 	bl	800a73a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d009      	beq.n	8008ef0 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 fd24 	bl	800a930 <USBD_static_free>
    pdev->pClassData = NULL;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b088      	sub	sp, #32
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f0c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d045      	beq.n	8008fb6 <USBD_HID_Setup+0xba>
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	f040 80d3 	bne.w	80090d6 <USBD_HID_Setup+0x1da>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	785b      	ldrb	r3, [r3, #1]
 8008f34:	3b02      	subs	r3, #2
 8008f36:	2b09      	cmp	r3, #9
 8008f38:	d835      	bhi.n	8008fa6 <USBD_HID_Setup+0xaa>
 8008f3a:	a201      	add	r2, pc, #4	; (adr r2, 8008f40 <USBD_HID_Setup+0x44>)
 8008f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f40:	08008f97 	.word	0x08008f97
 8008f44:	08008f77 	.word	0x08008f77
 8008f48:	08008fa7 	.word	0x08008fa7
 8008f4c:	08008fa7 	.word	0x08008fa7
 8008f50:	08008fa7 	.word	0x08008fa7
 8008f54:	08008fa7 	.word	0x08008fa7
 8008f58:	08008fa7 	.word	0x08008fa7
 8008f5c:	08008fa7 	.word	0x08008fa7
 8008f60:	08008f85 	.word	0x08008f85
 8008f64:	08008f69 	.word	0x08008f69
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	885b      	ldrh	r3, [r3, #2]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	461a      	mov	r2, r3
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	601a      	str	r2, [r3, #0]
      break;
 8008f74:	e01e      	b.n	8008fb4 <USBD_HID_Setup+0xb8>

    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 f8d0 	bl	800a122 <USBD_CtlSendData>
      break;
 8008f82:	e017      	b.n	8008fb4 <USBD_HID_Setup+0xb8>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	885b      	ldrh	r3, [r3, #2]
 8008f88:	0a1b      	lsrs	r3, r3, #8
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	461a      	mov	r2, r3
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	605a      	str	r2, [r3, #4]
      break;
 8008f94:	e00e      	b.n	8008fb4 <USBD_HID_Setup+0xb8>

    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f001 f8bf 	bl	800a122 <USBD_CtlSendData>
      break;
 8008fa4:	e006      	b.n	8008fb4 <USBD_HID_Setup+0xb8>

    default:
      USBD_CtlError (pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f850 	bl	800a04e <USBD_CtlError>
      ret = USBD_FAIL;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb2:	bf00      	nop
    }
    break;
 8008fb4:	e096      	b.n	80090e4 <USBD_HID_Setup+0x1e8>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	2b0b      	cmp	r3, #11
 8008fbc:	f200 8083 	bhi.w	80090c6 <USBD_HID_Setup+0x1ca>
 8008fc0:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <USBD_HID_Setup+0xcc>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08008ff9 	.word	0x08008ff9
 8008fcc:	080090c7 	.word	0x080090c7
 8008fd0:	080090c7 	.word	0x080090c7
 8008fd4:	080090c7 	.word	0x080090c7
 8008fd8:	080090c7 	.word	0x080090c7
 8008fdc:	080090c7 	.word	0x080090c7
 8008fe0:	08009021 	.word	0x08009021
 8008fe4:	080090c7 	.word	0x080090c7
 8008fe8:	080090c7 	.word	0x080090c7
 8008fec:	080090c7 	.word	0x080090c7
 8008ff0:	08009079 	.word	0x08009079
 8008ff4:	080090a1 	.word	0x080090a1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d107      	bne.n	8009012 <USBD_HID_Setup+0x116>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009002:	f107 030e 	add.w	r3, r7, #14
 8009006:	2202      	movs	r2, #2
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 f889 	bl	800a122 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009010:	e060      	b.n	80090d4 <USBD_HID_Setup+0x1d8>
        USBD_CtlError (pdev, req);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 f81a 	bl	800a04e <USBD_CtlError>
			  ret = USBD_FAIL;
 800901a:	2302      	movs	r3, #2
 800901c:	75fb      	strb	r3, [r7, #23]
      break;
 800901e:	e059      	b.n	80090d4 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_DESCRIPTOR:
      if(req->wValue >> 8 == HID_REPORT_DESC)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	885b      	ldrh	r3, [r3, #2]
 8009024:	0a1b      	lsrs	r3, r3, #8
 8009026:	b29b      	uxth	r3, r3
 8009028:	2b22      	cmp	r3, #34	; 0x22
 800902a:	d108      	bne.n	800903e <USBD_HID_Setup+0x142>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	88db      	ldrh	r3, [r3, #6]
 8009030:	2b3f      	cmp	r3, #63	; 0x3f
 8009032:	bf28      	it	cs
 8009034:	233f      	movcs	r3, #63	; 0x3f
 8009036:	83fb      	strh	r3, [r7, #30]
        pbuf = HID_MOUSE_ReportDesc;
 8009038:	4b2d      	ldr	r3, [pc, #180]	; (80090f0 <USBD_HID_Setup+0x1f4>)
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	e015      	b.n	800906a <USBD_HID_Setup+0x16e>
      }
      else if(req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	885b      	ldrh	r3, [r3, #2]
 8009042:	0a1b      	lsrs	r3, r3, #8
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b21      	cmp	r3, #33	; 0x21
 8009048:	d108      	bne.n	800905c <USBD_HID_Setup+0x160>
      {
        pbuf = USBD_HID_Desc;
 800904a:	4b2a      	ldr	r3, [pc, #168]	; (80090f4 <USBD_HID_Setup+0x1f8>)
 800904c:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	88db      	ldrh	r3, [r3, #6]
 8009052:	2b09      	cmp	r3, #9
 8009054:	bf28      	it	cs
 8009056:	2309      	movcs	r3, #9
 8009058:	83fb      	strh	r3, [r7, #30]
 800905a:	e006      	b.n	800906a <USBD_HID_Setup+0x16e>
      }
      else
      {
        USBD_CtlError (pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fff5 	bl	800a04e <USBD_CtlError>
        ret = USBD_FAIL;
 8009064:	2302      	movs	r3, #2
 8009066:	75fb      	strb	r3, [r7, #23]
        break;
 8009068:	e034      	b.n	80090d4 <USBD_HID_Setup+0x1d8>
      }
      USBD_CtlSendData (pdev, pbuf, len);
 800906a:	8bfb      	ldrh	r3, [r7, #30]
 800906c:	461a      	mov	r2, r3
 800906e:	69b9      	ldr	r1, [r7, #24]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 f856 	bl	800a122 <USBD_CtlSendData>
      break;
 8009076:	e02d      	b.n	80090d4 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800907e:	2b03      	cmp	r3, #3
 8009080:	d107      	bne.n	8009092 <USBD_HID_Setup+0x196>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	3308      	adds	r3, #8
 8009086:	2201      	movs	r2, #1
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f001 f849 	bl	800a122 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009090:	e020      	b.n	80090d4 <USBD_HID_Setup+0x1d8>
        USBD_CtlError (pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 ffda 	bl	800a04e <USBD_CtlError>
			  ret = USBD_FAIL;
 800909a:	2302      	movs	r3, #2
 800909c:	75fb      	strb	r3, [r7, #23]
      break;
 800909e:	e019      	b.n	80090d4 <USBD_HID_Setup+0x1d8>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d106      	bne.n	80090b8 <USBD_HID_Setup+0x1bc>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	885b      	ldrh	r3, [r3, #2]
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	461a      	mov	r2, r3
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80090b6:	e00d      	b.n	80090d4 <USBD_HID_Setup+0x1d8>
        USBD_CtlError (pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 ffc7 	bl	800a04e <USBD_CtlError>
			  ret = USBD_FAIL;
 80090c0:	2302      	movs	r3, #2
 80090c2:	75fb      	strb	r3, [r7, #23]
      break;
 80090c4:	e006      	b.n	80090d4 <USBD_HID_Setup+0x1d8>

    default:
      USBD_CtlError (pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 ffc0 	bl	800a04e <USBD_CtlError>
      ret = USBD_FAIL;
 80090ce:	2302      	movs	r3, #2
 80090d0:	75fb      	strb	r3, [r7, #23]
      break;
 80090d2:	bf00      	nop
    }
    break;
 80090d4:	e006      	b.n	80090e4 <USBD_HID_Setup+0x1e8>

  default:
    USBD_CtlError (pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 ffb8 	bl	800a04e <USBD_CtlError>
    ret = USBD_FAIL;
 80090de:	2302      	movs	r3, #2
 80090e0:	75fb      	strb	r3, [r7, #23]
    break;
 80090e2:	bf00      	nop
  }

  return ret;
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20000350 	.word	0x20000350
 80090f4:	20000338 	.word	0x20000338

080090f8 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4613      	mov	r3, r2
 8009104:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800910c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009114:	2b03      	cmp	r3, #3
 8009116:	d10c      	bne.n	8009132 <USBD_HID_SendReport+0x3a>
  {
    if(hhid->state == HID_IDLE)
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	7b1b      	ldrb	r3, [r3, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d108      	bne.n	8009132 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2201      	movs	r2, #1
 8009124:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev,
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	2181      	movs	r1, #129	; 0x81
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f001 fbac 	bl	800a88a <USBD_LL_Transmit>
                        HID_EPIN_ADDR,
                        report,
                        len);
    }
  }
  return USBD_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc (uint16_t *length)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgFSDesc);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2222      	movs	r2, #34	; 0x22
 8009148:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800914a:	4b03      	ldr	r3, [pc, #12]	; (8009158 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	bc80      	pop	{r7}
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	200002cc 	.word	0x200002cc

0800915c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc (uint16_t *length)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgHSDesc);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2222      	movs	r2, #34	; 0x22
 8009168:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800916a:	4b03      	ldr	r3, [pc, #12]	; (8009178 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	bc80      	pop	{r7}
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	200002f0 	.word	0x200002f0

0800917c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_OtherSpeedCfgDesc);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2222      	movs	r2, #34	; 0x22
 8009188:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800918a:	4b03      	ldr	r3, [pc, #12]	; (8009198 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800918c:	4618      	mov	r0, r3
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	bc80      	pop	{r7}
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	20000314 	.word	0x20000314

0800919c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80091ae:	2200      	movs	r2, #0
 80091b0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bc80      	pop	{r7}
 80091bc:	4770      	bx	lr
	...

080091c0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	220a      	movs	r2, #10
 80091cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80091ce:	4b03      	ldr	r3, [pc, #12]	; (80091dc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc80      	pop	{r7}
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000344 	.word	0x20000344

080091e0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	4613      	mov	r3, r2
 80091ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091f4:	2302      	movs	r3, #2
 80091f6:	e01a      	b.n	800922e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	79fa      	ldrb	r2, [r7, #7]
 8009224:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f001 f9fe 	bl	800a628 <USBD_LL_Init>

  return USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009236:	b480      	push	{r7}
 8009238:	b085      	sub	sp, #20
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d006      	beq.n	8009258 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
 8009256:	e001      	b.n	800925c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009258:	2302      	movs	r3, #2
 800925a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	bc80      	pop	{r7}
 8009266:	4770      	bx	lr

08009268 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 fa21 	bl	800a6b8 <USBD_LL_Start>

  return USBD_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	bc80      	pop	{r7}
 8009292:	4770      	bx	lr

08009294 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80092a0:	2302      	movs	r3, #2
 80092a2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00c      	beq.n	80092c8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	4611      	mov	r1, r2
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fe63 	bl	8009fd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800931e:	461a      	mov	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800932c:	f003 031f 	and.w	r3, r3, #31
 8009330:	2b02      	cmp	r3, #2
 8009332:	d016      	beq.n	8009362 <USBD_LL_SetupStage+0x6a>
 8009334:	2b02      	cmp	r3, #2
 8009336:	d81c      	bhi.n	8009372 <USBD_LL_SetupStage+0x7a>
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <USBD_LL_SetupStage+0x4a>
 800933c:	2b01      	cmp	r3, #1
 800933e:	d008      	beq.n	8009352 <USBD_LL_SetupStage+0x5a>
 8009340:	e017      	b.n	8009372 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f9c6 	bl	80096dc <USBD_StdDevReq>
    break;
 8009350:	e01a      	b.n	8009388 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fa28 	bl	80097b0 <USBD_StdItfReq>
    break;
 8009360:	e012      	b.n	8009388 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fa68 	bl	8009840 <USBD_StdEPReq>
    break;
 8009370:	e00a      	b.n	8009388 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009378:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800937c:	b2db      	uxtb	r3, r3
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f001 f9f9 	bl	800a778 <USBD_LL_StallEP>
    break;
 8009386:	bf00      	nop
  }

  return USBD_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b086      	sub	sp, #24
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	460b      	mov	r3, r1
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d14b      	bne.n	800943e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80093ac:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d134      	bne.n	8009422 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	68da      	ldr	r2, [r3, #12]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d919      	bls.n	80093f8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	68da      	ldr	r2, [r3, #12]
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	1ad2      	subs	r2, r2, r3
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	68da      	ldr	r2, [r3, #12]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80093da:	429a      	cmp	r2, r3
 80093dc:	d203      	bcs.n	80093e6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	e002      	b.n	80093ec <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	461a      	mov	r2, r3
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fec4 	bl	800a17e <USBD_CtlContinueRx>
 80093f6:	e038      	b.n	800946a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00a      	beq.n	800941a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800940a:	2b03      	cmp	r3, #3
 800940c:	d105      	bne.n	800941a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 fec1 	bl	800a1a2 <USBD_CtlSendStatus>
 8009420:	e023      	b.n	800946a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009428:	2b05      	cmp	r3, #5
 800942a:	d11e      	bne.n	800946a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8009434:	2100      	movs	r1, #0
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f001 f99e 	bl	800a778 <USBD_LL_StallEP>
 800943c:	e015      	b.n	800946a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00d      	beq.n	8009466 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8009450:	2b03      	cmp	r3, #3
 8009452:	d108      	bne.n	8009466 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	7afa      	ldrb	r2, [r7, #11]
 800945e:	4611      	mov	r1, r2
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	4798      	blx	r3
 8009464:	e001      	b.n	800946a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009466:	2302      	movs	r3, #2
 8009468:	e000      	b.n	800946c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	460b      	mov	r3, r1
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009482:	7afb      	ldrb	r3, [r7, #11]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d17f      	bne.n	8009588 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3314      	adds	r3, #20
 800948c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009494:	2b02      	cmp	r3, #2
 8009496:	d15c      	bne.n	8009552 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	68da      	ldr	r2, [r3, #12]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d915      	bls.n	80094d0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	1ad2      	subs	r2, r2, r3
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 fe4c 	bl	800a15a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80094c2:	2300      	movs	r3, #0
 80094c4:	2200      	movs	r2, #0
 80094c6:	2100      	movs	r1, #0
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f001 fa01 	bl	800a8d0 <USBD_LL_PrepareReceive>
 80094ce:	e04e      	b.n	800956e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	6912      	ldr	r2, [r2, #16]
 80094d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80094dc:	fb01 f202 	mul.w	r2, r1, r2
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d11c      	bne.n	8009520 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	689a      	ldr	r2, [r3, #8]
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d316      	bcc.n	8009520 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d20f      	bcs.n	8009520 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009500:	2200      	movs	r2, #0
 8009502:	2100      	movs	r1, #0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fe28 	bl	800a15a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009512:	2300      	movs	r3, #0
 8009514:	2200      	movs	r2, #0
 8009516:	2100      	movs	r1, #0
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f001 f9d9 	bl	800a8d0 <USBD_LL_PrepareReceive>
 800951e:	e026      	b.n	800956e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009532:	2b03      	cmp	r3, #3
 8009534:	d105      	bne.n	8009542 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009542:	2180      	movs	r1, #128	; 0x80
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f001 f917 	bl	800a778 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 fe3c 	bl	800a1c8 <USBD_CtlReceiveStatus>
 8009550:	e00d      	b.n	800956e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009558:	2b04      	cmp	r3, #4
 800955a:	d004      	beq.n	8009566 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009562:	2b00      	cmp	r3, #0
 8009564:	d103      	bne.n	800956e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009566:	2180      	movs	r1, #128	; 0x80
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f001 f905 	bl	800a778 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8009574:	2b01      	cmp	r3, #1
 8009576:	d11d      	bne.n	80095b4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff fe81 	bl	8009280 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8009586:	e015      	b.n	80095b4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00d      	beq.n	80095b0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800959a:	2b03      	cmp	r3, #3
 800959c:	d108      	bne.n	80095b0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	7afa      	ldrb	r2, [r7, #11]
 80095a8:	4611      	mov	r1, r2
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	4798      	blx	r3
 80095ae:	e001      	b.n	80095b4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095b0:	2302      	movs	r3, #2
 80095b2:	e000      	b.n	80095b6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095c6:	2340      	movs	r3, #64	; 0x40
 80095c8:	2200      	movs	r2, #0
 80095ca:	2100      	movs	r1, #0
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 f88e 	bl	800a6ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2240      	movs	r2, #64	; 0x40
 80095de:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095e2:	2340      	movs	r3, #64	; 0x40
 80095e4:	2200      	movs	r2, #0
 80095e6:	2180      	movs	r1, #128	; 0x80
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f880 	bl	800a6ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2240      	movs	r2, #64	; 0x40
 80095f8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800961e:	2b00      	cmp	r3, #0
 8009620:	d009      	beq.n	8009636 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6852      	ldr	r2, [r2, #4]
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	4611      	mov	r1, r2
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	4798      	blx	r3
  }

  return USBD_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	bc80      	pop	{r7}
 800965c:	4770      	bx	lr

0800965e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2204      	movs	r2, #4
 8009676:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	bc80      	pop	{r7}
 8009684:	4770      	bx	lr

08009686 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bc80      	pop	{r7}
 80096a4:	4770      	bx	lr

080096a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096b4:	2b03      	cmp	r3, #3
 80096b6:	d10b      	bne.n	80096d0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d005      	beq.n	80096d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096f2:	2b40      	cmp	r3, #64	; 0x40
 80096f4:	d005      	beq.n	8009702 <USBD_StdDevReq+0x26>
 80096f6:	2b40      	cmp	r3, #64	; 0x40
 80096f8:	d84f      	bhi.n	800979a <USBD_StdDevReq+0xbe>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <USBD_StdDevReq+0x36>
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d14b      	bne.n	800979a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	4798      	blx	r3
    break;
 8009710:	e048      	b.n	80097a4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	2b09      	cmp	r3, #9
 8009718:	d839      	bhi.n	800978e <USBD_StdDevReq+0xb2>
 800971a:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <USBD_StdDevReq+0x44>)
 800971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009720:	08009771 	.word	0x08009771
 8009724:	08009785 	.word	0x08009785
 8009728:	0800978f 	.word	0x0800978f
 800972c:	0800977b 	.word	0x0800977b
 8009730:	0800978f 	.word	0x0800978f
 8009734:	08009753 	.word	0x08009753
 8009738:	08009749 	.word	0x08009749
 800973c:	0800978f 	.word	0x0800978f
 8009740:	08009767 	.word	0x08009767
 8009744:	0800975d 	.word	0x0800975d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f9da 	bl	8009b04 <USBD_GetDescriptor>
      break;
 8009750:	e022      	b.n	8009798 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 facf 	bl	8009cf8 <USBD_SetAddress>
      break;
 800975a:	e01d      	b.n	8009798 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fb0e 	bl	8009d80 <USBD_SetConfig>
      break;
 8009764:	e018      	b.n	8009798 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fb97 	bl	8009e9c <USBD_GetConfig>
      break;
 800976e:	e013      	b.n	8009798 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fbc7 	bl	8009f06 <USBD_GetStatus>
      break;
 8009778:	e00e      	b.n	8009798 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fbf5 	bl	8009f6c <USBD_SetFeature>
      break;
 8009782:	e009      	b.n	8009798 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fc04 	bl	8009f94 <USBD_ClrFeature>
      break;
 800978c:	e004      	b.n	8009798 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fc5c 	bl	800a04e <USBD_CtlError>
      break;
 8009796:	bf00      	nop
    }
    break;
 8009798:	e004      	b.n	80097a4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fc56 	bl	800a04e <USBD_CtlError>
    break;
 80097a2:	bf00      	nop
  }

  return ret;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop

080097b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097c6:	2b40      	cmp	r3, #64	; 0x40
 80097c8:	d005      	beq.n	80097d6 <USBD_StdItfReq+0x26>
 80097ca:	2b40      	cmp	r3, #64	; 0x40
 80097cc:	d82e      	bhi.n	800982c <USBD_StdItfReq+0x7c>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <USBD_StdItfReq+0x26>
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	d12a      	bne.n	800982c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80097dc:	3b01      	subs	r3, #1
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d81d      	bhi.n	800981e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	889b      	ldrh	r3, [r3, #4]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d813      	bhi.n	8009814 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	88db      	ldrh	r3, [r3, #6]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d110      	bne.n	8009828 <USBD_StdItfReq+0x78>
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10d      	bne.n	8009828 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fcc8 	bl	800a1a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009812:	e009      	b.n	8009828 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fc19 	bl	800a04e <USBD_CtlError>
      break;
 800981c:	e004      	b.n	8009828 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fc14 	bl	800a04e <USBD_CtlError>
      break;
 8009826:	e000      	b.n	800982a <USBD_StdItfReq+0x7a>
      break;
 8009828:	bf00      	nop
    }
    break;
 800982a:	e004      	b.n	8009836 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fc0d 	bl	800a04e <USBD_CtlError>
    break;
 8009834:	bf00      	nop
  }

  return USBD_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	889b      	ldrh	r3, [r3, #4]
 8009852:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800985c:	2b40      	cmp	r3, #64	; 0x40
 800985e:	d007      	beq.n	8009870 <USBD_StdEPReq+0x30>
 8009860:	2b40      	cmp	r3, #64	; 0x40
 8009862:	f200 8144 	bhi.w	8009aee <USBD_StdEPReq+0x2ae>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <USBD_StdEPReq+0x40>
 800986a:	2b20      	cmp	r3, #32
 800986c:	f040 813f 	bne.w	8009aee <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	4798      	blx	r3
    break;
 800987e:	e13b      	b.n	8009af8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009888:	2b20      	cmp	r3, #32
 800988a:	d10a      	bne.n	80098a2 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	e12b      	b.n	8009afa <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	785b      	ldrb	r3, [r3, #1]
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d007      	beq.n	80098ba <USBD_StdEPReq+0x7a>
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	f300 8119 	bgt.w	8009ae2 <USBD_StdEPReq+0x2a2>
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d072      	beq.n	800999a <USBD_StdEPReq+0x15a>
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d03a      	beq.n	800992e <USBD_StdEPReq+0xee>
 80098b8:	e113      	b.n	8009ae2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d002      	beq.n	80098ca <USBD_StdEPReq+0x8a>
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d015      	beq.n	80098f4 <USBD_StdEPReq+0xb4>
 80098c8:	e02b      	b.n	8009922 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00c      	beq.n	80098ea <USBD_StdEPReq+0xaa>
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	2b80      	cmp	r3, #128	; 0x80
 80098d4:	d009      	beq.n	80098ea <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 ff4c 	bl	800a778 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80098e0:	2180      	movs	r1, #128	; 0x80
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 ff48 	bl	800a778 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80098e8:	e020      	b.n	800992c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fbae 	bl	800a04e <USBD_CtlError>
        break;
 80098f2:	e01b      	b.n	800992c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	885b      	ldrh	r3, [r3, #2]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10e      	bne.n	800991a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <USBD_StdEPReq+0xda>
 8009902:	7bbb      	ldrb	r3, [r7, #14]
 8009904:	2b80      	cmp	r3, #128	; 0x80
 8009906:	d008      	beq.n	800991a <USBD_StdEPReq+0xda>
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	88db      	ldrh	r3, [r3, #6]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d104      	bne.n	800991a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 ff2f 	bl	800a778 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fc41 	bl	800a1a2 <USBD_CtlSendStatus>

        break;
 8009920:	e004      	b.n	800992c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fb92 	bl	800a04e <USBD_CtlError>
        break;
 800992a:	bf00      	nop
      }
      break;
 800992c:	e0de      	b.n	8009aec <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009934:	2b02      	cmp	r3, #2
 8009936:	d002      	beq.n	800993e <USBD_StdEPReq+0xfe>
 8009938:	2b03      	cmp	r3, #3
 800993a:	d015      	beq.n	8009968 <USBD_StdEPReq+0x128>
 800993c:	e026      	b.n	800998c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00c      	beq.n	800995e <USBD_StdEPReq+0x11e>
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	2b80      	cmp	r3, #128	; 0x80
 8009948:	d009      	beq.n	800995e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800994a:	7bbb      	ldrb	r3, [r7, #14]
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 ff12 	bl	800a778 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009954:	2180      	movs	r1, #128	; 0x80
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 ff0e 	bl	800a778 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800995c:	e01c      	b.n	8009998 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fb74 	bl	800a04e <USBD_CtlError>
        break;
 8009966:	e017      	b.n	8009998 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	885b      	ldrh	r3, [r3, #2]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d112      	bne.n	8009996 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009976:	2b00      	cmp	r3, #0
 8009978:	d004      	beq.n	8009984 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 ff19 	bl	800a7b6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fc0c 	bl	800a1a2 <USBD_CtlSendStatus>
        }
        break;
 800998a:	e004      	b.n	8009996 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fb5d 	bl	800a04e <USBD_CtlError>
        break;
 8009994:	e000      	b.n	8009998 <USBD_StdEPReq+0x158>
        break;
 8009996:	bf00      	nop
      }
      break;
 8009998:	e0a8      	b.n	8009aec <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d002      	beq.n	80099aa <USBD_StdEPReq+0x16a>
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d031      	beq.n	8009a0c <USBD_StdEPReq+0x1cc>
 80099a8:	e095      	b.n	8009ad6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d007      	beq.n	80099c0 <USBD_StdEPReq+0x180>
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
 80099b2:	2b80      	cmp	r3, #128	; 0x80
 80099b4:	d004      	beq.n	80099c0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fb48 	bl	800a04e <USBD_CtlError>
          break;
 80099be:	e08f      	b.n	8009ae0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80099c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	da0b      	bge.n	80099e0 <USBD_StdEPReq+0x1a0>
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	3310      	adds	r3, #16
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	4413      	add	r3, r2
 80099dc:	3304      	adds	r3, #4
 80099de:	e00a      	b.n	80099f6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	4413      	add	r3, r2
 80099f6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2202      	movs	r2, #2
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fb8c 	bl	800a122 <USBD_CtlSendData>
          break;
 8009a0a:	e069      	b.n	8009ae0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009a0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	da11      	bge.n	8009a38 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	f003 020f 	and.w	r2, r3, #15
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	440b      	add	r3, r1
 8009a26:	3318      	adds	r3, #24
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d117      	bne.n	8009a5e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fb0c 	bl	800a04e <USBD_CtlError>
            break;
 8009a36:	e053      	b.n	8009ae0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	f003 020f 	and.w	r2, r3, #15
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 faf9 	bl	800a04e <USBD_CtlError>
            break;
 8009a5c:	e040      	b.n	8009ae0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da0b      	bge.n	8009a7e <USBD_StdEPReq+0x23e>
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	3310      	adds	r3, #16
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	4413      	add	r3, r2
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	e00a      	b.n	8009a94 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	4413      	add	r3, r2
 8009a94:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <USBD_StdEPReq+0x262>
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	2b80      	cmp	r3, #128	; 0x80
 8009aa0:	d103      	bne.n	8009aaa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	e00e      	b.n	8009ac8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fea0 	bl	800a7f4 <USBD_LL_IsStallEP>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2201      	movs	r2, #1
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	e002      	b.n	8009ac8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2202      	movs	r2, #2
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fb27 	bl	800a122 <USBD_CtlSendData>
          break;
 8009ad4:	e004      	b.n	8009ae0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fab8 	bl	800a04e <USBD_CtlError>
        break;
 8009ade:	bf00      	nop
      }
      break;
 8009ae0:	e004      	b.n	8009aec <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fab2 	bl	800a04e <USBD_CtlError>
      break;
 8009aea:	bf00      	nop
    }
    break;
 8009aec:	e004      	b.n	8009af8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 faac 	bl	800a04e <USBD_CtlError>
    break;
 8009af6:	bf00      	nop
  }

  return ret;
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	885b      	ldrh	r3, [r3, #2]
 8009b12:	0a1b      	lsrs	r3, r3, #8
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	3b01      	subs	r3, #1
 8009b18:	2b06      	cmp	r3, #6
 8009b1a:	f200 80c9 	bhi.w	8009cb0 <USBD_GetDescriptor+0x1ac>
 8009b1e:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <USBD_GetDescriptor+0x20>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b41 	.word	0x08009b41
 8009b28:	08009b59 	.word	0x08009b59
 8009b2c:	08009b99 	.word	0x08009b99
 8009b30:	08009cb1 	.word	0x08009cb1
 8009b34:	08009cb1 	.word	0x08009cb1
 8009b38:	08009c5d 	.word	0x08009c5d
 8009b3c:	08009c83 	.word	0x08009c83
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	7c12      	ldrb	r2, [r2, #16]
 8009b4c:	f107 010a 	add.w	r1, r7, #10
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
 8009b54:	60f8      	str	r0, [r7, #12]
    break;
 8009b56:	e0b0      	b.n	8009cba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	7c1b      	ldrb	r3, [r3, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10d      	bne.n	8009b7c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b68:	f107 020a 	add.w	r2, r7, #10
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	4798      	blx	r3
 8009b70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3301      	adds	r3, #1
 8009b76:	2202      	movs	r2, #2
 8009b78:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009b7a:	e09e      	b.n	8009cba <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	f107 020a 	add.w	r2, r7, #10
 8009b88:	4610      	mov	r0, r2
 8009b8a:	4798      	blx	r3
 8009b8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3301      	adds	r3, #1
 8009b92:	2202      	movs	r2, #2
 8009b94:	701a      	strb	r2, [r3, #0]
    break;
 8009b96:	e090      	b.n	8009cba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	885b      	ldrh	r3, [r3, #2]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b05      	cmp	r3, #5
 8009ba0:	d856      	bhi.n	8009c50 <USBD_GetDescriptor+0x14c>
 8009ba2:	a201      	add	r2, pc, #4	; (adr r2, 8009ba8 <USBD_GetDescriptor+0xa4>)
 8009ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba8:	08009bc1 	.word	0x08009bc1
 8009bac:	08009bd9 	.word	0x08009bd9
 8009bb0:	08009bf1 	.word	0x08009bf1
 8009bb4:	08009c09 	.word	0x08009c09
 8009bb8:	08009c21 	.word	0x08009c21
 8009bbc:	08009c39 	.word	0x08009c39
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	7c12      	ldrb	r2, [r2, #16]
 8009bcc:	f107 010a 	add.w	r1, r7, #10
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4798      	blx	r3
 8009bd4:	60f8      	str	r0, [r7, #12]
      break;
 8009bd6:	e040      	b.n	8009c5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 010a 	add.w	r1, r7, #10
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
      break;
 8009bee:	e034      	b.n	8009c5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	7c12      	ldrb	r2, [r2, #16]
 8009bfc:	f107 010a 	add.w	r1, r7, #10
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
 8009c04:	60f8      	str	r0, [r7, #12]
      break;
 8009c06:	e028      	b.n	8009c5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	7c12      	ldrb	r2, [r2, #16]
 8009c14:	f107 010a 	add.w	r1, r7, #10
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4798      	blx	r3
 8009c1c:	60f8      	str	r0, [r7, #12]
      break;
 8009c1e:	e01c      	b.n	8009c5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	7c12      	ldrb	r2, [r2, #16]
 8009c2c:	f107 010a 	add.w	r1, r7, #10
 8009c30:	4610      	mov	r0, r2
 8009c32:	4798      	blx	r3
 8009c34:	60f8      	str	r0, [r7, #12]
      break;
 8009c36:	e010      	b.n	8009c5a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	7c12      	ldrb	r2, [r2, #16]
 8009c44:	f107 010a 	add.w	r1, r7, #10
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	60f8      	str	r0, [r7, #12]
      break;
 8009c4e:	e004      	b.n	8009c5a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9fb 	bl	800a04e <USBD_CtlError>
      return;
 8009c58:	e04b      	b.n	8009cf2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8009c5a:	e02e      	b.n	8009cba <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	7c1b      	ldrb	r3, [r3, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d109      	bne.n	8009c78 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c6c:	f107 020a 	add.w	r2, r7, #10
 8009c70:	4610      	mov	r0, r2
 8009c72:	4798      	blx	r3
 8009c74:	60f8      	str	r0, [r7, #12]
      break;
 8009c76:	e020      	b.n	8009cba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f9e7 	bl	800a04e <USBD_CtlError>
      return;
 8009c80:	e037      	b.n	8009cf2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	7c1b      	ldrb	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10d      	bne.n	8009ca6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c92:	f107 020a 	add.w	r2, r7, #10
 8009c96:	4610      	mov	r0, r2
 8009c98:	4798      	blx	r3
 8009c9a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	701a      	strb	r2, [r3, #0]
      break;
 8009ca4:	e009      	b.n	8009cba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f9d0 	bl	800a04e <USBD_CtlError>
      return;
 8009cae:	e020      	b.n	8009cf2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f9cb 	bl	800a04e <USBD_CtlError>
    return;
 8009cb8:	e01b      	b.n	8009cf2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009cba:	897b      	ldrh	r3, [r7, #10]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d011      	beq.n	8009ce4 <USBD_GetDescriptor+0x1e0>
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	88db      	ldrh	r3, [r3, #6]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00d      	beq.n	8009ce4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	88da      	ldrh	r2, [r3, #6]
 8009ccc:	897b      	ldrh	r3, [r7, #10]
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	bf28      	it	cs
 8009cd2:	4613      	movcs	r3, r2
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009cd8:	897b      	ldrh	r3, [r7, #10]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68f9      	ldr	r1, [r7, #12]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fa1f 	bl	800a122 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	88db      	ldrh	r3, [r3, #6]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fa58 	bl	800a1a2 <USBD_CtlSendStatus>
  }
}
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	889b      	ldrh	r3, [r3, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d130      	bne.n	8009d6c <USBD_SetAddress+0x74>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	88db      	ldrh	r3, [r3, #6]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d12c      	bne.n	8009d6c <USBD_SetAddress+0x74>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	885b      	ldrh	r3, [r3, #2]
 8009d16:	2b7f      	cmp	r3, #127	; 0x7f
 8009d18:	d828      	bhi.n	8009d6c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	885b      	ldrh	r3, [r3, #2]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d104      	bne.n	8009d3a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f98b 	bl	800a04e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d38:	e01d      	b.n	8009d76 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	7bfa      	ldrb	r2, [r7, #15]
 8009d3e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fd80 	bl	800a84c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fa28 	bl	800a1a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d004      	beq.n	8009d62 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d60:	e009      	b.n	8009d76 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d6a:	e004      	b.n	8009d76 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f96d 	bl	800a04e <USBD_CtlError>
  }
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	885b      	ldrh	r3, [r3, #2]
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	4b41      	ldr	r3, [pc, #260]	; (8009e98 <USBD_SetConfig+0x118>)
 8009d92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d94:	4b40      	ldr	r3, [pc, #256]	; (8009e98 <USBD_SetConfig+0x118>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d904      	bls.n	8009da6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f955 	bl	800a04e <USBD_CtlError>
 8009da4:	e075      	b.n	8009e92 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d002      	beq.n	8009db6 <USBD_SetConfig+0x36>
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d023      	beq.n	8009dfc <USBD_SetConfig+0x7c>
 8009db4:	e062      	b.n	8009e7c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009db6:	4b38      	ldr	r3, [pc, #224]	; (8009e98 <USBD_SetConfig+0x118>)
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d01a      	beq.n	8009df4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009dbe:	4b36      	ldr	r3, [pc, #216]	; (8009e98 <USBD_SetConfig+0x118>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2203      	movs	r2, #3
 8009dcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009dd0:	4b31      	ldr	r3, [pc, #196]	; (8009e98 <USBD_SetConfig+0x118>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7ff fa5c 	bl	8009294 <USBD_SetClassConfig>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d104      	bne.n	8009dec <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f932 	bl	800a04e <USBD_CtlError>
          return;
 8009dea:	e052      	b.n	8009e92 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9d8 	bl	800a1a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009df2:	e04e      	b.n	8009e92 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f9d4 	bl	800a1a2 <USBD_CtlSendStatus>
      break;
 8009dfa:	e04a      	b.n	8009e92 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009dfc:	4b26      	ldr	r3, [pc, #152]	; (8009e98 <USBD_SetConfig+0x118>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d112      	bne.n	8009e2a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009e0c:	4b22      	ldr	r3, [pc, #136]	; (8009e98 <USBD_SetConfig+0x118>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	461a      	mov	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009e16:	4b20      	ldr	r3, [pc, #128]	; (8009e98 <USBD_SetConfig+0x118>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7ff fa58 	bl	80092d2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f9bd 	bl	800a1a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009e28:	e033      	b.n	8009e92 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009e2a:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <USBD_SetConfig+0x118>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d01d      	beq.n	8009e74 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff fa46 	bl	80092d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <USBD_SetConfig+0x118>)
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e50:	4b11      	ldr	r3, [pc, #68]	; (8009e98 <USBD_SetConfig+0x118>)
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f7ff fa1c 	bl	8009294 <USBD_SetClassConfig>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d104      	bne.n	8009e6c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f8f2 	bl	800a04e <USBD_CtlError>
          return;
 8009e6a:	e012      	b.n	8009e92 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f998 	bl	800a1a2 <USBD_CtlSendStatus>
      break;
 8009e72:	e00e      	b.n	8009e92 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f994 	bl	800a1a2 <USBD_CtlSendStatus>
      break;
 8009e7a:	e00a      	b.n	8009e92 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f8e5 	bl	800a04e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009e84:	4b04      	ldr	r3, [pc, #16]	; (8009e98 <USBD_SetConfig+0x118>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff fa21 	bl	80092d2 <USBD_ClrClassConfig>
      break;
 8009e90:	bf00      	nop
    }
  }
}
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000634 	.word	0x20000634

08009e9c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	88db      	ldrh	r3, [r3, #6]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d004      	beq.n	8009eb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f8cc 	bl	800a04e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009eb6:	e022      	b.n	8009efe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	dc02      	bgt.n	8009ec8 <USBD_GetConfig+0x2c>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	dc03      	bgt.n	8009ece <USBD_GetConfig+0x32>
 8009ec6:	e015      	b.n	8009ef4 <USBD_GetConfig+0x58>
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d00b      	beq.n	8009ee4 <USBD_GetConfig+0x48>
 8009ecc:	e012      	b.n	8009ef4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	2201      	movs	r2, #1
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f920 	bl	800a122 <USBD_CtlSendData>
      break;
 8009ee2:	e00c      	b.n	8009efe <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	2201      	movs	r2, #1
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f918 	bl	800a122 <USBD_CtlSendData>
      break;
 8009ef2:	e004      	b.n	8009efe <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f8a9 	bl	800a04e <USBD_CtlError>
      break;
 8009efc:	bf00      	nop
}
 8009efe:	bf00      	nop
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f16:	3b01      	subs	r3, #1
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d81e      	bhi.n	8009f5a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	88db      	ldrh	r3, [r3, #6]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d004      	beq.n	8009f2e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f891 	bl	800a04e <USBD_CtlError>
      break;
 8009f2c:	e01a      	b.n	8009f64 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f043 0202 	orr.w	r2, r3, #2
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	330c      	adds	r3, #12
 8009f4e:	2202      	movs	r2, #2
 8009f50:	4619      	mov	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f8e5 	bl	800a122 <USBD_CtlSendData>
    break;
 8009f58:	e004      	b.n	8009f64 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f876 	bl	800a04e <USBD_CtlError>
    break;
 8009f62:	bf00      	nop
  }
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	885b      	ldrh	r3, [r3, #2]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d106      	bne.n	8009f8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f90b 	bl	800a1a2 <USBD_CtlSendStatus>
  }

}
 8009f8c:	bf00      	nop
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d80b      	bhi.n	8009fc2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	885b      	ldrh	r3, [r3, #2]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d10c      	bne.n	8009fcc <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f8f1 	bl	800a1a2 <USBD_CtlSendStatus>
    }
    break;
 8009fc0:	e004      	b.n	8009fcc <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f842 	bl	800a04e <USBD_CtlError>
    break;
 8009fca:	e000      	b.n	8009fce <USBD_ClrFeature+0x3a>
    break;
 8009fcc:	bf00      	nop
  }
}
 8009fce:	bf00      	nop
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781a      	ldrb	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	785a      	ldrb	r2, [r3, #1]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	3302      	adds	r3, #2
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	3303      	adds	r3, #3
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	021b      	lsls	r3, r3, #8
 800a002:	b29b      	uxth	r3, r3
 800a004:	4413      	add	r3, r2
 800a006:	b29a      	uxth	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	3304      	adds	r3, #4
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	b29a      	uxth	r2, r3
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	3305      	adds	r3, #5
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	021b      	lsls	r3, r3, #8
 800a01e:	b29b      	uxth	r3, r3
 800a020:	4413      	add	r3, r2
 800a022:	b29a      	uxth	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	3306      	adds	r3, #6
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	3307      	adds	r3, #7
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	b29b      	uxth	r3, r3
 800a038:	021b      	lsls	r3, r3, #8
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	4413      	add	r3, r2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	80da      	strh	r2, [r3, #6]

}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	bc80      	pop	{r7}
 800a04c:	4770      	bx	lr

0800a04e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800a058:	2180      	movs	r1, #128	; 0x80
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fb8c 	bl	800a778 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a060:	2100      	movs	r1, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fb88 	bl	800a778 <USBD_LL_StallEP>
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d032      	beq.n	800a0ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 f834 	bl	800a0f4 <USBD_GetLen>
 800a08c:	4603      	mov	r3, r0
 800a08e:	3301      	adds	r3, #1
 800a090:	b29b      	uxth	r3, r3
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	b29a      	uxth	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	75fa      	strb	r2, [r7, #23]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	7812      	ldrb	r2, [r2, #0]
 800a0aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	75fa      	strb	r2, [r7, #23]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	2203      	movs	r2, #3
 800a0ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a0bc:	e012      	b.n	800a0e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	1c5a      	adds	r2, r3, #1
 800a0c2:	60fa      	str	r2, [r7, #12]
 800a0c4:	7dfa      	ldrb	r2, [r7, #23]
 800a0c6:	1c51      	adds	r1, r2, #1
 800a0c8:	75f9      	strb	r1, [r7, #23]
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	440a      	add	r2, r1
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	75fa      	strb	r2, [r7, #23]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	4413      	add	r3, r2
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e8      	bne.n	800a0be <USBD_GetString+0x4e>
    }
  }
}
 800a0ec:	bf00      	nop
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800a100:	e005      	b.n	800a10e <USBD_GetLen+0x1a>
    {
        len++;
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	3301      	adds	r3, #1
 800a106:	73fb      	strb	r3, [r7, #15]
        buf++;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3301      	adds	r3, #1
 800a10c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1f5      	bne.n	800a102 <USBD_GetLen+0xe>
    }

    return len;
 800a116:	7bfb      	ldrb	r3, [r7, #15]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bc80      	pop	{r7}
 800a120:	4770      	bx	lr

0800a122 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	4613      	mov	r3, r2
 800a12e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2202      	movs	r2, #2
 800a134:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800a138:	88fa      	ldrh	r2, [r7, #6]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a13e:	88fa      	ldrh	r2, [r7, #6]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a144:	88fb      	ldrh	r3, [r7, #6]
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	2100      	movs	r1, #0
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 fb9d 	bl	800a88a <USBD_LL_Transmit>

  return USBD_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	60f8      	str	r0, [r7, #12]
 800a162:	60b9      	str	r1, [r7, #8]
 800a164:	4613      	mov	r3, r2
 800a166:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a168:	88fb      	ldrh	r3, [r7, #6]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	2100      	movs	r1, #0
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 fb8b 	bl	800a88a <USBD_LL_Transmit>

  return USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	4613      	mov	r3, r2
 800a18a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a18c:	88fb      	ldrh	r3, [r7, #6]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	2100      	movs	r1, #0
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 fb9c 	bl	800a8d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b082      	sub	sp, #8
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2204      	movs	r2, #4
 800a1ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fb66 	bl	800a88a <USBD_LL_Transmit>

  return USBD_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2205      	movs	r2, #5
 800a1d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a1d8:	2300      	movs	r3, #0
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fb76 	bl	800a8d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
	...

0800a1f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	490e      	ldr	r1, [pc, #56]	; (800a230 <MX_USB_DEVICE_Init+0x40>)
 800a1f8:	480e      	ldr	r0, [pc, #56]	; (800a234 <MX_USB_DEVICE_Init+0x44>)
 800a1fa:	f7fe fff1 	bl	80091e0 <USBD_Init>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a204:	f7f7 fcaa 	bl	8001b5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a208:	490b      	ldr	r1, [pc, #44]	; (800a238 <MX_USB_DEVICE_Init+0x48>)
 800a20a:	480a      	ldr	r0, [pc, #40]	; (800a234 <MX_USB_DEVICE_Init+0x44>)
 800a20c:	f7ff f813 	bl	8009236 <USBD_RegisterClass>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a216:	f7f7 fca1 	bl	8001b5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a21a:	4806      	ldr	r0, [pc, #24]	; (800a234 <MX_USB_DEVICE_Init+0x44>)
 800a21c:	f7ff f824 	bl	8009268 <USBD_Start>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a226:	f7f7 fc99 	bl	8001b5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a22a:	bf00      	nop
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20000390 	.word	0x20000390
 800a234:	20000638 	.word	0x20000638
 800a238:	20000294 	.word	0x20000294

0800a23c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2212      	movs	r2, #18
 800a24c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a24e:	4b03      	ldr	r3, [pc, #12]	; (800a25c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	bc80      	pop	{r7}
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	200003ac 	.word	0x200003ac

0800a260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2204      	movs	r2, #4
 800a270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a272:	4b03      	ldr	r3, [pc, #12]	; (800a280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a274:	4618      	mov	r0, r3
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	bc80      	pop	{r7}
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	200003c0 	.word	0x200003c0

0800a284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d105      	bne.n	800a2a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	4907      	ldr	r1, [pc, #28]	; (800a2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a29a:	4808      	ldr	r0, [pc, #32]	; (800a2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800a29c:	f7ff fee8 	bl	800a070 <USBD_GetString>
 800a2a0:	e004      	b.n	800a2ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	4904      	ldr	r1, [pc, #16]	; (800a2b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2a6:	4805      	ldr	r0, [pc, #20]	; (800a2bc <USBD_FS_ProductStrDescriptor+0x38>)
 800a2a8:	f7ff fee2 	bl	800a070 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2ac:	4b02      	ldr	r3, [pc, #8]	; (800a2b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	200008d4 	.word	0x200008d4
 800a2bc:	0800aa0c 	.word	0x0800aa0c

0800a2c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	4904      	ldr	r1, [pc, #16]	; (800a2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2d0:	4804      	ldr	r0, [pc, #16]	; (800a2e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2d2:	f7ff fecd 	bl	800a070 <USBD_GetString>
  return USBD_StrDesc;
 800a2d6:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	200008d4 	.word	0x200008d4
 800a2e4:	0800aa28 	.word	0x0800aa28

0800a2e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	221a      	movs	r2, #26
 800a2f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2fa:	f000 f843 	bl	800a384 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2fe:	4b02      	ldr	r3, [pc, #8]	; (800a308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	200003c4 	.word	0x200003c4

0800a30c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d105      	bne.n	800a32a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	4907      	ldr	r1, [pc, #28]	; (800a340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a322:	4808      	ldr	r0, [pc, #32]	; (800a344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a324:	f7ff fea4 	bl	800a070 <USBD_GetString>
 800a328:	e004      	b.n	800a334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	4904      	ldr	r1, [pc, #16]	; (800a340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a32e:	4805      	ldr	r0, [pc, #20]	; (800a344 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a330:	f7ff fe9e 	bl	800a070 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a334:	4b02      	ldr	r3, [pc, #8]	; (800a340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	200008d4 	.word	0x200008d4
 800a344:	0800aa3c 	.word	0x0800aa3c

0800a348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4603      	mov	r3, r0
 800a350:	6039      	str	r1, [r7, #0]
 800a352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d105      	bne.n	800a366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	4907      	ldr	r1, [pc, #28]	; (800a37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a35e:	4808      	ldr	r0, [pc, #32]	; (800a380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a360:	f7ff fe86 	bl	800a070 <USBD_GetString>
 800a364:	e004      	b.n	800a370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4904      	ldr	r1, [pc, #16]	; (800a37c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a36a:	4805      	ldr	r0, [pc, #20]	; (800a380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a36c:	f7ff fe80 	bl	800a070 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a370:	4b02      	ldr	r3, [pc, #8]	; (800a37c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	200008d4 	.word	0x200008d4
 800a380:	0800aa48 	.word	0x0800aa48

0800a384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a38a:	4b0f      	ldr	r3, [pc, #60]	; (800a3c8 <Get_SerialNum+0x44>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a390:	4b0e      	ldr	r3, [pc, #56]	; (800a3cc <Get_SerialNum+0x48>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a396:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <Get_SerialNum+0x4c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d009      	beq.n	800a3be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3aa:	2208      	movs	r2, #8
 800a3ac:	4909      	ldr	r1, [pc, #36]	; (800a3d4 <Get_SerialNum+0x50>)
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 f814 	bl	800a3dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	4908      	ldr	r1, [pc, #32]	; (800a3d8 <Get_SerialNum+0x54>)
 800a3b8:	68b8      	ldr	r0, [r7, #8]
 800a3ba:	f000 f80f 	bl	800a3dc <IntToUnicode>
  }
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	1ff80050 	.word	0x1ff80050
 800a3cc:	1ff80054 	.word	0x1ff80054
 800a3d0:	1ff80058 	.word	0x1ff80058
 800a3d4:	200003c6 	.word	0x200003c6
 800a3d8:	200003d6 	.word	0x200003d6

0800a3dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75fb      	strb	r3, [r7, #23]
 800a3f2:	e027      	b.n	800a444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	0f1b      	lsrs	r3, r3, #28
 800a3f8:	2b09      	cmp	r3, #9
 800a3fa:	d80b      	bhi.n	800a414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	0f1b      	lsrs	r3, r3, #28
 800a400:	b2da      	uxtb	r2, r3
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	4619      	mov	r1, r3
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	440b      	add	r3, r1
 800a40c:	3230      	adds	r2, #48	; 0x30
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]
 800a412:	e00a      	b.n	800a42a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	0f1b      	lsrs	r3, r3, #28
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	4619      	mov	r1, r3
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	440b      	add	r3, r1
 800a424:	3237      	adds	r2, #55	; 0x37
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	011b      	lsls	r3, r3, #4
 800a42e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	3301      	adds	r3, #1
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	4413      	add	r3, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	3301      	adds	r3, #1
 800a442:	75fb      	strb	r3, [r7, #23]
 800a444:	7dfa      	ldrb	r2, [r7, #23]
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d3d3      	bcc.n	800a3f4 <IntToUnicode+0x18>
  }
}
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	bc80      	pop	{r7}
 800a456:	4770      	bx	lr

0800a458 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d106      	bne.n	800a478 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <HAL_PCDEx_SetConnectionState+0x38>)
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	4a08      	ldr	r2, [pc, #32]	; (800a490 <HAL_PCDEx_SetConnectionState+0x38>)
 800a470:	f043 0301 	orr.w	r3, r3, #1
 800a474:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800a476:	e005      	b.n	800a484 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800a478:	4b05      	ldr	r3, [pc, #20]	; (800a490 <HAL_PCDEx_SetConnectionState+0x38>)
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	4a04      	ldr	r2, [pc, #16]	; (800a490 <HAL_PCDEx_SetConnectionState+0x38>)
 800a47e:	f023 0301 	bic.w	r3, r3, #1
 800a482:	6053      	str	r3, [r2, #4]
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	bc80      	pop	{r7}
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	40010000 	.word	0x40010000

0800a494 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a11      	ldr	r2, [pc, #68]	; (800a4e8 <HAL_PCD_MspInit+0x54>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d11b      	bne.n	800a4de <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a4a6:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <HAL_PCD_MspInit+0x58>)
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4aa:	4a10      	ldr	r2, [pc, #64]	; (800a4ec <HAL_PCD_MspInit+0x58>)
 800a4ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4b0:	6253      	str	r3, [r2, #36]	; 0x24
 800a4b2:	4b0e      	ldr	r3, [pc, #56]	; (800a4ec <HAL_PCD_MspInit+0x58>)
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	2013      	movs	r0, #19
 800a4c4:	f7f7 fffb 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800a4c8:	2013      	movs	r0, #19
 800a4ca:	f7f8 f814 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	2014      	movs	r0, #20
 800a4d4:	f7f7 fff3 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a4d8:	2014      	movs	r0, #20
 800a4da:	f7f8 f80c 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a4de:	bf00      	nop
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	40005c00 	.word	0x40005c00
 800a4ec:	40023800 	.word	0x40023800

0800a4f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a504:	4619      	mov	r1, r3
 800a506:	4610      	mov	r0, r2
 800a508:	f7fe fef6 	bl	80092f8 <USBD_LL_SetupStage>
}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a526:	78fa      	ldrb	r2, [r7, #3]
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	4613      	mov	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	440b      	add	r3, r1
 800a534:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	4619      	mov	r1, r3
 800a53e:	f7fe ff28 	bl	8009392 <USBD_LL_DataOutStage>
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a55c:	78fa      	ldrb	r2, [r7, #3]
 800a55e:	6879      	ldr	r1, [r7, #4]
 800a560:	4613      	mov	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	440b      	add	r3, r1
 800a56a:	333c      	adds	r3, #60	; 0x3c
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	4619      	mov	r1, r3
 800a572:	f7fe ff7f 	bl	8009474 <USBD_LL_DataInStage>
}
 800a576:	bf00      	nop
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7ff f88a 	bl	80096a6 <USBD_LL_SOF>
}
 800a592:	bf00      	nop
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d001      	beq.n	800a5b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a5ae:	f7f7 fad5 	bl	8001b5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5b8:	7bfa      	ldrb	r2, [r7, #15]
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff f83f 	bl	8009640 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe fff8 	bl	80095be <USBD_LL_Reset>
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7ff f839 	bl	800965e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d005      	beq.n	800a600 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5f4:	4b04      	ldr	r3, [pc, #16]	; (800a608 <HAL_PCD_SuspendCallback+0x30>)
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	4a03      	ldr	r2, [pc, #12]	; (800a608 <HAL_PCD_SuspendCallback+0x30>)
 800a5fa:	f043 0306 	orr.w	r3, r3, #6
 800a5fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	e000ed00 	.word	0xe000ed00

0800a60c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7ff f833 	bl	8009686 <USBD_LL_Resume>
}
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a630:	4a1f      	ldr	r2, [pc, #124]	; (800a6b0 <USBD_LL_Init+0x88>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a1d      	ldr	r2, [pc, #116]	; (800a6b0 <USBD_LL_Init+0x88>)
 800a63c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800a640:	4b1b      	ldr	r3, [pc, #108]	; (800a6b0 <USBD_LL_Init+0x88>)
 800a642:	4a1c      	ldr	r2, [pc, #112]	; (800a6b4 <USBD_LL_Init+0x8c>)
 800a644:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a646:	4b1a      	ldr	r3, [pc, #104]	; (800a6b0 <USBD_LL_Init+0x88>)
 800a648:	2208      	movs	r2, #8
 800a64a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a64c:	4b18      	ldr	r3, [pc, #96]	; (800a6b0 <USBD_LL_Init+0x88>)
 800a64e:	2202      	movs	r2, #2
 800a650:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a652:	4b17      	ldr	r3, [pc, #92]	; (800a6b0 <USBD_LL_Init+0x88>)
 800a654:	2202      	movs	r2, #2
 800a656:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a658:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <USBD_LL_Init+0x88>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a65e:	4b14      	ldr	r3, [pc, #80]	; (800a6b0 <USBD_LL_Init+0x88>)
 800a660:	2200      	movs	r2, #0
 800a662:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a664:	4812      	ldr	r0, [pc, #72]	; (800a6b0 <USBD_LL_Init+0x88>)
 800a666:	f7f8 faeb 	bl	8002c40 <HAL_PCD_Init>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a670:	f7f7 fa74 	bl	8001b5c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a67a:	2318      	movs	r3, #24
 800a67c:	2200      	movs	r2, #0
 800a67e:	2100      	movs	r1, #0
 800a680:	f7f9 feb1 	bl	80043e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a68a:	2358      	movs	r3, #88	; 0x58
 800a68c:	2200      	movs	r2, #0
 800a68e:	2180      	movs	r1, #128	; 0x80
 800a690:	f7f9 fea9 	bl	80043e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a69a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2181      	movs	r1, #129	; 0x81
 800a6a2:	f7f9 fea0 	bl	80043e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20000ad4 	.word	0x20000ad4
 800a6b4:	40005c00 	.word	0x40005c00

0800a6b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7f8 fb94 	bl	8002dfc <HAL_PCD_Start>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 f932 	bl	800a944 <USBD_Get_USB_Status>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	4608      	mov	r0, r1
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	70fb      	strb	r3, [r7, #3]
 800a700:	460b      	mov	r3, r1
 800a702:	70bb      	strb	r3, [r7, #2]
 800a704:	4613      	mov	r3, r2
 800a706:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a716:	78bb      	ldrb	r3, [r7, #2]
 800a718:	883a      	ldrh	r2, [r7, #0]
 800a71a:	78f9      	ldrb	r1, [r7, #3]
 800a71c:	f7f8 fcb0 	bl	8003080 <HAL_PCD_EP_Open>
 800a720:	4603      	mov	r3, r0
 800a722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 f90c 	bl	800a944 <USBD_Get_USB_Status>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a730:	7bbb      	ldrb	r3, [r7, #14]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	460b      	mov	r3, r1
 800a744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a754:	78fa      	ldrb	r2, [r7, #3]
 800a756:	4611      	mov	r1, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	f7f8 fcf7 	bl	800314c <HAL_PCD_EP_Close>
 800a75e:	4603      	mov	r3, r0
 800a760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	4618      	mov	r0, r3
 800a766:	f000 f8ed 	bl	800a944 <USBD_Get_USB_Status>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a792:	78fa      	ldrb	r2, [r7, #3]
 800a794:	4611      	mov	r1, r2
 800a796:	4618      	mov	r0, r3
 800a798:	f7f8 fda0 	bl	80032dc <HAL_PCD_EP_SetStall>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 f8ce 	bl	800a944 <USBD_Get_USB_Status>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a7d0:	78fa      	ldrb	r2, [r7, #3]
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7f8 fdd3 	bl	8003380 <HAL_PCD_EP_ClrStall>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 f8af 	bl	800a944 <USBD_Get_USB_Status>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a806:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	da0c      	bge.n	800a82a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a816:	68f9      	ldr	r1, [r7, #12]
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	4613      	mov	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4413      	add	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	440b      	add	r3, r1
 800a824:	3302      	adds	r3, #2
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	e00b      	b.n	800a842 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a82a:	78fb      	ldrb	r3, [r7, #3]
 800a82c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a830:	68f9      	ldr	r1, [r7, #12]
 800a832:	4613      	mov	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	440b      	add	r3, r1
 800a83c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a840:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a842:	4618      	mov	r0, r3
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	bc80      	pop	{r7}
 800a84a:	4770      	bx	lr

0800a84c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a866:	78fa      	ldrb	r2, [r7, #3]
 800a868:	4611      	mov	r1, r2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f8 fbe3 	bl	8003036 <HAL_PCD_SetAddress>
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	4618      	mov	r0, r3
 800a878:	f000 f864 	bl	800a944 <USBD_Get_USB_Status>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a880:	7bbb      	ldrb	r3, [r7, #14]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b086      	sub	sp, #24
 800a88e:	af00      	add	r7, sp, #0
 800a890:	60f8      	str	r0, [r7, #12]
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	461a      	mov	r2, r3
 800a896:	460b      	mov	r3, r1
 800a898:	72fb      	strb	r3, [r7, #11]
 800a89a:	4613      	mov	r3, r2
 800a89c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a8ac:	893b      	ldrh	r3, [r7, #8]
 800a8ae:	7af9      	ldrb	r1, [r7, #11]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	f7f8 fcd0 	bl	8003256 <HAL_PCD_EP_Transmit>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 f841 	bl	800a944 <USBD_Get_USB_Status>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	607a      	str	r2, [r7, #4]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	460b      	mov	r3, r1
 800a8de:	72fb      	strb	r3, [r7, #11]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a8f2:	893b      	ldrh	r3, [r7, #8]
 800a8f4:	7af9      	ldrb	r1, [r7, #11]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	f7f8 fc70 	bl	80031dc <HAL_PCD_EP_Receive>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a900:	7dfb      	ldrb	r3, [r7, #23]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f81e 	bl	800a944 <USBD_Get_USB_Status>
 800a908:	4603      	mov	r3, r0
 800a90a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a90c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
	...

0800a918 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a920:	4b02      	ldr	r3, [pc, #8]	; (800a92c <USBD_static_malloc+0x14>)
}
 800a922:	4618      	mov	r0, r3
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	bc80      	pop	{r7}
 800a92a:	4770      	bx	lr
 800a92c:	20000dc0 	.word	0x20000dc0

0800a930 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]

}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bc80      	pop	{r7}
 800a940:	4770      	bx	lr
	...

0800a944 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a952:	79fb      	ldrb	r3, [r7, #7]
 800a954:	2b03      	cmp	r3, #3
 800a956:	d817      	bhi.n	800a988 <USBD_Get_USB_Status+0x44>
 800a958:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <USBD_Get_USB_Status+0x1c>)
 800a95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95e:	bf00      	nop
 800a960:	0800a971 	.word	0x0800a971
 800a964:	0800a977 	.word	0x0800a977
 800a968:	0800a97d 	.word	0x0800a97d
 800a96c:	0800a983 	.word	0x0800a983
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	73fb      	strb	r3, [r7, #15]
    break;
 800a974:	e00b      	b.n	800a98e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a976:	2302      	movs	r3, #2
 800a978:	73fb      	strb	r3, [r7, #15]
    break;
 800a97a:	e008      	b.n	800a98e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a97c:	2301      	movs	r3, #1
 800a97e:	73fb      	strb	r3, [r7, #15]
    break;
 800a980:	e005      	b.n	800a98e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a982:	2302      	movs	r3, #2
 800a984:	73fb      	strb	r3, [r7, #15]
    break;
 800a986:	e002      	b.n	800a98e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a988:	2302      	movs	r3, #2
 800a98a:	73fb      	strb	r3, [r7, #15]
    break;
 800a98c:	bf00      	nop
  }
  return usb_status;
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	bc80      	pop	{r7}
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop

0800a99c <__libc_init_array>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	2600      	movs	r6, #0
 800a9a0:	4d0c      	ldr	r5, [pc, #48]	; (800a9d4 <__libc_init_array+0x38>)
 800a9a2:	4c0d      	ldr	r4, [pc, #52]	; (800a9d8 <__libc_init_array+0x3c>)
 800a9a4:	1b64      	subs	r4, r4, r5
 800a9a6:	10a4      	asrs	r4, r4, #2
 800a9a8:	42a6      	cmp	r6, r4
 800a9aa:	d109      	bne.n	800a9c0 <__libc_init_array+0x24>
 800a9ac:	f000 f822 	bl	800a9f4 <_init>
 800a9b0:	2600      	movs	r6, #0
 800a9b2:	4d0a      	ldr	r5, [pc, #40]	; (800a9dc <__libc_init_array+0x40>)
 800a9b4:	4c0a      	ldr	r4, [pc, #40]	; (800a9e0 <__libc_init_array+0x44>)
 800a9b6:	1b64      	subs	r4, r4, r5
 800a9b8:	10a4      	asrs	r4, r4, #2
 800a9ba:	42a6      	cmp	r6, r4
 800a9bc:	d105      	bne.n	800a9ca <__libc_init_array+0x2e>
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
 800a9c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c4:	4798      	blx	r3
 800a9c6:	3601      	adds	r6, #1
 800a9c8:	e7ee      	b.n	800a9a8 <__libc_init_array+0xc>
 800a9ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ce:	4798      	blx	r3
 800a9d0:	3601      	adds	r6, #1
 800a9d2:	e7f2      	b.n	800a9ba <__libc_init_array+0x1e>
 800a9d4:	0800aa84 	.word	0x0800aa84
 800a9d8:	0800aa84 	.word	0x0800aa84
 800a9dc:	0800aa84 	.word	0x0800aa84
 800a9e0:	0800aa88 	.word	0x0800aa88

0800a9e4 <memset>:
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	4402      	add	r2, r0
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d100      	bne.n	800a9ee <memset+0xa>
 800a9ec:	4770      	bx	lr
 800a9ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a9f2:	e7f9      	b.n	800a9e8 <memset+0x4>

0800a9f4 <_init>:
 800a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f6:	bf00      	nop
 800a9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fa:	bc08      	pop	{r3}
 800a9fc:	469e      	mov	lr, r3
 800a9fe:	4770      	bx	lr

0800aa00 <_fini>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	bf00      	nop
 800aa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa06:	bc08      	pop	{r3}
 800aa08:	469e      	mov	lr, r3
 800aa0a:	4770      	bx	lr
